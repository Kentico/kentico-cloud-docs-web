/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);

__webpack_require__(2);

__webpack_require__(3);

__webpack_require__(4);

__webpack_require__(5);

__webpack_require__(6);

__webpack_require__(7);

__webpack_require__(8);

__webpack_require__(9);

__webpack_require__(10);

__webpack_require__(11);

__webpack_require__(12);

__webpack_require__(13);

__webpack_require__(14);

__webpack_require__(15);

/***/ }),
/* 1 */
/***/ (function(module, exports) {

/**
 * Polyfills for used functionality in other JS files in the ../ folder
 */
// Production steps of ECMA-262, Edition 6, 22.1.2.1
if (!Array.from) {
  Array.from = function () {
    var toStr = Object.prototype.toString;

    var isCallable = function isCallable(fn) {
      return typeof fn === 'function' || toStr.call(fn) === '[object Function]';
    };

    var toInteger = function toInteger(value) {
      var number = Number(value);

      if (isNaN(number)) {
        return 0;
      }

      if (number === 0 || !isFinite(number)) {
        return number;
      }

      return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
    };

    var maxSafeInteger = Math.pow(2, 53) - 1;

    var toLength = function toLength(value) {
      var len = toInteger(value);
      return Math.min(Math.max(len, 0), maxSafeInteger);
    }; // The length property of the from method is 1.


    return function from(arrayLike
    /*, mapFn, thisArg */
    ) {
      // 1. Let C be the this value.
      var C = this; // 2. Let items be ToObject(arrayLike).

      var items = Object(arrayLike); // 3. ReturnIfAbrupt(items).

      if (arrayLike == null) {
        throw new TypeError('Array.from requires an array-like object - not null or undefined');
      } // 4. If mapfn is undefined, then let mapping be false.


      var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
      var T;

      if (typeof mapFn !== 'undefined') {
        // 5. else
        // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
        if (!isCallable(mapFn)) {
          throw new TypeError('Array.from: when provided, the second argument must be a function');
        } // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.


        if (arguments.length > 2) {
          T = arguments[2];
        }
      } // 10. Let lenValue be Get(items, "length").
      // 11. Let len be ToLength(lenValue).


      var len = toLength(items.length); // 13. If IsConstructor(C) is true, then
      // 13. a. Let A be the result of calling the [[Construct]] internal method
      // of C with an argument list containing the single item len.
      // 14. a. Else, Let A be ArrayCreate(len).

      var A = isCallable(C) ? Object(new C(len)) : new Array(len); // 16. Let k be 0.

      var k = 0; // 17. Repeat, while k < len… (also steps a - h)

      var kValue;

      while (k < len) {
        kValue = items[k];

        if (mapFn) {
          A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
        } else {
          A[k] = kValue;
        }

        k += 1;
      } // 18. Let putStatus be Put(A, "length", len, true).


      A.length = len; // 20. Return A.

      return A;
    };
  }();
}

if (typeof Object.assign !== 'function') {
  // Must be writable: true, enumerable: false, configurable: true
  Object.defineProperty(Object, 'assign', {
    value: function assign(target, varArgs) {
      // .length of function is 2
      'use strict';

      if (target == null) {
        // TypeError if undefined or null
        throw new TypeError('Cannot convert undefined or null to object');
      }

      var to = Object(target);

      for (var index = 1; index < arguments.length; index++) {
        var nextSource = arguments[index];

        if (nextSource != null) {
          // Skip over if undefined or null
          for (var nextKey in nextSource) {
            // Avoid bugs when hasOwnProperty is shadowed
            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
              to[nextKey] = nextSource[nextKey];
            }
          }
        }
      }

      return to;
    },
    writable: true,
    configurable: true
  });
} // Test via a getter in the options object to see if the passive property is accessed


var supportsPassive = false;

try {
  var opts = Object.defineProperty({}, 'passive', {
    get: function get() {
      supportsPassive = true;
    }
  });
  window.addEventListener('testPassive', null, opts);
  window.removeEventListener('testPassive', null, opts);
} catch (e) {} // Adds forEach function to NodeList class prototype
// Adds matches function for IE11


(function () {
  if (typeof NodeList.prototype.forEach === 'function') {
    return false;
  } else {
    NodeList.prototype.forEach = Array.prototype.forEach;
  }

  if (!Element.prototype.matches) {
    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
  }
})();

if (!String.prototype.endsWith) {
  String.prototype.endsWith = function (searchString, position) {
    var subjectString = this.toString();

    if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
      position = subjectString.length;
    }

    position -= searchString.length;
    var lastIndex = subjectString.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
  };
}

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

var require;var require;(function e(t, n, r) {
  function s(o, u) {
    if (!n[o]) {
      if (!t[o]) {
        var a = typeof require == "function" && require;
        if (!u && a) return require(o, !0);
        if (i) return i(o, !0);
        var f = new Error("Cannot find module '" + o + "'");
        throw f.code = "MODULE_NOT_FOUND", f;
      }

      var l = n[o] = {
        exports: {}
      };
      t[o][0].call(l.exports, function (e) {
        var n = t[o][1][e];
        return s(n ? n : e);
      }, l, l.exports, e, t, n, r);
    }

    return n[o].exports;
  }

  var i = typeof require == "function" && require;

  for (var o = 0; o < r.length; o++) {
    s(r[o]);
  }

  return s;
})({
  1: [function (require, module, exports) {
    /**
     * default settings
     *
     * @author Zongmin Lei<leizongmin@gmail.com>
     */
    var FilterCSS = require("cssfilter").FilterCSS;

    var getDefaultCSSWhiteList = require("cssfilter").getDefaultWhiteList;

    var _ = require("./util");

    function getDefaultWhiteList() {
      return {
        a: ["target", "href", "title"],
        abbr: ["title"],
        address: [],
        area: ["shape", "coords", "href", "alt"],
        article: [],
        aside: [],
        audio: ["autoplay", "controls", "loop", "preload", "src"],
        b: [],
        bdi: ["dir"],
        bdo: ["dir"],
        big: [],
        blockquote: ["cite"],
        br: [],
        caption: [],
        center: [],
        cite: [],
        code: [],
        col: ["align", "valign", "span", "width"],
        colgroup: ["align", "valign", "span", "width"],
        dd: [],
        del: ["datetime"],
        details: ["open"],
        div: [],
        dl: [],
        dt: [],
        em: [],
        font: ["color", "size", "face"],
        footer: [],
        h1: [],
        h2: [],
        h3: [],
        h4: [],
        h5: [],
        h6: [],
        header: [],
        hr: [],
        i: [],
        img: ["src", "alt", "title", "width", "height"],
        ins: ["datetime"],
        li: [],
        mark: [],
        nav: [],
        ol: [],
        p: [],
        pre: [],
        s: [],
        section: [],
        small: [],
        span: [],
        sub: [],
        sup: [],
        strong: [],
        table: ["width", "border", "align", "valign"],
        tbody: ["align", "valign"],
        td: ["width", "rowspan", "colspan", "align", "valign"],
        tfoot: ["align", "valign"],
        th: ["width", "rowspan", "colspan", "align", "valign"],
        thead: ["align", "valign"],
        tr: ["rowspan", "align", "valign"],
        tt: [],
        u: [],
        ul: [],
        video: ["autoplay", "controls", "loop", "preload", "src", "height", "width"]
      };
    }

    var defaultCSSFilter = new FilterCSS();
    /**
     * default onTag function
     *
     * @param {String} tag
     * @param {String} html
     * @param {Object} options
     * @return {String}
     */

    function onTag(tag, html, options) {} // do nothing

    /**
     * default onIgnoreTag function
     *
     * @param {String} tag
     * @param {String} html
     * @param {Object} options
     * @return {String}
     */


    function onIgnoreTag(tag, html, options) {} // do nothing

    /**
     * default onTagAttr function
     *
     * @param {String} tag
     * @param {String} name
     * @param {String} value
     * @return {String}
     */


    function onTagAttr(tag, name, value) {} // do nothing

    /**
     * default onIgnoreTagAttr function
     *
     * @param {String} tag
     * @param {String} name
     * @param {String} value
     * @return {String}
     */


    function onIgnoreTagAttr(tag, name, value) {} // do nothing

    /**
     * default escapeHtml function
     *
     * @param {String} html
     */


    function escapeHtml(html) {
      return html.replace(REGEXP_LT, "&lt;").replace(REGEXP_GT, "&gt;");
    }
    /**
     * default safeAttrValue function
     *
     * @param {String} tag
     * @param {String} name
     * @param {String} value
     * @param {Object} cssFilter
     * @return {String}
     */


    function safeAttrValue(tag, name, value, cssFilter) {
      // unescape attribute value firstly
      value = friendlyAttrValue(value);

      if (name === "href" || name === "src") {
        // filter `href` and `src` attribute
        // only allow the value that starts with `http://` | `https://` | `mailto:` | `/` | `#`
        value = _.trim(value);
        if (value === "#") return "#";

        if (!(value.substr(0, 7) === "http://" || value.substr(0, 8) === "https://" || value.substr(0, 7) === "mailto:" || value.substr(0, 4) === "tel:" || value[0] === "#" || value[0] === "/")) {
          return "";
        }
      } else if (name === "background") {
        // filter `background` attribute (maybe no use)
        // `javascript:`
        REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;

        if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
          return "";
        }
      } else if (name === "style") {
        // `expression()`
        REGEXP_DEFAULT_ON_TAG_ATTR_7.lastIndex = 0;

        if (REGEXP_DEFAULT_ON_TAG_ATTR_7.test(value)) {
          return "";
        } // `url()`


        REGEXP_DEFAULT_ON_TAG_ATTR_8.lastIndex = 0;

        if (REGEXP_DEFAULT_ON_TAG_ATTR_8.test(value)) {
          REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;

          if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
            return "";
          }
        }

        if (cssFilter !== false) {
          cssFilter = cssFilter || defaultCSSFilter;
          value = cssFilter.process(value);
        }
      } // escape `<>"` before returns


      value = escapeAttrValue(value);
      return value;
    } // RegExp list


    var REGEXP_LT = /</g;
    var REGEXP_GT = />/g;
    var REGEXP_QUOTE = /"/g;
    var REGEXP_QUOTE_2 = /&quot;/g;
    var REGEXP_ATTR_VALUE_1 = /&#([a-zA-Z0-9]*);?/gim;
    var REGEXP_ATTR_VALUE_COLON = /&colon;?/gim;
    var REGEXP_ATTR_VALUE_NEWLINE = /&newline;?/gim;
    var REGEXP_DEFAULT_ON_TAG_ATTR_3 = /\/\*|\*\//gm;
    var REGEXP_DEFAULT_ON_TAG_ATTR_4 = /((j\s*a\s*v\s*a|v\s*b|l\s*i\s*v\s*e)\s*s\s*c\s*r\s*i\s*p\s*t\s*|m\s*o\s*c\s*h\s*a)\:/gi;
    var REGEXP_DEFAULT_ON_TAG_ATTR_5 = /^[\s"'`]*(d\s*a\s*t\s*a\s*)\:/gi;
    var REGEXP_DEFAULT_ON_TAG_ATTR_6 = /^[\s"'`]*(d\s*a\s*t\s*a\s*)\:\s*image\//gi;
    var REGEXP_DEFAULT_ON_TAG_ATTR_7 = /e\s*x\s*p\s*r\s*e\s*s\s*s\s*i\s*o\s*n\s*\(.*/gi;
    var REGEXP_DEFAULT_ON_TAG_ATTR_8 = /u\s*r\s*l\s*\(.*/gi;
    /**
     * escape doube quote
     *
     * @param {String} str
     * @return {String} str
     */

    function escapeQuote(str) {
      return str.replace(REGEXP_QUOTE, "&quot;");
    }
    /**
     * unescape double quote
     *
     * @param {String} str
     * @return {String} str
     */


    function unescapeQuote(str) {
      return str.replace(REGEXP_QUOTE_2, '"');
    }
    /**
     * escape html entities
     *
     * @param {String} str
     * @return {String}
     */


    function escapeHtmlEntities(str) {
      return str.replace(REGEXP_ATTR_VALUE_1, function replaceUnicode(str, code) {
        return code[0] === "x" || code[0] === "X" ? String.fromCharCode(parseInt(code.substr(1), 16)) : String.fromCharCode(parseInt(code, 10));
      });
    }
    /**
     * escape html5 new danger entities
     *
     * @param {String} str
     * @return {String}
     */


    function escapeDangerHtml5Entities(str) {
      return str.replace(REGEXP_ATTR_VALUE_COLON, ":").replace(REGEXP_ATTR_VALUE_NEWLINE, " ");
    }
    /**
     * clear nonprintable characters
     *
     * @param {String} str
     * @return {String}
     */


    function clearNonPrintableCharacter(str) {
      var str2 = "";

      for (var i = 0, len = str.length; i < len; i++) {
        str2 += str.charCodeAt(i) < 32 ? " " : str.charAt(i);
      }

      return _.trim(str2);
    }
    /**
     * get friendly attribute value
     *
     * @param {String} str
     * @return {String}
     */


    function friendlyAttrValue(str) {
      str = unescapeQuote(str);
      str = escapeHtmlEntities(str);
      str = escapeDangerHtml5Entities(str);
      str = clearNonPrintableCharacter(str);
      return str;
    }
    /**
     * unescape attribute value
     *
     * @param {String} str
     * @return {String}
     */


    function escapeAttrValue(str) {
      str = escapeQuote(str);
      str = escapeHtml(str);
      return str;
    }
    /**
     * `onIgnoreTag` function for removing all the tags that are not in whitelist
     */


    function onIgnoreTagStripAll() {
      return "";
    }
    /**
     * remove tag body
     * specify a `tags` list, if the tag is not in the `tags` list then process by the specify function (optional)
     *
     * @param {array} tags
     * @param {function} next
     */


    function StripTagBody(tags, next) {
      if (typeof next !== "function") {
        next = function next() {};
      }

      var isRemoveAllTag = !Array.isArray(tags);

      function isRemoveTag(tag) {
        if (isRemoveAllTag) return true;
        return _.indexOf(tags, tag) !== -1;
      }

      var removeList = [];
      var posStart = false;
      return {
        onIgnoreTag: function onIgnoreTag(tag, html, options) {
          if (isRemoveTag(tag)) {
            if (options.isClosing) {
              var ret = "[/removed]";
              var end = options.position + ret.length;
              removeList.push([posStart !== false ? posStart : options.position, end]);
              posStart = false;
              return ret;
            } else {
              if (!posStart) {
                posStart = options.position;
              }

              return "[removed]";
            }
          } else {
            return next(tag, html, options);
          }
        },
        remove: function remove(html) {
          var rethtml = "";
          var lastPos = 0;

          _.forEach(removeList, function (pos) {
            rethtml += html.slice(lastPos, pos[0]);
            lastPos = pos[1];
          });

          rethtml += html.slice(lastPos);
          return rethtml;
        }
      };
    }
    /**
     * remove html comments
     *
     * @param {String} html
     * @return {String}
     */


    function stripCommentTag(html) {
      return html.replace(STRIP_COMMENT_TAG_REGEXP, "");
    }

    var STRIP_COMMENT_TAG_REGEXP = /<!--[\s\S]*?-->/g;
    /**
     * remove invisible characters
     *
     * @param {String} html
     * @return {String}
     */

    function stripBlankChar(html) {
      var chars = html.split("");
      chars = chars.filter(function (_char) {
        var c = _char.charCodeAt(0);

        if (c === 127) return false;

        if (c <= 31) {
          if (c === 10 || c === 13) return true;
          return false;
        }

        return true;
      });
      return chars.join("");
    }

    exports.whiteList = getDefaultWhiteList();
    exports.getDefaultWhiteList = getDefaultWhiteList;
    exports.onTag = onTag;
    exports.onIgnoreTag = onIgnoreTag;
    exports.onTagAttr = onTagAttr;
    exports.onIgnoreTagAttr = onIgnoreTagAttr;
    exports.safeAttrValue = safeAttrValue;
    exports.escapeHtml = escapeHtml;
    exports.escapeQuote = escapeQuote;
    exports.unescapeQuote = unescapeQuote;
    exports.escapeHtmlEntities = escapeHtmlEntities;
    exports.escapeDangerHtml5Entities = escapeDangerHtml5Entities;
    exports.clearNonPrintableCharacter = clearNonPrintableCharacter;
    exports.friendlyAttrValue = friendlyAttrValue;
    exports.escapeAttrValue = escapeAttrValue;
    exports.onIgnoreTagStripAll = onIgnoreTagStripAll;
    exports.StripTagBody = StripTagBody;
    exports.stripCommentTag = stripCommentTag;
    exports.stripBlankChar = stripBlankChar;
    exports.cssFilter = defaultCSSFilter;
    exports.getDefaultCSSWhiteList = getDefaultCSSWhiteList;
  }, {
    "./util": 4,
    "cssfilter": 8
  }],
  2: [function (require, module, exports) {
    /**
     * xss
     *
     * @author Zongmin Lei<leizongmin@gmail.com>
     */
    var DEFAULT = require("./default");

    var parser = require("./parser");

    var FilterXSS = require("./xss");
    /**
     * filter xss function
     *
     * @param {String} html
     * @param {Object} options { whiteList, onTag, onTagAttr, onIgnoreTag, onIgnoreTagAttr, safeAttrValue, escapeHtml }
     * @return {String}
     */


    function filterXSS(html, options) {
      var xss = new FilterXSS(options);
      return xss.process(html);
    }

    exports = module.exports = filterXSS;
    exports.filterXSS = filterXSS;
    exports.FilterXSS = FilterXSS;

    for (var i in DEFAULT) {
      exports[i] = DEFAULT[i];
    }

    for (var i in parser) {
      exports[i] = parser[i];
    } // using `xss` on the browser, output `filterXSS` to the globals


    if (typeof window !== "undefined") {
      window.filterXSS = module.exports;
    } // using `xss` on the WebWorker, output `filterXSS` to the globals


    function isWorkerEnv() {
      return typeof self !== 'undefined' && typeof DedicatedWorkerGlobalScope !== 'undefined' && self instanceof DedicatedWorkerGlobalScope;
    }

    if (isWorkerEnv()) {
      self.filterXSS = module.exports;
    }
  }, {
    "./default": 1,
    "./parser": 3,
    "./xss": 5
  }],
  3: [function (require, module, exports) {
    /**
     * Simple HTML Parser
     *
     * @author Zongmin Lei<leizongmin@gmail.com>
     */
    var _ = require("./util");
    /**
     * get tag name
     *
     * @param {String} html e.g. '<a hef="#">'
     * @return {String}
     */


    function getTagName(html) {
      var i = _.spaceIndex(html);

      if (i === -1) {
        var tagName = html.slice(1, -1);
      } else {
        var tagName = html.slice(1, i + 1);
      }

      tagName = _.trim(tagName).toLowerCase();
      if (tagName.slice(0, 1) === "/") tagName = tagName.slice(1);
      if (tagName.slice(-1) === "/") tagName = tagName.slice(0, -1);
      return tagName;
    }
    /**
     * is close tag?
     *
     * @param {String} html 如：'<a hef="#">'
     * @return {Boolean}
     */


    function isClosing(html) {
      return html.slice(0, 2) === "</";
    }
    /**
     * parse input html and returns processed html
     *
     * @param {String} html
     * @param {Function} onTag e.g. function (sourcePosition, position, tag, html, isClosing)
     * @param {Function} escapeHtml
     * @return {String}
     */


    function parseTag(html, onTag, escapeHtml) {
      "use strict";

      var rethtml = "";
      var lastPos = 0;
      var tagStart = false;
      var quoteStart = false;
      var currentPos = 0;
      var len = html.length;
      var currentTagName = "";
      var currentHtml = "";

      for (currentPos = 0; currentPos < len; currentPos++) {
        var c = html.charAt(currentPos);

        if (tagStart === false) {
          if (c === "<") {
            tagStart = currentPos;
            continue;
          }
        } else {
          if (quoteStart === false) {
            if (c === "<") {
              rethtml += escapeHtml(html.slice(lastPos, currentPos));
              tagStart = currentPos;
              lastPos = currentPos;
              continue;
            }

            if (c === ">") {
              rethtml += escapeHtml(html.slice(lastPos, tagStart));
              currentHtml = html.slice(tagStart, currentPos + 1);
              currentTagName = getTagName(currentHtml);
              rethtml += onTag(tagStart, rethtml.length, currentTagName, currentHtml, isClosing(currentHtml));
              lastPos = currentPos + 1;
              tagStart = false;
              continue;
            }

            if ((c === '"' || c === "'") && html.charAt(currentPos - 1) === "=") {
              quoteStart = c;
              continue;
            }
          } else {
            if (c === quoteStart) {
              quoteStart = false;
              continue;
            }
          }
        }
      }

      if (lastPos < html.length) {
        rethtml += escapeHtml(html.substr(lastPos));
      }

      return rethtml;
    }

    var REGEXP_ILLEGAL_ATTR_NAME = /[^a-zA-Z0-9_:\.\-]/gim;
    /**
     * parse input attributes and returns processed attributes
     *
     * @param {String} html e.g. `href="#" target="_blank"`
     * @param {Function} onAttr e.g. `function (name, value)`
     * @return {String}
     */

    function parseAttr(html, onAttr) {
      "use strict";

      var lastPos = 0;
      var retAttrs = [];
      var tmpName = false;
      var len = html.length;

      function addAttr(name, value) {
        name = _.trim(name);
        name = name.replace(REGEXP_ILLEGAL_ATTR_NAME, "").toLowerCase();
        if (name.length < 1) return;
        var ret = onAttr(name, value || "");
        if (ret) retAttrs.push(ret);
      } // 逐个分析字符


      for (var i = 0; i < len; i++) {
        var c = html.charAt(i);
        var v, j;

        if (tmpName === false && c === "=") {
          tmpName = html.slice(lastPos, i);
          lastPos = i + 1;
          continue;
        }

        if (tmpName !== false) {
          if (i === lastPos && (c === '"' || c === "'") && html.charAt(i - 1) === "=") {
            j = html.indexOf(c, i + 1);

            if (j === -1) {
              break;
            } else {
              v = _.trim(html.slice(lastPos + 1, j));
              addAttr(tmpName, v);
              tmpName = false;
              i = j;
              lastPos = i + 1;
              continue;
            }
          }
        }

        if (/\s|\n|\t/.test(c)) {
          html = html.replace(/\s|\n|\t/g, " ");

          if (tmpName === false) {
            j = findNextEqual(html, i);

            if (j === -1) {
              v = _.trim(html.slice(lastPos, i));
              addAttr(v);
              tmpName = false;
              lastPos = i + 1;
              continue;
            } else {
              i = j - 1;
              continue;
            }
          } else {
            j = findBeforeEqual(html, i - 1);

            if (j === -1) {
              v = _.trim(html.slice(lastPos, i));
              v = stripQuoteWrap(v);
              addAttr(tmpName, v);
              tmpName = false;
              lastPos = i + 1;
              continue;
            } else {
              continue;
            }
          }
        }
      }

      if (lastPos < html.length) {
        if (tmpName === false) {
          addAttr(html.slice(lastPos));
        } else {
          addAttr(tmpName, stripQuoteWrap(_.trim(html.slice(lastPos))));
        }
      }

      return _.trim(retAttrs.join(" "));
    }

    function findNextEqual(str, i) {
      for (; i < str.length; i++) {
        var c = str[i];
        if (c === " ") continue;
        if (c === "=") return i;
        return -1;
      }
    }

    function findBeforeEqual(str, i) {
      for (; i > 0; i--) {
        var c = str[i];
        if (c === " ") continue;
        if (c === "=") return i;
        return -1;
      }
    }

    function isQuoteWrapString(text) {
      if (text[0] === '"' && text[text.length - 1] === '"' || text[0] === "'" && text[text.length - 1] === "'") {
        return true;
      } else {
        return false;
      }
    }

    function stripQuoteWrap(text) {
      if (isQuoteWrapString(text)) {
        return text.substr(1, text.length - 2);
      } else {
        return text;
      }
    }

    exports.parseTag = parseTag;
    exports.parseAttr = parseAttr;
  }, {
    "./util": 4
  }],
  4: [function (require, module, exports) {
    module.exports = {
      indexOf: function indexOf(arr, item) {
        var i, j;

        if (Array.prototype.indexOf) {
          return arr.indexOf(item);
        }

        for (i = 0, j = arr.length; i < j; i++) {
          if (arr[i] === item) {
            return i;
          }
        }

        return -1;
      },
      forEach: function forEach(arr, fn, scope) {
        var i, j;

        if (Array.prototype.forEach) {
          return arr.forEach(fn, scope);
        }

        for (i = 0, j = arr.length; i < j; i++) {
          fn.call(scope, arr[i], i, arr);
        }
      },
      trim: function trim(str) {
        if (String.prototype.trim) {
          return str.trim();
        }

        return str.replace(/(^\s*)|(\s*$)/g, "");
      },
      spaceIndex: function spaceIndex(str) {
        var reg = /\s|\n|\t/;
        var match = reg.exec(str);
        return match ? match.index : -1;
      }
    };
  }, {}],
  5: [function (require, module, exports) {
    /**
     * filter xss
     *
     * @author Zongmin Lei<leizongmin@gmail.com>
     */
    var FilterCSS = require("cssfilter").FilterCSS;

    var DEFAULT = require("./default");

    var parser = require("./parser");

    var parseTag = parser.parseTag;
    var parseAttr = parser.parseAttr;

    var _ = require("./util");
    /**
     * returns `true` if the input value is `undefined` or `null`
     *
     * @param {Object} obj
     * @return {Boolean}
     */


    function isNull(obj) {
      return obj === undefined || obj === null;
    }
    /**
     * get attributes for a tag
     *
     * @param {String} html
     * @return {Object}
     *   - {String} html
     *   - {Boolean} closing
     */


    function getAttrs(html) {
      var i = _.spaceIndex(html);

      if (i === -1) {
        return {
          html: "",
          closing: html[html.length - 2] === "/"
        };
      }

      html = _.trim(html.slice(i + 1, -1));
      var isClosing = html[html.length - 1] === "/";
      if (isClosing) html = _.trim(html.slice(0, -1));
      return {
        html: html,
        closing: isClosing
      };
    }
    /**
     * shallow copy
     *
     * @param {Object} obj
     * @return {Object}
     */


    function shallowCopyObject(obj) {
      var ret = {};

      for (var i in obj) {
        ret[i] = obj[i];
      }

      return ret;
    }
    /**
     * FilterXSS class
     *
     * @param {Object} options
     *        whiteList, onTag, onTagAttr, onIgnoreTag,
     *        onIgnoreTagAttr, safeAttrValue, escapeHtml
     *        stripIgnoreTagBody, allowCommentTag, stripBlankChar
     *        css{whiteList, onAttr, onIgnoreAttr} `css=false` means don't use `cssfilter`
     */


    function FilterXSS(options) {
      options = shallowCopyObject(options || {});

      if (options.stripIgnoreTag) {
        if (options.onIgnoreTag) {
          console.error('Notes: cannot use these two options "stripIgnoreTag" and "onIgnoreTag" at the same time');
        }

        options.onIgnoreTag = DEFAULT.onIgnoreTagStripAll;
      }

      options.whiteList = options.whiteList || DEFAULT.whiteList;
      options.onTag = options.onTag || DEFAULT.onTag;
      options.onTagAttr = options.onTagAttr || DEFAULT.onTagAttr;
      options.onIgnoreTag = options.onIgnoreTag || DEFAULT.onIgnoreTag;
      options.onIgnoreTagAttr = options.onIgnoreTagAttr || DEFAULT.onIgnoreTagAttr;
      options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;
      options.escapeHtml = options.escapeHtml || DEFAULT.escapeHtml;
      this.options = options;

      if (options.css === false) {
        this.cssFilter = false;
      } else {
        options.css = options.css || {};
        this.cssFilter = new FilterCSS(options.css);
      }
    }
    /**
     * start process and returns result
     *
     * @param {String} html
     * @return {String}
     */


    FilterXSS.prototype.process = function (html) {
      // compatible with the input
      html = html || "";
      html = html.toString();
      if (!html) return "";
      var me = this;
      var options = me.options;
      var whiteList = options.whiteList;
      var onTag = options.onTag;
      var onIgnoreTag = options.onIgnoreTag;
      var onTagAttr = options.onTagAttr;
      var onIgnoreTagAttr = options.onIgnoreTagAttr;
      var safeAttrValue = options.safeAttrValue;
      var escapeHtml = options.escapeHtml;
      var cssFilter = me.cssFilter; // remove invisible characters

      if (options.stripBlankChar) {
        html = DEFAULT.stripBlankChar(html);
      } // remove html comments


      if (!options.allowCommentTag) {
        html = DEFAULT.stripCommentTag(html);
      } // if enable stripIgnoreTagBody


      var stripIgnoreTagBody = false;

      if (options.stripIgnoreTagBody) {
        var stripIgnoreTagBody = DEFAULT.StripTagBody(options.stripIgnoreTagBody, onIgnoreTag);
        onIgnoreTag = stripIgnoreTagBody.onIgnoreTag;
      }

      var retHtml = parseTag(html, function (sourcePosition, position, tag, html, isClosing) {
        var info = {
          sourcePosition: sourcePosition,
          position: position,
          isClosing: isClosing,
          isWhite: whiteList.hasOwnProperty(tag)
        }; // call `onTag()`

        var ret = onTag(tag, html, info);
        if (!isNull(ret)) return ret;

        if (info.isWhite) {
          if (info.isClosing) {
            return "</" + tag + ">";
          }

          var attrs = getAttrs(html);
          var whiteAttrList = whiteList[tag];
          var attrsHtml = parseAttr(attrs.html, function (name, value) {
            // call `onTagAttr()`
            var isWhiteAttr = _.indexOf(whiteAttrList, name) !== -1;
            var ret = onTagAttr(tag, name, value, isWhiteAttr);
            if (!isNull(ret)) return ret;

            if (isWhiteAttr) {
              // call `safeAttrValue()`
              value = safeAttrValue(tag, name, value, cssFilter);

              if (value) {
                return name + '="' + value + '"';
              } else {
                return name;
              }
            } else {
              // call `onIgnoreTagAttr()`
              var ret = onIgnoreTagAttr(tag, name, value, isWhiteAttr);
              if (!isNull(ret)) return ret;
              return;
            }
          }); // build new tag html

          var html = "<" + tag;
          if (attrsHtml) html += " " + attrsHtml;
          if (attrs.closing) html += " /";
          html += ">";
          return html;
        } else {
          // call `onIgnoreTag()`
          var ret = onIgnoreTag(tag, html, info);
          if (!isNull(ret)) return ret;
          return escapeHtml(html);
        }
      }, escapeHtml); // if enable stripIgnoreTagBody

      if (stripIgnoreTagBody) {
        retHtml = stripIgnoreTagBody.remove(retHtml);
      }

      return retHtml;
    };

    module.exports = FilterXSS;
  }, {
    "./default": 1,
    "./parser": 3,
    "./util": 4,
    "cssfilter": 8
  }],
  6: [function (require, module, exports) {
    /**
     * cssfilter
     *
     * @author 老雷<leizongmin@gmail.com>
     */
    var DEFAULT = require('./default');

    var parseStyle = require('./parser');

    var _ = require('./util');
    /**
     * 返回值是否为空
     *
     * @param {Object} obj
     * @return {Boolean}
     */


    function isNull(obj) {
      return obj === undefined || obj === null;
    }
    /**
     * 浅拷贝对象
     *
     * @param {Object} obj
     * @return {Object}
     */


    function shallowCopyObject(obj) {
      var ret = {};

      for (var i in obj) {
        ret[i] = obj[i];
      }

      return ret;
    }
    /**
     * 创建CSS过滤器
     *
     * @param {Object} options
     *   - {Object} whiteList
     *   - {Function} onAttr
     *   - {Function} onIgnoreAttr
     *   - {Function} safeAttrValue
     */


    function FilterCSS(options) {
      options = shallowCopyObject(options || {});
      options.whiteList = options.whiteList || DEFAULT.whiteList;
      options.onAttr = options.onAttr || DEFAULT.onAttr;
      options.onIgnoreAttr = options.onIgnoreAttr || DEFAULT.onIgnoreAttr;
      options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;
      this.options = options;
    }

    FilterCSS.prototype.process = function (css) {
      // 兼容各种奇葩输入
      css = css || '';
      css = css.toString();
      if (!css) return '';
      var me = this;
      var options = me.options;
      var whiteList = options.whiteList;
      var onAttr = options.onAttr;
      var onIgnoreAttr = options.onIgnoreAttr;
      var safeAttrValue = options.safeAttrValue;
      var retCSS = parseStyle(css, function (sourcePosition, position, name, value, source) {
        var check = whiteList[name];
        var isWhite = false;
        if (check === true) isWhite = check;else if (typeof check === 'function') isWhite = check(value);else if (check instanceof RegExp) isWhite = check.test(value);
        if (isWhite !== true) isWhite = false; // 如果过滤后 value 为空则直接忽略

        value = safeAttrValue(name, value);
        if (!value) return;
        var opts = {
          position: position,
          sourcePosition: sourcePosition,
          source: source,
          isWhite: isWhite
        };

        if (isWhite) {
          var ret = onAttr(name, value, opts);

          if (isNull(ret)) {
            return name + ':' + value;
          } else {
            return ret;
          }
        } else {
          var ret = onIgnoreAttr(name, value, opts);

          if (!isNull(ret)) {
            return ret;
          }
        }
      });
      return retCSS;
    };

    module.exports = FilterCSS;
  }, {
    "./default": 7,
    "./parser": 9,
    "./util": 10
  }],
  7: [function (require, module, exports) {
    /**
     * cssfilter
     *
     * @author 老雷<leizongmin@gmail.com>
     */
    function getDefaultWhiteList() {
      // 白名单值说明：
      // true: 允许该属性
      // Function: function (val) { } 返回true表示允许该属性，其他值均表示不允许
      // RegExp: regexp.test(val) 返回true表示允许该属性，其他值均表示不允许
      // 除上面列出的值外均表示不允许
      var whiteList = {};
      whiteList['align-content'] = false; // default: auto

      whiteList['align-items'] = false; // default: auto

      whiteList['align-self'] = false; // default: auto

      whiteList['alignment-adjust'] = false; // default: auto

      whiteList['alignment-baseline'] = false; // default: baseline

      whiteList['all'] = false; // default: depending on individual properties

      whiteList['anchor-point'] = false; // default: none

      whiteList['animation'] = false; // default: depending on individual properties

      whiteList['animation-delay'] = false; // default: 0

      whiteList['animation-direction'] = false; // default: normal

      whiteList['animation-duration'] = false; // default: 0

      whiteList['animation-fill-mode'] = false; // default: none

      whiteList['animation-iteration-count'] = false; // default: 1

      whiteList['animation-name'] = false; // default: none

      whiteList['animation-play-state'] = false; // default: running

      whiteList['animation-timing-function'] = false; // default: ease

      whiteList['azimuth'] = false; // default: center

      whiteList['backface-visibility'] = false; // default: visible

      whiteList['background'] = true; // default: depending on individual properties

      whiteList['background-attachment'] = true; // default: scroll

      whiteList['background-clip'] = true; // default: border-box

      whiteList['background-color'] = true; // default: transparent

      whiteList['background-image'] = true; // default: none

      whiteList['background-origin'] = true; // default: padding-box

      whiteList['background-position'] = true; // default: 0% 0%

      whiteList['background-repeat'] = true; // default: repeat

      whiteList['background-size'] = true; // default: auto

      whiteList['baseline-shift'] = false; // default: baseline

      whiteList['binding'] = false; // default: none

      whiteList['bleed'] = false; // default: 6pt

      whiteList['bookmark-label'] = false; // default: content()

      whiteList['bookmark-level'] = false; // default: none

      whiteList['bookmark-state'] = false; // default: open

      whiteList['border'] = true; // default: depending on individual properties

      whiteList['border-bottom'] = true; // default: depending on individual properties

      whiteList['border-bottom-color'] = true; // default: current color

      whiteList['border-bottom-left-radius'] = true; // default: 0

      whiteList['border-bottom-right-radius'] = true; // default: 0

      whiteList['border-bottom-style'] = true; // default: none

      whiteList['border-bottom-width'] = true; // default: medium

      whiteList['border-collapse'] = true; // default: separate

      whiteList['border-color'] = true; // default: depending on individual properties

      whiteList['border-image'] = true; // default: none

      whiteList['border-image-outset'] = true; // default: 0

      whiteList['border-image-repeat'] = true; // default: stretch

      whiteList['border-image-slice'] = true; // default: 100%

      whiteList['border-image-source'] = true; // default: none

      whiteList['border-image-width'] = true; // default: 1

      whiteList['border-left'] = true; // default: depending on individual properties

      whiteList['border-left-color'] = true; // default: current color

      whiteList['border-left-style'] = true; // default: none

      whiteList['border-left-width'] = true; // default: medium

      whiteList['border-radius'] = true; // default: 0

      whiteList['border-right'] = true; // default: depending on individual properties

      whiteList['border-right-color'] = true; // default: current color

      whiteList['border-right-style'] = true; // default: none

      whiteList['border-right-width'] = true; // default: medium

      whiteList['border-spacing'] = true; // default: 0

      whiteList['border-style'] = true; // default: depending on individual properties

      whiteList['border-top'] = true; // default: depending on individual properties

      whiteList['border-top-color'] = true; // default: current color

      whiteList['border-top-left-radius'] = true; // default: 0

      whiteList['border-top-right-radius'] = true; // default: 0

      whiteList['border-top-style'] = true; // default: none

      whiteList['border-top-width'] = true; // default: medium

      whiteList['border-width'] = true; // default: depending on individual properties

      whiteList['bottom'] = false; // default: auto

      whiteList['box-decoration-break'] = true; // default: slice

      whiteList['box-shadow'] = true; // default: none

      whiteList['box-sizing'] = true; // default: content-box

      whiteList['box-snap'] = true; // default: none

      whiteList['box-suppress'] = true; // default: show

      whiteList['break-after'] = true; // default: auto

      whiteList['break-before'] = true; // default: auto

      whiteList['break-inside'] = true; // default: auto

      whiteList['caption-side'] = false; // default: top

      whiteList['chains'] = false; // default: none

      whiteList['clear'] = true; // default: none

      whiteList['clip'] = false; // default: auto

      whiteList['clip-path'] = false; // default: none

      whiteList['clip-rule'] = false; // default: nonzero

      whiteList['color'] = true; // default: implementation dependent

      whiteList['color-interpolation-filters'] = true; // default: auto

      whiteList['column-count'] = false; // default: auto

      whiteList['column-fill'] = false; // default: balance

      whiteList['column-gap'] = false; // default: normal

      whiteList['column-rule'] = false; // default: depending on individual properties

      whiteList['column-rule-color'] = false; // default: current color

      whiteList['column-rule-style'] = false; // default: medium

      whiteList['column-rule-width'] = false; // default: medium

      whiteList['column-span'] = false; // default: none

      whiteList['column-width'] = false; // default: auto

      whiteList['columns'] = false; // default: depending on individual properties

      whiteList['contain'] = false; // default: none

      whiteList['content'] = false; // default: normal

      whiteList['counter-increment'] = false; // default: none

      whiteList['counter-reset'] = false; // default: none

      whiteList['counter-set'] = false; // default: none

      whiteList['crop'] = false; // default: auto

      whiteList['cue'] = false; // default: depending on individual properties

      whiteList['cue-after'] = false; // default: none

      whiteList['cue-before'] = false; // default: none

      whiteList['cursor'] = false; // default: auto

      whiteList['direction'] = false; // default: ltr

      whiteList['display'] = true; // default: depending on individual properties

      whiteList['display-inside'] = true; // default: auto

      whiteList['display-list'] = true; // default: none

      whiteList['display-outside'] = true; // default: inline-level

      whiteList['dominant-baseline'] = false; // default: auto

      whiteList['elevation'] = false; // default: level

      whiteList['empty-cells'] = false; // default: show

      whiteList['filter'] = false; // default: none

      whiteList['flex'] = false; // default: depending on individual properties

      whiteList['flex-basis'] = false; // default: auto

      whiteList['flex-direction'] = false; // default: row

      whiteList['flex-flow'] = false; // default: depending on individual properties

      whiteList['flex-grow'] = false; // default: 0

      whiteList['flex-shrink'] = false; // default: 1

      whiteList['flex-wrap'] = false; // default: nowrap

      whiteList['float'] = false; // default: none

      whiteList['float-offset'] = false; // default: 0 0

      whiteList['flood-color'] = false; // default: black

      whiteList['flood-opacity'] = false; // default: 1

      whiteList['flow-from'] = false; // default: none

      whiteList['flow-into'] = false; // default: none

      whiteList['font'] = true; // default: depending on individual properties

      whiteList['font-family'] = true; // default: implementation dependent

      whiteList['font-feature-settings'] = true; // default: normal

      whiteList['font-kerning'] = true; // default: auto

      whiteList['font-language-override'] = true; // default: normal

      whiteList['font-size'] = true; // default: medium

      whiteList['font-size-adjust'] = true; // default: none

      whiteList['font-stretch'] = true; // default: normal

      whiteList['font-style'] = true; // default: normal

      whiteList['font-synthesis'] = true; // default: weight style

      whiteList['font-variant'] = true; // default: normal

      whiteList['font-variant-alternates'] = true; // default: normal

      whiteList['font-variant-caps'] = true; // default: normal

      whiteList['font-variant-east-asian'] = true; // default: normal

      whiteList['font-variant-ligatures'] = true; // default: normal

      whiteList['font-variant-numeric'] = true; // default: normal

      whiteList['font-variant-position'] = true; // default: normal

      whiteList['font-weight'] = true; // default: normal

      whiteList['grid'] = false; // default: depending on individual properties

      whiteList['grid-area'] = false; // default: depending on individual properties

      whiteList['grid-auto-columns'] = false; // default: auto

      whiteList['grid-auto-flow'] = false; // default: none

      whiteList['grid-auto-rows'] = false; // default: auto

      whiteList['grid-column'] = false; // default: depending on individual properties

      whiteList['grid-column-end'] = false; // default: auto

      whiteList['grid-column-start'] = false; // default: auto

      whiteList['grid-row'] = false; // default: depending on individual properties

      whiteList['grid-row-end'] = false; // default: auto

      whiteList['grid-row-start'] = false; // default: auto

      whiteList['grid-template'] = false; // default: depending on individual properties

      whiteList['grid-template-areas'] = false; // default: none

      whiteList['grid-template-columns'] = false; // default: none

      whiteList['grid-template-rows'] = false; // default: none

      whiteList['hanging-punctuation'] = false; // default: none

      whiteList['height'] = true; // default: auto

      whiteList['hyphens'] = false; // default: manual

      whiteList['icon'] = false; // default: auto

      whiteList['image-orientation'] = false; // default: auto

      whiteList['image-resolution'] = false; // default: normal

      whiteList['ime-mode'] = false; // default: auto

      whiteList['initial-letters'] = false; // default: normal

      whiteList['inline-box-align'] = false; // default: last

      whiteList['justify-content'] = false; // default: auto

      whiteList['justify-items'] = false; // default: auto

      whiteList['justify-self'] = false; // default: auto

      whiteList['left'] = false; // default: auto

      whiteList['letter-spacing'] = true; // default: normal

      whiteList['lighting-color'] = true; // default: white

      whiteList['line-box-contain'] = false; // default: block inline replaced

      whiteList['line-break'] = false; // default: auto

      whiteList['line-grid'] = false; // default: match-parent

      whiteList['line-height'] = false; // default: normal

      whiteList['line-snap'] = false; // default: none

      whiteList['line-stacking'] = false; // default: depending on individual properties

      whiteList['line-stacking-ruby'] = false; // default: exclude-ruby

      whiteList['line-stacking-shift'] = false; // default: consider-shifts

      whiteList['line-stacking-strategy'] = false; // default: inline-line-height

      whiteList['list-style'] = true; // default: depending on individual properties

      whiteList['list-style-image'] = true; // default: none

      whiteList['list-style-position'] = true; // default: outside

      whiteList['list-style-type'] = true; // default: disc

      whiteList['margin'] = true; // default: depending on individual properties

      whiteList['margin-bottom'] = true; // default: 0

      whiteList['margin-left'] = true; // default: 0

      whiteList['margin-right'] = true; // default: 0

      whiteList['margin-top'] = true; // default: 0

      whiteList['marker-offset'] = false; // default: auto

      whiteList['marker-side'] = false; // default: list-item

      whiteList['marks'] = false; // default: none

      whiteList['mask'] = false; // default: border-box

      whiteList['mask-box'] = false; // default: see individual properties

      whiteList['mask-box-outset'] = false; // default: 0

      whiteList['mask-box-repeat'] = false; // default: stretch

      whiteList['mask-box-slice'] = false; // default: 0 fill

      whiteList['mask-box-source'] = false; // default: none

      whiteList['mask-box-width'] = false; // default: auto

      whiteList['mask-clip'] = false; // default: border-box

      whiteList['mask-image'] = false; // default: none

      whiteList['mask-origin'] = false; // default: border-box

      whiteList['mask-position'] = false; // default: center

      whiteList['mask-repeat'] = false; // default: no-repeat

      whiteList['mask-size'] = false; // default: border-box

      whiteList['mask-source-type'] = false; // default: auto

      whiteList['mask-type'] = false; // default: luminance

      whiteList['max-height'] = true; // default: none

      whiteList['max-lines'] = false; // default: none

      whiteList['max-width'] = true; // default: none

      whiteList['min-height'] = true; // default: 0

      whiteList['min-width'] = true; // default: 0

      whiteList['move-to'] = false; // default: normal

      whiteList['nav-down'] = false; // default: auto

      whiteList['nav-index'] = false; // default: auto

      whiteList['nav-left'] = false; // default: auto

      whiteList['nav-right'] = false; // default: auto

      whiteList['nav-up'] = false; // default: auto

      whiteList['object-fit'] = false; // default: fill

      whiteList['object-position'] = false; // default: 50% 50%

      whiteList['opacity'] = false; // default: 1

      whiteList['order'] = false; // default: 0

      whiteList['orphans'] = false; // default: 2

      whiteList['outline'] = false; // default: depending on individual properties

      whiteList['outline-color'] = false; // default: invert

      whiteList['outline-offset'] = false; // default: 0

      whiteList['outline-style'] = false; // default: none

      whiteList['outline-width'] = false; // default: medium

      whiteList['overflow'] = false; // default: depending on individual properties

      whiteList['overflow-wrap'] = false; // default: normal

      whiteList['overflow-x'] = false; // default: visible

      whiteList['overflow-y'] = false; // default: visible

      whiteList['padding'] = true; // default: depending on individual properties

      whiteList['padding-bottom'] = true; // default: 0

      whiteList['padding-left'] = true; // default: 0

      whiteList['padding-right'] = true; // default: 0

      whiteList['padding-top'] = true; // default: 0

      whiteList['page'] = false; // default: auto

      whiteList['page-break-after'] = false; // default: auto

      whiteList['page-break-before'] = false; // default: auto

      whiteList['page-break-inside'] = false; // default: auto

      whiteList['page-policy'] = false; // default: start

      whiteList['pause'] = false; // default: implementation dependent

      whiteList['pause-after'] = false; // default: implementation dependent

      whiteList['pause-before'] = false; // default: implementation dependent

      whiteList['perspective'] = false; // default: none

      whiteList['perspective-origin'] = false; // default: 50% 50%

      whiteList['pitch'] = false; // default: medium

      whiteList['pitch-range'] = false; // default: 50

      whiteList['play-during'] = false; // default: auto

      whiteList['position'] = false; // default: static

      whiteList['presentation-level'] = false; // default: 0

      whiteList['quotes'] = false; // default: text

      whiteList['region-fragment'] = false; // default: auto

      whiteList['resize'] = false; // default: none

      whiteList['rest'] = false; // default: depending on individual properties

      whiteList['rest-after'] = false; // default: none

      whiteList['rest-before'] = false; // default: none

      whiteList['richness'] = false; // default: 50

      whiteList['right'] = false; // default: auto

      whiteList['rotation'] = false; // default: 0

      whiteList['rotation-point'] = false; // default: 50% 50%

      whiteList['ruby-align'] = false; // default: auto

      whiteList['ruby-merge'] = false; // default: separate

      whiteList['ruby-position'] = false; // default: before

      whiteList['shape-image-threshold'] = false; // default: 0.0

      whiteList['shape-outside'] = false; // default: none

      whiteList['shape-margin'] = false; // default: 0

      whiteList['size'] = false; // default: auto

      whiteList['speak'] = false; // default: auto

      whiteList['speak-as'] = false; // default: normal

      whiteList['speak-header'] = false; // default: once

      whiteList['speak-numeral'] = false; // default: continuous

      whiteList['speak-punctuation'] = false; // default: none

      whiteList['speech-rate'] = false; // default: medium

      whiteList['stress'] = false; // default: 50

      whiteList['string-set'] = false; // default: none

      whiteList['tab-size'] = false; // default: 8

      whiteList['table-layout'] = false; // default: auto

      whiteList['text-align'] = true; // default: start

      whiteList['text-align-last'] = true; // default: auto

      whiteList['text-combine-upright'] = true; // default: none

      whiteList['text-decoration'] = true; // default: none

      whiteList['text-decoration-color'] = true; // default: currentColor

      whiteList['text-decoration-line'] = true; // default: none

      whiteList['text-decoration-skip'] = true; // default: objects

      whiteList['text-decoration-style'] = true; // default: solid

      whiteList['text-emphasis'] = true; // default: depending on individual properties

      whiteList['text-emphasis-color'] = true; // default: currentColor

      whiteList['text-emphasis-position'] = true; // default: over right

      whiteList['text-emphasis-style'] = true; // default: none

      whiteList['text-height'] = true; // default: auto

      whiteList['text-indent'] = true; // default: 0

      whiteList['text-justify'] = true; // default: auto

      whiteList['text-orientation'] = true; // default: mixed

      whiteList['text-overflow'] = true; // default: clip

      whiteList['text-shadow'] = true; // default: none

      whiteList['text-space-collapse'] = true; // default: collapse

      whiteList['text-transform'] = true; // default: none

      whiteList['text-underline-position'] = true; // default: auto

      whiteList['text-wrap'] = true; // default: normal

      whiteList['top'] = false; // default: auto

      whiteList['transform'] = false; // default: none

      whiteList['transform-origin'] = false; // default: 50% 50% 0

      whiteList['transform-style'] = false; // default: flat

      whiteList['transition'] = false; // default: depending on individual properties

      whiteList['transition-delay'] = false; // default: 0s

      whiteList['transition-duration'] = false; // default: 0s

      whiteList['transition-property'] = false; // default: all

      whiteList['transition-timing-function'] = false; // default: ease

      whiteList['unicode-bidi'] = false; // default: normal

      whiteList['vertical-align'] = false; // default: baseline

      whiteList['visibility'] = false; // default: visible

      whiteList['voice-balance'] = false; // default: center

      whiteList['voice-duration'] = false; // default: auto

      whiteList['voice-family'] = false; // default: implementation dependent

      whiteList['voice-pitch'] = false; // default: medium

      whiteList['voice-range'] = false; // default: medium

      whiteList['voice-rate'] = false; // default: normal

      whiteList['voice-stress'] = false; // default: normal

      whiteList['voice-volume'] = false; // default: medium

      whiteList['volume'] = false; // default: medium

      whiteList['white-space'] = false; // default: normal

      whiteList['widows'] = false; // default: 2

      whiteList['width'] = true; // default: auto

      whiteList['will-change'] = false; // default: auto

      whiteList['word-break'] = true; // default: normal

      whiteList['word-spacing'] = true; // default: normal

      whiteList['word-wrap'] = true; // default: normal

      whiteList['wrap-flow'] = false; // default: auto

      whiteList['wrap-through'] = false; // default: wrap

      whiteList['writing-mode'] = false; // default: horizontal-tb

      whiteList['z-index'] = false; // default: auto

      return whiteList;
    }
    /**
     * 匹配到白名单上的一个属性时
     *
     * @param {String} name
     * @param {String} value
     * @param {Object} options
     * @return {String}
     */


    function onAttr(name, value, options) {} // do nothing

    /**
     * 匹配到不在白名单上的一个属性时
     *
     * @param {String} name
     * @param {String} value
     * @param {Object} options
     * @return {String}
     */


    function onIgnoreAttr(name, value, options) {// do nothing
    }

    var REGEXP_URL_JAVASCRIPT = /javascript\s*\:/img;
    /**
     * 过滤属性值
     *
     * @param {String} name
     * @param {String} value
     * @return {String}
     */

    function safeAttrValue(name, value) {
      if (REGEXP_URL_JAVASCRIPT.test(value)) return '';
      return value;
    }

    exports.whiteList = getDefaultWhiteList();
    exports.getDefaultWhiteList = getDefaultWhiteList;
    exports.onAttr = onAttr;
    exports.onIgnoreAttr = onIgnoreAttr;
    exports.safeAttrValue = safeAttrValue;
  }, {}],
  8: [function (require, module, exports) {
    /**
     * cssfilter
     *
     * @author 老雷<leizongmin@gmail.com>
     */
    var DEFAULT = require('./default');

    var FilterCSS = require('./css');
    /**
     * XSS过滤
     *
     * @param {String} css 要过滤的CSS代码
     * @param {Object} options 选项：whiteList, onAttr, onIgnoreAttr
     * @return {String}
     */


    function filterCSS(html, options) {
      var xss = new FilterCSS(options);
      return xss.process(html);
    } // 输出


    exports = module.exports = filterCSS;
    exports.FilterCSS = FilterCSS;

    for (var i in DEFAULT) {
      exports[i] = DEFAULT[i];
    } // 在浏览器端使用


    if (typeof window !== 'undefined') {
      window.filterCSS = module.exports;
    }
  }, {
    "./css": 6,
    "./default": 7
  }],
  9: [function (require, module, exports) {
    /**
     * cssfilter
     *
     * @author 老雷<leizongmin@gmail.com>
     */
    var _ = require('./util');
    /**
     * 解析style
     *
     * @param {String} css
     * @param {Function} onAttr 处理属性的函数
     *   参数格式： function (sourcePosition, position, name, value, source)
     * @return {String}
     */


    function parseStyle(css, onAttr) {
      css = _.trimRight(css);
      if (css[css.length - 1] !== ';') css += ';';
      var cssLength = css.length;
      var isParenthesisOpen = false;
      var lastPos = 0;
      var i = 0;
      var retCSS = '';

      function addNewAttr() {
        // 如果没有正常的闭合圆括号，则直接忽略当前属性
        if (!isParenthesisOpen) {
          var source = _.trim(css.slice(lastPos, i));

          var j = source.indexOf(':');

          if (j !== -1) {
            var name = _.trim(source.slice(0, j));

            var value = _.trim(source.slice(j + 1)); // 必须有属性名称


            if (name) {
              var ret = onAttr(lastPos, retCSS.length, name, value, source);
              if (ret) retCSS += ret + '; ';
            }
          }
        }

        lastPos = i + 1;
      }

      for (; i < cssLength; i++) {
        var c = css[i];

        if (c === '/' && css[i + 1] === '*') {
          // 备注开始
          var j = css.indexOf('*/', i + 2); // 如果没有正常的备注结束，则后面的部分全部跳过

          if (j === -1) break; // 直接将当前位置调到备注结尾，并且初始化状态

          i = j + 1;
          lastPos = i + 1;
          isParenthesisOpen = false;
        } else if (c === '(') {
          isParenthesisOpen = true;
        } else if (c === ')') {
          isParenthesisOpen = false;
        } else if (c === ';') {
          if (isParenthesisOpen) {// 在圆括号里面，忽略
          } else {
            addNewAttr();
          }
        } else if (c === '\n') {
          addNewAttr();
        }
      }

      return _.trim(retCSS);
    }

    module.exports = parseStyle;
  }, {
    "./util": 10
  }],
  10: [function (require, module, exports) {
    module.exports = {
      indexOf: function indexOf(arr, item) {
        var i, j;

        if (Array.prototype.indexOf) {
          return arr.indexOf(item);
        }

        for (i = 0, j = arr.length; i < j; i++) {
          if (arr[i] === item) {
            return i;
          }
        }

        return -1;
      },
      forEach: function forEach(arr, fn, scope) {
        var i, j;

        if (Array.prototype.forEach) {
          return arr.forEach(fn, scope);
        }

        for (i = 0, j = arr.length; i < j; i++) {
          fn.call(scope, arr[i], i, arr);
        }
      },
      trim: function trim(str) {
        if (String.prototype.trim) {
          return str.trim();
        }

        return str.replace(/(^\s*)|(\s*$)/g, '');
      },
      trimRight: function trimRight(str) {
        if (String.prototype.trimRight) {
          return str.trimRight();
        }

        return str.replace(/(\s*$)/g, '');
      }
    };
  }, {}]
}, {}, [2]);

/***/ }),
/* 3 */
/***/ (function(module, exports) {

/**
 * Helper functions used in other JS files in the ../custom folder
 */
var recaptchaKey;

window.helper = function () {
  // Find a parent of the "el" element specified by the "parentSelector" param
  var getParents = function getParents(el, parentSelector) {
    if (parentSelector === undefined) {
      parentSelector = document;
    }

    var parents = [];
    var p = el.parentNode;

    while (p !== parentSelector) {
      var o = p;
      parents.push(o);
      p = o.parentNode;
    }

    parents.push(parentSelector);
    return parents;
  };

  var findAncestor = function findAncestor(el, sel) {
    while ((el = el.parentElement) && !(el.matches || el.matchesSelector).call(el, sel)) {
      ;
    }

    return el;
  };

  var htmlDecode = function htmlDecode(input) {
    var e = document.createElement('textarea');
    e.innerHTML = input; // handle case of empty input

    return e.childNodes.length === 0 ? '' : e.childNodes[0].nodeValue;
  }; // Get full height of an element


  var outerHeight = function outerHeight(el) {
    var height = el.offsetHeight;
    var style = getComputedStyle(el);
    height += parseInt(style.marginBottom) + parseInt(style.marginTop);
    return height;
  }; // Helper function for event listeners bind to scroll events that makes them fire on setTimeout


  var debounce = function debounce(func, wait, immediate) {
    var timeout;
    return function () {
      var context = this;
      var args = arguments;

      var later = function later() {
        timeout = null;
        if (!immediate) func.apply(context, args);
      };

      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) func.apply(context, args);
    };
  }; // Converts string to node


  var createElementFromHTML = function createElementFromHTML(htmlString) {
    var div = document.createElement('div');
    div.innerHTML = htmlString.trim(); // Change this to div.childNodes to support multiple top-level nodes

    return div.firstChild;
  }; // Stores text in a clipboard


  var copyToClipboard = function copyToClipboard(text) {
    var textArea = document.createElement('textarea'); //
    // *** This styling is an extra step which is likely not required. ***
    //
    // Why is it here? To ensure:
    // 1. the element is able to have focus and selection.
    // 2. if element was to flash render it has minimal visual impact.
    // 3. less flakyness with selection and copying which **might** occur if
    //    the textarea element is not visible.
    //
    // The likelihood is the element won't even render, not even a flash,
    // so some of these are just precautions. However in IE the element
    // is visible whilst the popup box asking the user for permission for
    // the web page to copy to the clipboard.
    //
    // Place in top-left corner of screen regardless of scroll position.

    textArea.style.position = 'fixed';
    textArea.style.top = 0;
    textArea.style.left = 0; // Ensure it has a small width and height. Setting to 1px / 1em
    // doesn't work as this gives a negative w/h on some browsers.

    textArea.style.width = '2em';
    textArea.style.height = '2em'; // We don't need padding, reducing the size if it does flash render.

    textArea.style.padding = 0; // Clean up any borders.

    textArea.style.border = 'none';
    textArea.style.outline = 'none';
    textArea.style.boxShadow = 'none'; // Avoid flash of white box if rendered for any reason.

    textArea.style.background = 'transparent';
    textArea.value = text;
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();

    try {
      document.execCommand('copy');
    } catch (err) {
      throw new Error('Oops, unable to copy');
    }

    document.body.removeChild(textArea);
  };

  var evaluateAjaxResponse = function evaluateAjaxResponse(xmlhttp, callback, type) {
    if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {
      try {
        var data;

        if (type === 'json') {
          // Parse JSON if specified in the "type" param
          data = JSON.parse(xmlhttp.responseText);
        } else {
          data = xmlhttp.responseText;
        }

        return callback(data);
      } catch (err) {
        throw new Error(err);
      }
    }
  }; // Ajax GET call


  var ajaxGet = function ajaxGet(url, callback, type) {
    var xmlhttp = new XMLHttpRequest();
    xmlhttp.open('GET', url, true);

    xmlhttp.onreadystatechange = function () {
      return evaluateAjaxResponse(xmlhttp, callback, type);
    };

    return xmlhttp.send();
  }; // Ajax POST call


  var ajaxPost = function ajaxPost(url, requestData, callback, type) {
    var xmlhttp = new XMLHttpRequest();
    xmlhttp.open('POST', url, true);
    xmlhttp.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');

    xmlhttp.onload = function () {
      return evaluateAjaxResponse(xmlhttp, callback, type);
    };

    return xmlhttp.send(JSON.stringify(requestData));
  }; // Get url parameter by its name


  var getParameterByName = function getParameterByName(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[[\]]/g, '\\$&');
    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)');
    var results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
  }; // Get page url and remove query string parameters specified in the params array


  var removeParametersByNames = function removeParametersByNames(params) {
    var url = window.location.href.split('#');
    var hash = url[1] || '';
    var path = url[0].split('?');
    var qString = path.length > 1 ? path[1].split('&') : [];

    for (var i = 0; i < qString.length; i++) {
      var name = qString[i].split('=')[0];

      for (var j = 0; j < params.length; j++) {
        if (name === params[j]) {
          qString.splice(i, 1);
          i--;
        }
      }
    }

    qString = qString.join('&');
    return path[0] + (qString ? '?' + qString : '') + (hash ? '#' + hash : '');
  };

  var replaceUrlParam = function replaceUrlParam(url, paramName, paramValue) {
    if (paramValue == null) {
      paramValue = '';
    }

    var pattern = new RegExp('\\b(' + paramName + '=).*?(&|#|$)');

    if (url.search(pattern) >= 0) {
      return url.replace(pattern, '$1' + paramValue + '$2');
    }

    url = url.replace(/[?#]$/, '');
    return url + (url.indexOf('?') > 0 ? '&' : '?') + paramName + '=' + paramValue;
  }; // Add link tag to page head and make it load and behave as stylesheet


  var addStylesheet = function addStylesheet(url) {
    var link = document.createElement('link');
    link.rel = 'stylesheet';
    link.href = url;
    return document.head.appendChild(link);
  }; // Request stylesheet, append additional font-display property and in-line it in page head


  var loadStylesheet = function loadStylesheet(url) {
    return ajaxGet(url, function (css) {
      css = css.replace(/}/g, 'font-display: swap; }');
      var head = document.getElementsByTagName('head')[0];
      var style = document.createElement('style');
      style.appendChild(document.createTextNode(css));
      head.appendChild(style);
    });
  };

  var decodeHTMLEntities = function decodeHTMLEntities(text, encode) {
    var entities = [['amp', '&'], ['apos', '\''], ['#x27', '\''], ['#x2F', '/'], ['#39', '\''], ['#47', '/'], ['lt', '<'], ['gt', '>'], ['nbsp', ' '], ['quot', '"']];

    for (var i = 0, max = entities.length; i < max; ++i) {
      if (!encode) {
        text = text.replace(new RegExp('&' + entities[i][0] + ';', 'g'), entities[i][1]);
      } else {
        if (entities[i][1] !== ' ') {
          text = text.replace(new RegExp(entities[i][1], 'g'), '&' + entities[i][0] + ';');
        }
      }
    }

    return text;
  };

  var encodeHTMLEntities = function encodeHTMLEntities(text) {
    return decodeHTMLEntities(text, true);
  };

  var setCookie = function setCookie(name, value, days) {
    var expires = '';

    if (days) {
      var date = new Date();
      date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
      expires = '; expires=' + date.toUTCString();
    }

    document.cookie = name + '=' + (value || '') + expires + '; path=/';
    return document.cookie;
  };

  var getCookie = function getCookie(name) {
    var nameEQ = name + '=';
    var ca = document.cookie.split(';');

    for (var i = 0; i < ca.length; i++) {
      var c = ca[i];

      while (c.charAt(0) === ' ') {
        c = c.substring(1, c.length);
      }

      if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
    }

    return null;
  };

  var eraseCookie = function eraseCookie(name) {
    document.cookie = name + '=; Max-Age=-99999999;';
    return document.cookie;
  };

  var loadRecaptcha = function loadRecaptcha() {
    var recaptchaElem = document.querySelector('#recaptcha-script');
    recaptchaKey = recaptchaElem.getAttribute('data-site');

    if (recaptchaElem && recaptchaKey) {
      var script = document.createElement('script');
      script.src = 'https://www.google.com/recaptcha/api.js?onload=renderReCaptcha';
      script.setAttribute('data-size', 'compact');
      recaptchaElem.appendChild(script);
    }

    return recaptchaKey;
  };

  var nextUntil = function nextUntil(elem, selector, filter, skip) {
    // matches() polyfill
    if (!Element.prototype.matches) {
      Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
    } // Setup siblings array


    var siblings = []; // Get the next sibling element

    elem = elem.nextElementSibling; // As long as a sibling exists

    while (elem) {
      // If we've reached our match, bail
      if (elem.matches(selector)) break; // If filtering by a selector, check if the sibling matches

      if (filter && !elem.matches(filter)) {
        elem = elem.nextElementSibling;
        continue;
      } // If filtering by a selector, check if the sibling matches


      if (skip && elem.matches(skip)) {
        elem = elem.nextElementSibling;
        continue;
      } // Otherwise, push it to the siblings array


      siblings.push(elem); // Get the next sibling element

      elem = elem.nextElementSibling;
    }

    return siblings;
  };

  var fixElem = function fixElem(selector, className) {
    var elem = document.querySelector(selector);
    var footer = document.querySelector('.footer');
    var viewportWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    var viewportHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);

    if (viewportWidth >= 768 && elem) {
      var topOffset = (window.pageYOffset || document.scrollTop) - (document.clientTop || 0) || 0;
      var isTop = topOffset <= document.querySelector('.navigation').offsetHeight;
      var bottom = window.innerHeight + window.pageYOffset + window.helper.outerHeight(footer);
      var isBottom = bottom >= document.body.offsetHeight;

      if (isTop) {
        elem.classList.add(className + '--top');
      } else {
        elem.classList.remove(className + '--top');
      }

      if (isBottom) {
        var bottomPosition = viewportHeight - footer.getBoundingClientRect().top;
        elem.style.bottom = "".concat(bottomPosition < 0 ? 0 : bottomPosition, "px");
        elem.classList.add(className + '--bottom');
      } else {
        elem.classList.remove(className + '--bottom');
      }
    }
  };

  return {
    getParents: getParents,
    findAncestor: findAncestor,
    htmlDecode: htmlDecode,
    outerHeight: outerHeight,
    debounce: debounce,
    createElementFromHTML: createElementFromHTML,
    copyToClipboard: copyToClipboard,
    ajaxGet: ajaxGet,
    ajaxPost: ajaxPost,
    getParameterByName: getParameterByName,
    removeParametersByNames: removeParametersByNames,
    replaceUrlParam: replaceUrlParam,
    loadStylesheet: loadStylesheet,
    addStylesheet: addStylesheet,
    decodeHTMLEntities: decodeHTMLEntities,
    encodeHTMLEntities: encodeHTMLEntities,
    setCookie: setCookie,
    getCookie: getCookie,
    eraseCookie: eraseCookie,
    loadRecaptcha: loadRecaptcha,
    nextUntil: nextUntil,
    fixElem: fixElem
  };
}();

window.renderReCaptcha = function () {
  // eslint-disable-line no-unused-vars
  window.grecaptcha.render('g-recaptcha-placeholder', {
    sitekey: recaptchaKey,
    theme: 'light'
  });
};

/***/ }),
/* 4 */
/***/ (function(module, exports) {

/**
 * Shows/hides element with animation when a trigger element is clicked
 * */
(function () {
  // Bind click event to all triggers
  document.querySelectorAll('[data-toggle-trigger]').forEach(function (item) {
    item.addEventListener('click', function (event) {
      event.preventDefault(); // Find target element according to the trigger name

      var toToggle = item.getAttribute('data-toggle-trigger');
      var elemToToggle = document.querySelector("[data-toggle-target=\"".concat(toToggle, "\"]")); // Add/remove class names that show/hide target elements

      if (elemToToggle.classList.contains('toggle-active')) {
        item.classList.remove('trigger-active');
        elemToToggle.classList.remove('toggle-active');
      } else {
        item.classList.add('trigger-active');
        elemToToggle.classList.add('toggle-active'); // In case target contains input, set focus on it

        var input = elemToToggle.querySelector('#nav-search');

        if (input) {
          setTimeout(function () {
            input.focus();
          }, 50);
        }
      }
    });
  });
})();

/***/ }),
/* 5 */
/***/ (function(module, exports) {

/**
 * Initializes Algolia search with use of autocomplete.js
 */
(function () {
  // Get Algolia API details from object in the global scope (should be present in the page head)
  // Or use API detail injected with url parameters
  window.searchAPI.appid = window.helper.getParameterByName('searchappid') || window.searchAPI.appid;
  window.searchAPI.apikey = window.helper.getParameterByName('window.searchAPIkey') || window.searchAPI.apikey;
  window.searchAPI.indexname = window.helper.getParameterByName('searchindexname') || window.searchAPI.indexname;
  var client = window.algoliasearch(window.searchAPI.appid, window.searchAPI.apikey);
  var tutorials = client.initIndex(window.searchAPI.indexname);
  var url = window.location;
  var searchWrapper = document.querySelector('.navigation__search-wrapper');
  var searchOverlay = document.querySelector('.search-overlay');
  var searchTrigger = document.querySelector('[data-search-trigger]');
  var searchTarget = document.querySelector('[data-search-target]');
  var navigation = document.querySelector('.navigation');
  var searchTerm = '';
  var searchResultSelected = false;
  var searchResultsNumber = 0;
  var searchInput = document.querySelector('#nav-search'); // Get injected KC API details

  var projectIdUrl = window.helper.getParameterByName('projectid');
  var previewApiKeyUrl = window.helper.getParameterByName('previewapikey'); // Build query string with injected KC API details for the urlMap

  var queryString = function () {
    var qString = '';
    qString += typeof projectIdUrl !== 'undefined' && projectIdUrl !== null ? "projectid=".concat(projectIdUrl, "&") : '';
    qString += typeof previewApiKeyUrl !== 'undefined' && previewApiKeyUrl !== null ? "previewapikey=".concat(previewApiKeyUrl, "&") : '';
    qString = qString.slice(0, -1);
    qString = qString ? "?".concat(qString) : '';
    return qString;
  }();

  var arrowPress = function arrowPress(e) {
    e = e || window.event;

    if (e.keyCode === 38 || e.keyCode === 40 || e.keyCode === 37 || e.keyCode === 39) {
      searchInput.value = window.filterXSS(decodeURIComponent(searchTerm));
    }
  };

  var removeInlineElements = function removeInlineElements(content) {
    if (content) {
      content = content.replace(/{@[a-z,0-9,-</>]+@}/g, '');
      content = content.replace(/{~[^~]+~}/g, '');
      content = content.replace(/\r?\n|\r/g, ' ');
    }

    return content;
  };

  var formatSuggestionContent = function formatSuggestionContent(suggestion) {
    var ellipsisText = '&hellip;';
    suggestion._snippetResult.content.value = "".concat(ellipsisText).concat(suggestion._snippetResult.content.value).concat(ellipsisText);
    return suggestion;
  };

  var getTech = function getTech(platform) {
    var tech = platform;

    if (window.platformsConfig && window.platformsConfig.length) {
      for (var i = 0; i < window.platformsConfig.length; i++) {
        if (window.platformsConfig[i].platform === platform) {
          tech = window.platformsConfig[i].url;
        }
      }
    }

    return tech;
  };

  var formatSuggestion = function formatSuggestion(suggestion, urlMap) {
    // Store current search input value for use of querystring that is used in Google Analytics search terms
    searchTerm = encodeURIComponent(searchInput.value); // Get url from the urlMap

    var suggestionUrl = urlMap.filter(function (item) {
      return item.codename === suggestion.codename;
    }); // Add an anchor to the url if available

    var anchor = suggestion._highlightResult.heading.value ? "#a-".concat(suggestion._highlightResult.heading.value.replace(/<\/?[^>]+(>|$)/g, '').toLowerCase().replace(/\W/g, '-').replace(/[-]+/g, '-')) : '';
    var tech = suggestion.platforms && suggestion.platforms.length === 1 ? "?tech=".concat(getTech(suggestion.platforms[0])) : '';
    suggestion.resolvedUrl = suggestionUrl.length ? "".concat(suggestionUrl[0].url).concat(suggestionUrl[0].url.indexOf('?tech') === -1 ? tech : '').concat(suggestion.section !== 'API' ? anchor : '') : '';
    var section = suggestion.section === 'tutorials' && suggestion.resolvedUrl.includes('/reference/') ? 'reference' : suggestion.section;

    if (section.toLowerCase() === 'api') {
      section = 'reference';
    } // Template for a single search result suggestion


    return "<a href=\"".concat(suggestion.resolvedUrl, "\" class=\"suggestion\">\n                    <div class=\"suggestion__left\">\n                        <span class=\"suggestion__heading\">").concat(removeInlineElements(suggestion._highlightResult.title.value), "</span>\n                        ").concat(suggestion._highlightResult.heading.value ? '<span class="suggestion__sub-heading">' + removeInlineElements(suggestion._highlightResult.heading.value) + '</span>' : '', "\n                        <p class=\"suggestion__text\">").concat(removeInlineElements(suggestion._snippetResult.content.value), "</p>\n                    </div>\n                    <div class=\"suggestion__right\">\n                        <span class=\"suggestion__category suggestion__category--").concat(section.toLowerCase(), "\">").concat(section.toUpperCase(), "</span>\n                    </div>\n                </a>");
  };

  var formatEmptySuggestion = function formatEmptySuggestion() {
    searchTerm = encodeURIComponent(searchInput.value); // Template for a empty result

    return "<div class=\"suggestion suggestion--empty\">\n                    <span class=\"suggestion__heading\">".concat(window.UIMessages ? window.UIMessages.searchNoResults : '', "</span>\n                </div>");
  };

  var logSearchTermNumber = function logSearchTermNumber(term) {
    window.dataLayer.push({
      event: 'event',
      eventCategory: 'search--searched-result',
      eventAction: window.filterXSS(decodeURIComponent(term)),
      eventLabel: searchResultsNumber
    });
  };

  var logSearchTermErased = function logSearchTermErased() {
    window.dataLayer.push({
      event: 'event',
      eventCategory: 'search--used',
      eventAction: window.filterXSS(decodeURIComponent(searchTerm)),
      eventLabel: 'Not clicked'
    });
  };

  var logSearchTermSelected = function logSearchTermSelected(term, url) {
    window.dataLayer.push({
      event: 'event',
      eventCategory: 'search--used',
      eventAction: decodeURIComponent(term),
      eventLabel: url
    });
  };

  var onAutocompleteSelected = function onAutocompleteSelected(suggestion, context) {
    searchResultSelected = true;
    searchInput.value = window.filterXSS(decodeURIComponent(searchTerm));
    logSearchTermSelected(searchTerm, suggestion.resolvedUrl);
    logSearchTermNumber(searchTerm); // Do nothing on click, as the browser will handle <a> tag by default

    if (context.selectionMethod === 'click') {
      return;
    } // Change the page (for example, when enter key gets hit)


    window.location.assign("".concat(suggestion.resolvedUrl));
  };

  var onAutocompleteUpdated = function onAutocompleteUpdated() {
    setTimeout(function () {
      document.querySelector('.aa-dropdown-menu').scrollTop = 0; // Set scroll position to top
    }, 0);
  };

  var triggerSearchPanel = function triggerSearchPanel() {
    if (searchTrigger) {
      searchTrigger.addEventListener('click', function () {
        if (!searchTrigger.classList.contains('trigger-active')) {
          searchTrigger.classList.add('trigger-active');
          searchTarget.classList.add('toggle-active');
          var input = searchTarget.querySelector('#nav-search');

          if (input) {
            setTimeout(function () {
              input.focus();
            }, 100);
          }
        }
      });
    }
  };

  var onAutocompleteClosed = function onAutocompleteClosed() {
    if (searchTerm !== '' && !searchResultSelected) {
      logSearchTermNumber(searchTerm);
      logSearchTermErased();
    }

    if (searchWrapper && searchOverlay) {
      navigation.classList.remove('navigation--search-active');
      searchWrapper.classList.remove('navigation__search-wrapper--wide');
      searchOverlay.classList.remove('search-overlay--visible');
      setTimeout(function () {
        if (searchTrigger) {
          searchTrigger.classList.remove('trigger-active');
          searchTarget.classList.remove('toggle-active');
        }
      }, 100);
    }
  };

  var onAutocompleteOpened = function onAutocompleteOpened() {
    if (searchWrapper && searchOverlay) {
      navigation.classList.add('navigation--search-active');
      searchWrapper.classList.add('navigation__search-wrapper--wide');
      searchOverlay.classList.add('search-overlay--visible');
    }

    searchInput.focus();
  };

  var getSuggestionsSource = function getSuggestionsSource(hitsSource, query, callback) {
    hitsSource(query, function (suggestions) {
      searchResultsNumber = suggestions.length;
      var formattedSuggestions = [];

      for (var i = 0; i < suggestions.length; i++) {
        formattedSuggestions.push(formatSuggestionContent(suggestions[i]));
      }

      callback(formattedSuggestions);
    });
  };

  var autocompleteSettings = {
    autoselect: true,
    openOnFocus: true,
    clearOnSelected: false,
    debug: false
  };

  var getAutocompleteTemplates = function getAutocompleteTemplates(urlMap) {
    return {
      header: function header() {
        return "<div class=\"aa-header\">".concat(searchResultsNumber, " results for '<strong>").concat(window.filterXSS(decodeURIComponent(searchTerm)), "</strong>'</div>");
      },
      suggestion: function suggestion(_suggestion) {
        return formatSuggestion(_suggestion, urlMap);
      },
      empty: function empty() {
        return formatEmptySuggestion();
      }
    };
  }; // Init Algolia


  var initAutocomplete = function initAutocomplete(urlMap) {
    // Init autocomplete and set maximum of suggested search items
    var hitsSource = window.autocomplete.sources.hits(tutorials, {
      hitsPerPage: 50
    });
    var searchInputIsFocused = false;

    if (searchInput === document.activeElement) {
      searchInputIsFocused = true;
    }

    window.autocomplete('#nav-search', autocompleteSettings, [{
      source: function source(query, callback) {
        getSuggestionsSource(hitsSource, query, callback);
      },
      displayKey: 'title',
      templates: getAutocompleteTemplates(urlMap)
    }]).on('autocomplete:opened', onAutocompleteOpened).on('autocomplete:selected', function (event, suggestion, dataset, context) {
      onAutocompleteSelected(suggestion, context);
    }).on('autocomplete:closed', onAutocompleteClosed).on('autocomplete:updated', onAutocompleteUpdated);

    if (searchInputIsFocused) {
      searchInput.focus();
    }
  };

  var initAlgoliaSearch = function initAlgoliaSearch() {
    document.onkeydown = arrowPress; // Get urlMap and init the autocomplete

    window.helper.ajaxGet("".concat(url.protocol, "//").concat(url.hostname + (location.port ? ':' + location.port : ''), "/urlmap").concat(queryString), function (urlMap) {
      initAutocomplete(urlMap);
    }, 'json');
  };

  var setFocusOnMagnifier = function setFocusOnMagnifier(prefix) {
    var search = document.querySelector(".".concat(prefix, "__search"));

    if (search) {
      var icon = search.querySelector(".".concat(prefix, "__search-icon"));
      icon.addEventListener('click', function () {
        searchInput.focus();
      });
    }
  };

  if (window.searchAPI) {
    initAlgoliaSearch();
    setFocusOnMagnifier('navigation');
    setFocusOnMagnifier('hero');
    triggerSearchPanel();
  }
})();

/***/ }),
/* 6 */
/***/ (function(module, exports) {

(function () {
  var btn = document.querySelector('[data-click="support"]');

  if (btn) {
    btn.addEventListener('click', function () {
      if (window.Intercom) {
        window.Intercom('show');
      }
    });
  }
})();

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

var require;var require;window.basicLightbox = function () {
  return function i(u, c, a) {
    function s(n, e) {
      if (!c[n]) {
        if (!u[n]) {
          var t = typeof require === 'function' && require;
          if (!e && t) return require(n, !0);
          if (l) return l(n, !0);
          var o = new Error("Cannot find module '" + n + "'");
          throw o.code = 'MODULE_NOT_FOUND', o;
        }

        var r = c[n] = {
          exports: {}
        };
        u[n][0].call(r.exports, function (e) {
          return s(u[n][1][e] || e);
        }, r, r.exports, i, u, c, a);
      }

      return c[n].exports;
    }

    for (var l = typeof require === 'function' && require, e = 0; e < a.length; e++) {
      s(a[e]);
    }

    return s;
  }({
    1: [function (e, n, t) {
      'use strict';

      Object.defineProperty(t, '__esModule', {
        value: !0
      });

      var c = function c(e) {
        var n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        var t = document.createElement('div');
        return t.innerHTML = e.trim(), !0 === n ? t.children : t.firstChild;
      };

      var a = function a(e, n) {
        var t = e.children;
        return t.length === 1 && t[0].tagName === n;
      };

      var u = t.visible = function (e) {
        return (e = e || document.querySelector('.basicLightbox')) != null && !0 === e.ownerDocument.body.contains(e);
      };

      t.create = function (e, o) {
        var r = function (e, n) {
          var t = c('\n\t\t<div class="basicLightbox ' + n.className + '">\n\t\t\t<div class="basicLightbox__placeholder" role="dialog"></div>\n\t\t</div>\n\t');
          var o = t.querySelector('.basicLightbox__placeholder');
          e.forEach(function (e) {
            return o.appendChild(e);
          });
          var r = a(o, 'IMG');
          var i = a(o, 'VIDEO');
          var u = a(o, 'IFRAME');
          return !0 === r && t.classList.add('basicLightbox--img'), !0 === i && t.classList.add('basicLightbox--video'), !0 === u && t.classList.add('basicLightbox--iframe'), t;
        }(e = function (e) {
          var n = typeof e === 'string';
          var t = e instanceof HTMLElement == 1;
          if (!1 === n && !1 === t) throw new Error('Content must be a DOM element/node or string');
          return !0 === n ? Array.from(c(e, !0)) : e.tagName === 'TEMPLATE' ? [e.content.cloneNode(!0)] : Array.from(e.children);
        }(e), o = function () {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
          if ((e = Object.assign({}, e)).closable == null && (e.closable = !0), e.className == null && (e.className = ''), e.onShow == null && (e.onShow = function () {}), e.onClose == null && (e.onClose = function () {}), typeof e.closable !== 'boolean') throw new Error('Property `closable` must be a boolean');
          if (typeof e.className !== 'string') throw new Error('Property `className` must be a string');
          if (typeof e.onShow !== 'function') throw new Error('Property `onShow` must be a function');
          if (typeof e.onClose !== 'function') throw new Error('Property `onClose` must be a function');
          return e;
        }(o));

        var n = function n(e) {
          return !1 !== o.onClose(i) && (t = function t() {
            if (typeof e === 'function') return e(i);
          }, (n = r).classList.remove('basicLightbox--visible'), setTimeout(function () {
            return !1 === u(n) || n.parentElement.removeChild(n), t();
          }, 410), !0);
          var n, t;
        };

        !0 === o.closable && r.addEventListener('click', function (e) {
          /* e.target === r && */
          n();
        });
        var i = {
          element: function element() {
            return r;
          },
          visible: function visible() {
            return u(r);
          },
          show: function show(e) {
            return !1 !== o.onShow(i) && (n = r, t = function t() {
              if (typeof e === 'function') return e(i);
            }, document.body.appendChild(n), setTimeout(function () {
              requestAnimationFrame(function () {
                return n.classList.add('basicLightbox--visible'), t();
              });
            }, 10), !0);
            var n, t;
          },
          close: n
        };
        return i;
      };
    }, {}]
  }, {}, [1])(1);
}();

/***/ }),
/* 8 */
/***/ (function(module, exports) {

/**
 * Initializes lightbox and caption if available
 */
(function () {
  setTimeout(function () {
    var imgs = document.querySelectorAll('img.article__add-lightbox');

    var initLightbox = function initLightbox() {
      document.querySelectorAll('img.article__add-lightbox').forEach(function (item) {
        var figcaption = '';
        var nextSibling = item.nextSibling;
        var nextNextSibling = nextSibling.nextSibling; // Find caption in DOM generated by Kentico Kontent

        var captionElem = function () {
          if (nextSibling && nextSibling.tagName === 'FIGCAPTION') {
            return nextSibling;
          } else if (nextNextSibling && nextNextSibling.tagName === 'FIGCAPTION') {
            return nextNextSibling;
          } else {
            return null;
          }
        }();

        if (captionElem !== null) {
          figcaption = "<div class=\"basicLightbox__description\">".concat(captionElem.innerHTML, "</div>");
        } // Init lighbox with caption


        item.addEventListener('click', function () {
          window.basicLightbox.create("<img src=\"".concat(item.getAttribute('src').split('?')[0] + '?w=1600&fm=jpg&auto=format', "\">").concat(figcaption)).show();
        });
      });
    };

    var interval = setInterval(function () {
      imgs = document.querySelectorAll('img.article__add-lightbox');

      if (imgs.length) {
        initLightbox();
        clearInterval(interval);
      }
    }, 100);
  }, 0);
})();

/***/ }),
/* 9 */
/***/ (function(module, exports) {

!function () {
  if (typeof self !== 'undefined' && self.Prism && self.document) {
    var l = 'line-numbers';
    var c = /\n(?!$)/g;

    var m = function m(e) {
      var t = a(e)['white-space'];

      if (t === 'pre-wrap' || t === 'pre-line') {
        var n = e.querySelector('code');
        var r = e.querySelector('.line-numbers-rows');
        var s = e.querySelector('.line-numbers-sizer');
        var i = n.textContent.split(c);
        s || ((s = document.createElement('span')).className = 'line-numbers-sizer', n.appendChild(s)), s.style.display = 'block', i.forEach(function (e, t) {
          s.textContent = e || '\n';
          var n = s.getBoundingClientRect().height;
          r.children[t].style.height = n + 'px';
        }), s.textContent = '', s.style.display = 'none';
      }
    };

    var a = function a(e) {
      return e ? window.getComputedStyle ? getComputedStyle(e) : e.currentStyle || null : null;
    };

    window.addEventListener('resize', function () {
      Array.prototype.forEach.call(document.querySelectorAll('pre.' + l), m);
    }), Prism.hooks.add('complete', function (e) {
      if (e.code) {
        var t = e.element;
        var n = t.parentNode;

        if (n && /pre/i.test(n.nodeName) && !t.querySelector('.line-numbers-rows')) {
          for (var r = !1, s = /(?:^|\s)line-numbers(?:\s|$)/, i = t; i; i = i.parentNode) {
            if (s.test(i.className)) {
              r = !0;
              break;
            }
          }

          if (r) {
            t.className = t.className.replace(s, ' '), s.test(n.className) || (n.className += ' line-numbers');
            var l;
            var a = e.code.match(c);
            var o = a ? a.length + 1 : 1;
            var u = new Array(o + 1).join('<span></span>');
            (l = document.createElement('span')).setAttribute('aria-hidden', 'true'), l.className = 'line-numbers-rows', l.innerHTML = u, n.hasAttribute('data-start') && (n.style.counterReset = 'linenumber ' + (parseInt(n.getAttribute('data-start'), 10) - 1)), e.element.appendChild(l), m(n), Prism.hooks.run('line-numbers', e);
          }
        }
      }
    }), Prism.hooks.add('line-numbers', function (e) {
      e.plugins = e.plugins || {}, e.plugins.lineNumbers = !0;
    }), Prism.plugins.lineNumbers = {
      getLine: function getLine(e, t) {
        if (e.tagName === 'PRE' && e.classList.contains(l)) {
          var n = e.querySelector('.line-numbers-rows');
          var r = parseInt(e.getAttribute('data-start'), 10) || 1;
          var s = r + (n.children.length - 1);
          t < r && (t = r), s < t && (t = s);
          var i = t - r;
          return n.children[i];
        }
      }
    };
  }
}();

/***/ }),
/* 10 */
/***/ (function(module, exports) {

(function () {
  var warning = document.querySelector('.preview-warning');

  if (warning) {
    var links = warning.querySelectorAll('a');

    for (var i = 0; i < links.length; i++) {
      if (links[i].innerHTML === 'live version') {
        var loc = window.location;
        var href = links[i].getAttribute('href');

        if (href.endsWith('/')) {
          href = href.slice(0, -1);
        }

        links[i].setAttribute('href', href + loc.pathname + loc.search + loc.hash);
      }
    }
  }
})();

/***/ }),
/* 11 */
/***/ (function(module, exports) {

(function () {
  var positionTooltips = function positionTooltips() {
    document.querySelectorAll('.icon').forEach(function (item) {
      var tooltip = item.querySelector('.icon__tooltip');
      var offsetRight = window.innerWidth - item.getBoundingClientRect().right;

      if (tooltip) {
        tooltip.classList.remove('icon__tooltip--right');
      }

      if (tooltip && offsetRight < 200) {
        tooltip.classList.add('icon__tooltip--right');
      }
    });
  };

  positionTooltips();
  window.addEventListener('resize', positionTooltips);
})();

/***/ }),
/* 12 */
/***/ (function(module, exports) {

(function () {
  /* Helper methods */
  var triggerClick = function triggerClick(item) {
    setTimeout(function () {
      if (item) {
        item.click();
      }
    }, 0);
  };

  var findAncestor = function findAncestor(el, sel) {
    while ((el = el.parentElement) && !(el.matches || el.matchesSelector).call(el, sel)) {
      ;
    }

    return el;
  };

  var updateLabel = function updateLabel(item) {
    if (!item) {
      return;
    }

    var selectorLabel = findAncestor(item, '.language-selector');

    if (selectorLabel) {
      selectorLabel = selectorLabel.querySelector('.language-selector__label');
    }

    if (selectorLabel) {
      selectorLabel.innerHTML = item.innerHTML;
    }
  };
  /* Code blocks inside documentation body */


  var getPrismClassName = function getPrismClassName(item) {
    var lang;
    var pairings = {
      rest: 'shell',
      shell: 'shell',
      curl: 'shell',
      _net: 'dotnet',
      c_: 'dotnet',
      javascript: 'js',
      json: 'js',
      typescript: 'ts',
      java: 'java',
      android: 'java',
      javarx: 'java',
      php: 'php',
      swift: 'swift',
      python: 'python',
      ruby: 'ruby'
    };

    if (item) {
      lang = pairings[item];
    }

    if (!lang) {
      lang = 'clike';
    }

    return 'language-' + lang;
  };

  var createHighlightedBlock = function createHighlightedBlock(block) {
    setTimeout(function () {
      var cleanCode = block.querySelector('.clean-code').innerHTML;
      var codeElem = document.createElement('code');
      codeElem.innerHTML = cleanCode;
      codeElem.classList.add(getPrismClassName(block.getAttribute('data-platform-code')));
      block.appendChild(codeElem);

      if (block.parentNode.classList.contains('code-samples')) {
        block.classList.add('hidden');
      } else {
        block.classList.add(getPrismClassName(block.getAttribute('data-platform-code')));
        window.Prism.highlightElement(codeElem);
      }

      block.classList.add('loaded');
    }, 0);
  };

  var initCodeBlocks = function initCodeBlocks(blocks) {
    for (var i = 0; i < blocks.length; i++) {
      createHighlightedBlock(blocks[i]);
    }
  };

  var codeBlocks = function codeBlocks() {
    var blocks = document.querySelectorAll('[data-platform-code]');
    var interval = setInterval(function () {
      blocks = document.querySelectorAll('[data-platform-code]');

      if (blocks.length) {
        initCodeBlocks(blocks);
        clearInterval(interval);
      }
    }, 100);
  };

  codeBlocks();
  document.addEventListener('click', function (e) {
    if (e.target && e.target.matches('.language-selector__link')) {
      e.preventDefault();
      var platform = e.target.getAttribute('data-platform');
      var links = document.querySelectorAll('.language-selector__link');
      var linkRedoc = document.querySelector('.tab-click_' + platform);
      var blocks = document.querySelectorAll('[data-platform-code]');
      window.helper.setCookie('KCDOCS.preselectedLanguage', platform);

      for (var i = 0; i < links.length; i++) {
        if (links[i].getAttribute('data-platform') === platform) {
          updateLabel(links[i]);
          links[i].classList.add('language-selector__link--active');
        } else {
          links[i].classList.remove('language-selector__link--active');
        }
      }

      for (var j = 0; j < blocks.length; j++) {
        if (blocks[j].parentNode.classList.contains('code-samples')) {
          if (blocks[j].getAttribute('data-platform-code') === platform) {
            blocks[j].classList.remove('hidden');
            window.Prism.highlightElement(blocks[j].querySelector('code'));
          } else {
            blocks[j].classList.add('hidden');
          }
        }
      }

      if (linkRedoc) {
        linkRedoc.click();
      }
    }
  });
  /* Code blocks for requests and responses */

  var initPlatfromFromCookie = function initPlatfromFromCookie() {
    var clicked = false;
    var cookie = window.helper.getCookie('KCDOCS.preselectedLanguage');

    if (cookie && !clicked) {
      var tabs = document.querySelectorAll('[class="tab-click_' + cookie + '"], [data-platform="' + cookie + '"]');

      if (tabs && tabs.length) {
        for (var i = 0; i < tabs.length; i++) {
          clicked = true;
          triggerClick(tabs[i]);
        }

        setTimeout(function () {
          clicked = false;
        }, 0);
      } else {
        triggerClick(document.querySelector('[data-platform]'));
      }
    } else {
      triggerClick(document.querySelector('[data-platform]'));
    }
  };

  var getPlatformFromClassName = function getPlatformFromClassName(className) {
    var classNames = className.split(' ');
    var platform = '';

    for (var i = 0; i < classNames.length; i++) {
      if (classNames[i].indexOf('tab-click_') > -1) {
        platform = classNames[i].replace('tab-click_', '');
      }
    }

    return platform;
  };

  var clickTab = function clickTab() {
    var tabs = document.querySelectorAll('[class*="tab-click_"], [data-platform]');
    var body = document.querySelector('body');
    var clicked = false;
    var interval = setInterval(function () {
      tabs = document.querySelectorAll('[class*="tab-click_"], [data-platform]');

      if (tabs.length) {
        initPlatfromFromCookie();
        clearInterval(interval);
      }
    }, 100);
    body.addEventListener('click', function (e) {
      if (e.target && e.target.className && e.target.className.indexOf && e.target.className.indexOf('tab-click_') > -1 && !clicked) {
        var platform = getPlatformFromClassName(e.target.className);
        var className = 'tab-click_' + platform;
        updateLabel(e.target);
        window.helper.setCookie('KCDOCS.preselectedLanguage', platform);

        if (!tabs.length) {
          tabs = document.querySelectorAll('[class*="tab-click_"], [data-platform]');
        }

        for (var i = 0; i < tabs.length; i++) {
          if ((tabs[i].classList.contains(className) || tabs[i].getAttribute('data-platform') === platform) && tabs[i] !== e.target) {
            clicked = true;
            triggerClick(tabs[i]);
            updateLabel(tabs[i]);
          }
        }

        setTimeout(function () {
          clicked = false;
        }, 0);
      }
    });
  };

  clickTab();

  var setButtonPosition = function setButtonPosition(button) {
    if (window.pageYOffset < 56) {
      if (!button.classList.contains('nav-trigger-top')) {
        button.classList.add('nav-trigger-top');
      }
    } else {
      button.classList.remove('nav-trigger-top');
    }
  };

  var floatingButtonPosition = function floatingButtonPosition() {
    var button = document.querySelector('[class*="__FloatingButton"]');
    var interval = setInterval(function () {
      button = document.querySelector('[class*="__FloatingButton"]');

      if (button) {
        setButtonPosition(button);
        clearInterval(interval);
      }
    }, 100);
  };

  floatingButtonPosition();
  window.addEventListener('scroll', function () {
    var button = document.querySelector('[class*="__FloatingButton"]');
    setButtonPosition(button);
  });

  var createAchors = function createAchors(headings) {
    for (var i = 0; i < headings.length; i++) {
      var headingId = headings[i].getAttribute('id');
      var headingHTML = headings[i].innerHTML;
      var ancestor = window.helper.findAncestor(headings[i], '[data-section-id]');
      var section = ancestor ? ancestor.getAttribute('data-section-id') : '';
      var newId = section + '/' + headingId;
      headings[i].setAttribute('id', newId);
      var anchorLink = '<a class="linkify__StyledShareLink" href="#' + newId + '" data-custom-anchor></a>';
      headings[i].innerHTML = anchorLink + headingHTML;
    }
  };

  var addAchorsToHeadings = function addAchorsToHeadings() {
    var headings = document.querySelectorAll('h2[id], h3[id], h4[id]');
    var interval = setInterval(function () {
      headings = document.querySelectorAll('h2[id], h3[id], h4[id]');

      if (headings.length) {
        createAchors(headings);
        clearInterval(interval);
      }
    }, 100);
  };

  var getAnchor = function getAnchor() {
    return document.URL.split('#').length > 1 ? document.URL.split('#')[1] : null;
  };

  var offset = function offset(el) {
    var rect = el.getBoundingClientRect();
    var scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    return rect.top + scrollTop;
  };

  var scrollToHeading = function scrollToHeading() {
    var headings = document.querySelectorAll('h2[id], h3[id]');
    var anchor = getAnchor();
    var interval = setInterval(function () {
      headings = document.querySelectorAll('h2[id], h3[id]');

      if (headings.length && anchor) {
        if (document.body.scrollTop === 0) {
          var heading = document.getElementById(anchor);

          if (heading) {
            window.scrollTo(0, offset(heading));
          }
        }

        clearInterval(interval);
      }
    }, 100);
  };

  var forceCorrectHash = function forceCorrectHash() {
    var content = document.querySelector('.api-content');
    var interval = setInterval(function () {
      content = document.querySelector('.api-content');

      if (content) {
        content.addEventListener('click', function (e) {
          if (e.target && e.target.matches('[data-custom-anchor]')) {
            setTimeout(function () {
              window.location.hash = e.target.getAttribute('href');
            }, 50);
          }
        });
        clearInterval(interval);
      }
    });
  };

  addAchorsToHeadings();
  scrollToHeading();
  forceCorrectHash();

  var createSelectLanguageSelector = function createSelectLanguageSelector(sel) {
    setTimeout(function () {
      var lists = document.querySelectorAll(sel);

      for (var i = 0; i < lists.length; i++) {
        var wrap = document.createElement('div');
        wrap.classList.add('language-selector');
        var label = document.createElement('label');
        label.classList.add('language-selector__label');
        lists[i].parentNode.insertBefore(wrap, lists[i]);
        wrap.appendChild(label);
        wrap.appendChild(lists[i]);
      }
    }, 0);
  };

  var interactSelectLanguageSelector = function interactSelectLanguageSelector() {
    document.querySelector('body').addEventListener('click', function (e) {
      if (e.target && e.target.matches('.language-selector__label')) {
        var languageSelector = findAncestor(e.target, '.language-selector');

        if (languageSelector.classList.contains('language-selector--opened')) {
          languageSelector.classList.remove('language-selector--opened');
        } else {
          languageSelector.classList.add('language-selector--opened');
        }
      } else {
        var allLanguageSelectors = document.querySelectorAll('.language-selector');

        for (var i = 0; i < allLanguageSelectors.length; i++) {
          allLanguageSelectors[i].classList.remove('language-selector--opened');
        }
      }
    });
  };

  createSelectLanguageSelector('.language-selector__list'); // createSelectLanguageSelector('.react-tabs__tab-list');

  interactSelectLanguageSelector();
})();

/***/ }),
/* 13 */
/***/ (function(module, exports) {

(function () {
  var parallax = document.querySelectorAll('[data-parallax]');
  window.addEventListener('scroll', function () {
    for (var i = 0; i < parallax.length; i++) {
      var parallaxTarget = document.querySelector('[data-parallax-target="' + parallax[i].getAttribute('data-parallax') + '"]');
      var viewportOffset = parallax[i].getBoundingClientRect();
      var visibilityIndex = viewportOffset.top / window.innerHeight * 100;

      if (visibilityIndex >= 0 && visibilityIndex <= 100) {
        var parallaxOffset = parseInt(getComputedStyle(parallaxTarget).bottom);
        parallaxTarget.style.transform = 'translate3d(0, ' + Math.floor(parallaxOffset - visibilityIndex / 100 * parallaxOffset) + 'px, 0)';
      }
    }
  });
})();

/***/ }),
/* 14 */
/***/ (function(module, exports) {

(function () {
  var body = document.querySelector('body');

  var setHoverPosition = function setHoverPosition(e) {
    if (e.target && (e.target.matches('.feedback__button') || e.target.matches('.form__button') || e.target.matches('.button') || e.target.matches('.cta .call-to-action'))) {
      var rect = e.target.getBoundingClientRect();
      var top = e.clientY - rect.top;
      var left = e.clientX - rect.left;
      var span = e.target.querySelector('span:last-child');

      if (span) {
        span.style.top = top + 'px';
        span.style.left = left + 'px';
      }
    }
  };

  body.addEventListener('mouseover', function (e) {
    setHoverPosition(e);
  });
  body.addEventListener('mouseout', function (e) {
    setHoverPosition(e);
  });
})();

/***/ }),
/* 15 */
/***/ (function(module, exports) {

(function () {
  var allSamples = document.querySelectorAll('[data-platform-code]');

  var wrap = function wrap(el) {
    var div = document.createElement('div');
    div.classList.add('code-sample-standalone');
    el.parentNode.insertBefore(div, el);
    div.appendChild(el);
  };

  for (var i = 0; i < allSamples.length; i++) {
    if (!allSamples[i].parentNode.classList.contains('code-samples')) {
      wrap(allSamples[i]);
    }
  }
})();

/***/ })
/******/ ]);
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);

__webpack_require__(2);

__webpack_require__(3);

__webpack_require__(4);

__webpack_require__(5);

__webpack_require__(6);

__webpack_require__(7);

__webpack_require__(8);

__webpack_require__(9);

__webpack_require__(10);

__webpack_require__(12);

__webpack_require__(13);

__webpack_require__(14);

__webpack_require__(15);

__webpack_require__(16);

__webpack_require__(17);

__webpack_require__(18);

__webpack_require__(19);

__webpack_require__(20);

__webpack_require__(21);

__webpack_require__(22);

__webpack_require__(23);

__webpack_require__(24);

__webpack_require__(25);

__webpack_require__(26);

__webpack_require__(27);

__webpack_require__(28);

__webpack_require__(29);

__webpack_require__(30);

__webpack_require__(31);

/***/ }),
/* 1 */
/***/ (function(module, exports) {

/**
 * Polyfills for used functionality in other JS files in the ../ folder
 */
// Production steps of ECMA-262, Edition 6, 22.1.2.1
if (!Array.from) {
  Array.from = function () {
    var toStr = Object.prototype.toString;

    var isCallable = function isCallable(fn) {
      return typeof fn === 'function' || toStr.call(fn) === '[object Function]';
    };

    var toInteger = function toInteger(value) {
      var number = Number(value);

      if (isNaN(number)) {
        return 0;
      }

      if (number === 0 || !isFinite(number)) {
        return number;
      }

      return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
    };

    var maxSafeInteger = Math.pow(2, 53) - 1;

    var toLength = function toLength(value) {
      var len = toInteger(value);
      return Math.min(Math.max(len, 0), maxSafeInteger);
    }; // The length property of the from method is 1.


    return function from(arrayLike
    /*, mapFn, thisArg */
    ) {
      // 1. Let C be the this value.
      var C = this; // 2. Let items be ToObject(arrayLike).

      var items = Object(arrayLike); // 3. ReturnIfAbrupt(items).

      if (arrayLike == null) {
        throw new TypeError('Array.from requires an array-like object - not null or undefined');
      } // 4. If mapfn is undefined, then let mapping be false.


      var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
      var T;

      if (typeof mapFn !== 'undefined') {
        // 5. else
        // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
        if (!isCallable(mapFn)) {
          throw new TypeError('Array.from: when provided, the second argument must be a function');
        } // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.


        if (arguments.length > 2) {
          T = arguments[2];
        }
      } // 10. Let lenValue be Get(items, "length").
      // 11. Let len be ToLength(lenValue).


      var len = toLength(items.length); // 13. If IsConstructor(C) is true, then
      // 13. a. Let A be the result of calling the [[Construct]] internal method
      // of C with an argument list containing the single item len.
      // 14. a. Else, Let A be ArrayCreate(len).

      var A = isCallable(C) ? Object(new C(len)) : new Array(len); // 16. Let k be 0.

      var k = 0; // 17. Repeat, while k < len… (also steps a - h)

      var kValue;

      while (k < len) {
        kValue = items[k];

        if (mapFn) {
          A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
        } else {
          A[k] = kValue;
        }

        k += 1;
      } // 18. Let putStatus be Put(A, "length", len, true).


      A.length = len; // 20. Return A.

      return A;
    };
  }();
}

if (typeof Object.assign !== 'function') {
  // Must be writable: true, enumerable: false, configurable: true
  Object.defineProperty(Object, 'assign', {
    value: function assign(target, varArgs) {
      // .length of function is 2
      'use strict';

      if (target == null) {
        // TypeError if undefined or null
        throw new TypeError('Cannot convert undefined or null to object');
      }

      var to = Object(target);

      for (var index = 1; index < arguments.length; index++) {
        var nextSource = arguments[index];

        if (nextSource != null) {
          // Skip over if undefined or null
          for (var nextKey in nextSource) {
            // Avoid bugs when hasOwnProperty is shadowed
            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
              to[nextKey] = nextSource[nextKey];
            }
          }
        }
      }

      return to;
    },
    writable: true,
    configurable: true
  });
} // Test via a getter in the options object to see if the passive property is accessed


var supportsPassive = false;

try {
  var opts = Object.defineProperty({}, 'passive', {
    get: function get() {
      supportsPassive = true;
    }
  });
  window.addEventListener('testPassive', null, opts);
  window.removeEventListener('testPassive', null, opts);
} catch (e) {} // Adds forEach function to NodeList class prototype
// Adds matches function for IE11


(function () {
  if (typeof NodeList.prototype.forEach === 'function') {
    return false;
  } else {
    NodeList.prototype.forEach = Array.prototype.forEach;
  }

  if (!Element.prototype.matches) {
    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
  }
})();

if (!String.prototype.endsWith) {
  String.prototype.endsWith = function (searchString, position) {
    var subjectString = this.toString();

    if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
      position = subjectString.length;
    }

    position -= searchString.length;
    var lastIndex = subjectString.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
  };
}

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

var require;var require;(function e(t, n, r) {
  function s(o, u) {
    if (!n[o]) {
      if (!t[o]) {
        var a = typeof require == "function" && require;
        if (!u && a) return require(o, !0);
        if (i) return i(o, !0);
        var f = new Error("Cannot find module '" + o + "'");
        throw f.code = "MODULE_NOT_FOUND", f;
      }

      var l = n[o] = {
        exports: {}
      };
      t[o][0].call(l.exports, function (e) {
        var n = t[o][1][e];
        return s(n ? n : e);
      }, l, l.exports, e, t, n, r);
    }

    return n[o].exports;
  }

  var i = typeof require == "function" && require;

  for (var o = 0; o < r.length; o++) {
    s(r[o]);
  }

  return s;
})({
  1: [function (require, module, exports) {
    /**
     * default settings
     *
     * @author Zongmin Lei<leizongmin@gmail.com>
     */
    var FilterCSS = require("cssfilter").FilterCSS;

    var getDefaultCSSWhiteList = require("cssfilter").getDefaultWhiteList;

    var _ = require("./util");

    function getDefaultWhiteList() {
      return {
        a: ["target", "href", "title"],
        abbr: ["title"],
        address: [],
        area: ["shape", "coords", "href", "alt"],
        article: [],
        aside: [],
        audio: ["autoplay", "controls", "loop", "preload", "src"],
        b: [],
        bdi: ["dir"],
        bdo: ["dir"],
        big: [],
        blockquote: ["cite"],
        br: [],
        caption: [],
        center: [],
        cite: [],
        code: [],
        col: ["align", "valign", "span", "width"],
        colgroup: ["align", "valign", "span", "width"],
        dd: [],
        del: ["datetime"],
        details: ["open"],
        div: [],
        dl: [],
        dt: [],
        em: [],
        font: ["color", "size", "face"],
        footer: [],
        h1: [],
        h2: [],
        h3: [],
        h4: [],
        h5: [],
        h6: [],
        header: [],
        hr: [],
        i: [],
        img: ["src", "alt", "title", "width", "height"],
        ins: ["datetime"],
        li: [],
        mark: [],
        nav: [],
        ol: [],
        p: [],
        pre: [],
        s: [],
        section: [],
        small: [],
        span: [],
        sub: [],
        sup: [],
        strong: [],
        table: ["width", "border", "align", "valign"],
        tbody: ["align", "valign"],
        td: ["width", "rowspan", "colspan", "align", "valign"],
        tfoot: ["align", "valign"],
        th: ["width", "rowspan", "colspan", "align", "valign"],
        thead: ["align", "valign"],
        tr: ["rowspan", "align", "valign"],
        tt: [],
        u: [],
        ul: [],
        video: ["autoplay", "controls", "loop", "preload", "src", "height", "width"]
      };
    }

    var defaultCSSFilter = new FilterCSS();
    /**
     * default onTag function
     *
     * @param {String} tag
     * @param {String} html
     * @param {Object} options
     * @return {String}
     */

    function onTag(tag, html, options) {} // do nothing

    /**
     * default onIgnoreTag function
     *
     * @param {String} tag
     * @param {String} html
     * @param {Object} options
     * @return {String}
     */


    function onIgnoreTag(tag, html, options) {} // do nothing

    /**
     * default onTagAttr function
     *
     * @param {String} tag
     * @param {String} name
     * @param {String} value
     * @return {String}
     */


    function onTagAttr(tag, name, value) {} // do nothing

    /**
     * default onIgnoreTagAttr function
     *
     * @param {String} tag
     * @param {String} name
     * @param {String} value
     * @return {String}
     */


    function onIgnoreTagAttr(tag, name, value) {} // do nothing

    /**
     * default escapeHtml function
     *
     * @param {String} html
     */


    function escapeHtml(html) {
      return html.replace(REGEXP_LT, "&lt;").replace(REGEXP_GT, "&gt;");
    }
    /**
     * default safeAttrValue function
     *
     * @param {String} tag
     * @param {String} name
     * @param {String} value
     * @param {Object} cssFilter
     * @return {String}
     */


    function safeAttrValue(tag, name, value, cssFilter) {
      // unescape attribute value firstly
      value = friendlyAttrValue(value);

      if (name === "href" || name === "src") {
        // filter `href` and `src` attribute
        // only allow the value that starts with `http://` | `https://` | `mailto:` | `/` | `#`
        value = _.trim(value);
        if (value === "#") return "#";

        if (!(value.substr(0, 7) === "http://" || value.substr(0, 8) === "https://" || value.substr(0, 7) === "mailto:" || value.substr(0, 4) === "tel:" || value[0] === "#" || value[0] === "/")) {
          return "";
        }
      } else if (name === "background") {
        // filter `background` attribute (maybe no use)
        // `javascript:`
        REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;

        if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
          return "";
        }
      } else if (name === "style") {
        // `expression()`
        REGEXP_DEFAULT_ON_TAG_ATTR_7.lastIndex = 0;

        if (REGEXP_DEFAULT_ON_TAG_ATTR_7.test(value)) {
          return "";
        } // `url()`


        REGEXP_DEFAULT_ON_TAG_ATTR_8.lastIndex = 0;

        if (REGEXP_DEFAULT_ON_TAG_ATTR_8.test(value)) {
          REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;

          if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
            return "";
          }
        }

        if (cssFilter !== false) {
          cssFilter = cssFilter || defaultCSSFilter;
          value = cssFilter.process(value);
        }
      } // escape `<>"` before returns


      value = escapeAttrValue(value);
      return value;
    } // RegExp list


    var REGEXP_LT = /</g;
    var REGEXP_GT = />/g;
    var REGEXP_QUOTE = /"/g;
    var REGEXP_QUOTE_2 = /&quot;/g;
    var REGEXP_ATTR_VALUE_1 = /&#([a-zA-Z0-9]*);?/gim;
    var REGEXP_ATTR_VALUE_COLON = /&colon;?/gim;
    var REGEXP_ATTR_VALUE_NEWLINE = /&newline;?/gim;
    var REGEXP_DEFAULT_ON_TAG_ATTR_3 = /\/\*|\*\//gm;
    var REGEXP_DEFAULT_ON_TAG_ATTR_4 = /((j\s*a\s*v\s*a|v\s*b|l\s*i\s*v\s*e)\s*s\s*c\s*r\s*i\s*p\s*t\s*|m\s*o\s*c\s*h\s*a)\:/gi;
    var REGEXP_DEFAULT_ON_TAG_ATTR_5 = /^[\s"'`]*(d\s*a\s*t\s*a\s*)\:/gi;
    var REGEXP_DEFAULT_ON_TAG_ATTR_6 = /^[\s"'`]*(d\s*a\s*t\s*a\s*)\:\s*image\//gi;
    var REGEXP_DEFAULT_ON_TAG_ATTR_7 = /e\s*x\s*p\s*r\s*e\s*s\s*s\s*i\s*o\s*n\s*\(.*/gi;
    var REGEXP_DEFAULT_ON_TAG_ATTR_8 = /u\s*r\s*l\s*\(.*/gi;
    /**
     * escape doube quote
     *
     * @param {String} str
     * @return {String} str
     */

    function escapeQuote(str) {
      return str.replace(REGEXP_QUOTE, "&quot;");
    }
    /**
     * unescape double quote
     *
     * @param {String} str
     * @return {String} str
     */


    function unescapeQuote(str) {
      return str.replace(REGEXP_QUOTE_2, '"');
    }
    /**
     * escape html entities
     *
     * @param {String} str
     * @return {String}
     */


    function escapeHtmlEntities(str) {
      return str.replace(REGEXP_ATTR_VALUE_1, function replaceUnicode(str, code) {
        return code[0] === "x" || code[0] === "X" ? String.fromCharCode(parseInt(code.substr(1), 16)) : String.fromCharCode(parseInt(code, 10));
      });
    }
    /**
     * escape html5 new danger entities
     *
     * @param {String} str
     * @return {String}
     */


    function escapeDangerHtml5Entities(str) {
      return str.replace(REGEXP_ATTR_VALUE_COLON, ":").replace(REGEXP_ATTR_VALUE_NEWLINE, " ");
    }
    /**
     * clear nonprintable characters
     *
     * @param {String} str
     * @return {String}
     */


    function clearNonPrintableCharacter(str) {
      var str2 = "";

      for (var i = 0, len = str.length; i < len; i++) {
        str2 += str.charCodeAt(i) < 32 ? " " : str.charAt(i);
      }

      return _.trim(str2);
    }
    /**
     * get friendly attribute value
     *
     * @param {String} str
     * @return {String}
     */


    function friendlyAttrValue(str) {
      str = unescapeQuote(str);
      str = escapeHtmlEntities(str);
      str = escapeDangerHtml5Entities(str);
      str = clearNonPrintableCharacter(str);
      return str;
    }
    /**
     * unescape attribute value
     *
     * @param {String} str
     * @return {String}
     */


    function escapeAttrValue(str) {
      str = escapeQuote(str);
      str = escapeHtml(str);
      return str;
    }
    /**
     * `onIgnoreTag` function for removing all the tags that are not in whitelist
     */


    function onIgnoreTagStripAll() {
      return "";
    }
    /**
     * remove tag body
     * specify a `tags` list, if the tag is not in the `tags` list then process by the specify function (optional)
     *
     * @param {array} tags
     * @param {function} next
     */


    function StripTagBody(tags, next) {
      if (typeof next !== "function") {
        next = function next() {};
      }

      var isRemoveAllTag = !Array.isArray(tags);

      function isRemoveTag(tag) {
        if (isRemoveAllTag) return true;
        return _.indexOf(tags, tag) !== -1;
      }

      var removeList = [];
      var posStart = false;
      return {
        onIgnoreTag: function onIgnoreTag(tag, html, options) {
          if (isRemoveTag(tag)) {
            if (options.isClosing) {
              var ret = "[/removed]";
              var end = options.position + ret.length;
              removeList.push([posStart !== false ? posStart : options.position, end]);
              posStart = false;
              return ret;
            } else {
              if (!posStart) {
                posStart = options.position;
              }

              return "[removed]";
            }
          } else {
            return next(tag, html, options);
          }
        },
        remove: function remove(html) {
          var rethtml = "";
          var lastPos = 0;

          _.forEach(removeList, function (pos) {
            rethtml += html.slice(lastPos, pos[0]);
            lastPos = pos[1];
          });

          rethtml += html.slice(lastPos);
          return rethtml;
        }
      };
    }
    /**
     * remove html comments
     *
     * @param {String} html
     * @return {String}
     */


    function stripCommentTag(html) {
      return html.replace(STRIP_COMMENT_TAG_REGEXP, "");
    }

    var STRIP_COMMENT_TAG_REGEXP = /<!--[\s\S]*?-->/g;
    /**
     * remove invisible characters
     *
     * @param {String} html
     * @return {String}
     */

    function stripBlankChar(html) {
      var chars = html.split("");
      chars = chars.filter(function (_char) {
        var c = _char.charCodeAt(0);

        if (c === 127) return false;

        if (c <= 31) {
          if (c === 10 || c === 13) return true;
          return false;
        }

        return true;
      });
      return chars.join("");
    }

    exports.whiteList = getDefaultWhiteList();
    exports.getDefaultWhiteList = getDefaultWhiteList;
    exports.onTag = onTag;
    exports.onIgnoreTag = onIgnoreTag;
    exports.onTagAttr = onTagAttr;
    exports.onIgnoreTagAttr = onIgnoreTagAttr;
    exports.safeAttrValue = safeAttrValue;
    exports.escapeHtml = escapeHtml;
    exports.escapeQuote = escapeQuote;
    exports.unescapeQuote = unescapeQuote;
    exports.escapeHtmlEntities = escapeHtmlEntities;
    exports.escapeDangerHtml5Entities = escapeDangerHtml5Entities;
    exports.clearNonPrintableCharacter = clearNonPrintableCharacter;
    exports.friendlyAttrValue = friendlyAttrValue;
    exports.escapeAttrValue = escapeAttrValue;
    exports.onIgnoreTagStripAll = onIgnoreTagStripAll;
    exports.StripTagBody = StripTagBody;
    exports.stripCommentTag = stripCommentTag;
    exports.stripBlankChar = stripBlankChar;
    exports.cssFilter = defaultCSSFilter;
    exports.getDefaultCSSWhiteList = getDefaultCSSWhiteList;
  }, {
    "./util": 4,
    "cssfilter": 8
  }],
  2: [function (require, module, exports) {
    /**
     * xss
     *
     * @author Zongmin Lei<leizongmin@gmail.com>
     */
    var DEFAULT = require("./default");

    var parser = require("./parser");

    var FilterXSS = require("./xss");
    /**
     * filter xss function
     *
     * @param {String} html
     * @param {Object} options { whiteList, onTag, onTagAttr, onIgnoreTag, onIgnoreTagAttr, safeAttrValue, escapeHtml }
     * @return {String}
     */


    function filterXSS(html, options) {
      var xss = new FilterXSS(options);
      return xss.process(html);
    }

    exports = module.exports = filterXSS;
    exports.filterXSS = filterXSS;
    exports.FilterXSS = FilterXSS;

    for (var i in DEFAULT) {
      exports[i] = DEFAULT[i];
    }

    for (var i in parser) {
      exports[i] = parser[i];
    } // using `xss` on the browser, output `filterXSS` to the globals


    if (typeof window !== "undefined") {
      window.filterXSS = module.exports;
    } // using `xss` on the WebWorker, output `filterXSS` to the globals


    function isWorkerEnv() {
      return typeof self !== 'undefined' && typeof DedicatedWorkerGlobalScope !== 'undefined' && self instanceof DedicatedWorkerGlobalScope;
    }

    if (isWorkerEnv()) {
      self.filterXSS = module.exports;
    }
  }, {
    "./default": 1,
    "./parser": 3,
    "./xss": 5
  }],
  3: [function (require, module, exports) {
    /**
     * Simple HTML Parser
     *
     * @author Zongmin Lei<leizongmin@gmail.com>
     */
    var _ = require("./util");
    /**
     * get tag name
     *
     * @param {String} html e.g. '<a hef="#">'
     * @return {String}
     */


    function getTagName(html) {
      var i = _.spaceIndex(html);

      if (i === -1) {
        var tagName = html.slice(1, -1);
      } else {
        var tagName = html.slice(1, i + 1);
      }

      tagName = _.trim(tagName).toLowerCase();
      if (tagName.slice(0, 1) === "/") tagName = tagName.slice(1);
      if (tagName.slice(-1) === "/") tagName = tagName.slice(0, -1);
      return tagName;
    }
    /**
     * is close tag?
     *
     * @param {String} html 如：'<a hef="#">'
     * @return {Boolean}
     */


    function isClosing(html) {
      return html.slice(0, 2) === "</";
    }
    /**
     * parse input html and returns processed html
     *
     * @param {String} html
     * @param {Function} onTag e.g. function (sourcePosition, position, tag, html, isClosing)
     * @param {Function} escapeHtml
     * @return {String}
     */


    function parseTag(html, onTag, escapeHtml) {
      "use strict";

      var rethtml = "";
      var lastPos = 0;
      var tagStart = false;
      var quoteStart = false;
      var currentPos = 0;
      var len = html.length;
      var currentTagName = "";
      var currentHtml = "";

      for (currentPos = 0; currentPos < len; currentPos++) {
        var c = html.charAt(currentPos);

        if (tagStart === false) {
          if (c === "<") {
            tagStart = currentPos;
            continue;
          }
        } else {
          if (quoteStart === false) {
            if (c === "<") {
              rethtml += escapeHtml(html.slice(lastPos, currentPos));
              tagStart = currentPos;
              lastPos = currentPos;
              continue;
            }

            if (c === ">") {
              rethtml += escapeHtml(html.slice(lastPos, tagStart));
              currentHtml = html.slice(tagStart, currentPos + 1);
              currentTagName = getTagName(currentHtml);
              rethtml += onTag(tagStart, rethtml.length, currentTagName, currentHtml, isClosing(currentHtml));
              lastPos = currentPos + 1;
              tagStart = false;
              continue;
            }

            if ((c === '"' || c === "'") && html.charAt(currentPos - 1) === "=") {
              quoteStart = c;
              continue;
            }
          } else {
            if (c === quoteStart) {
              quoteStart = false;
              continue;
            }
          }
        }
      }

      if (lastPos < html.length) {
        rethtml += escapeHtml(html.substr(lastPos));
      }

      return rethtml;
    }

    var REGEXP_ILLEGAL_ATTR_NAME = /[^a-zA-Z0-9_:\.\-]/gim;
    /**
     * parse input attributes and returns processed attributes
     *
     * @param {String} html e.g. `href="#" target="_blank"`
     * @param {Function} onAttr e.g. `function (name, value)`
     * @return {String}
     */

    function parseAttr(html, onAttr) {
      "use strict";

      var lastPos = 0;
      var retAttrs = [];
      var tmpName = false;
      var len = html.length;

      function addAttr(name, value) {
        name = _.trim(name);
        name = name.replace(REGEXP_ILLEGAL_ATTR_NAME, "").toLowerCase();
        if (name.length < 1) return;
        var ret = onAttr(name, value || "");
        if (ret) retAttrs.push(ret);
      } // 逐个分析字符


      for (var i = 0; i < len; i++) {
        var c = html.charAt(i);
        var v, j;

        if (tmpName === false && c === "=") {
          tmpName = html.slice(lastPos, i);
          lastPos = i + 1;
          continue;
        }

        if (tmpName !== false) {
          if (i === lastPos && (c === '"' || c === "'") && html.charAt(i - 1) === "=") {
            j = html.indexOf(c, i + 1);

            if (j === -1) {
              break;
            } else {
              v = _.trim(html.slice(lastPos + 1, j));
              addAttr(tmpName, v);
              tmpName = false;
              i = j;
              lastPos = i + 1;
              continue;
            }
          }
        }

        if (/\s|\n|\t/.test(c)) {
          html = html.replace(/\s|\n|\t/g, " ");

          if (tmpName === false) {
            j = findNextEqual(html, i);

            if (j === -1) {
              v = _.trim(html.slice(lastPos, i));
              addAttr(v);
              tmpName = false;
              lastPos = i + 1;
              continue;
            } else {
              i = j - 1;
              continue;
            }
          } else {
            j = findBeforeEqual(html, i - 1);

            if (j === -1) {
              v = _.trim(html.slice(lastPos, i));
              v = stripQuoteWrap(v);
              addAttr(tmpName, v);
              tmpName = false;
              lastPos = i + 1;
              continue;
            } else {
              continue;
            }
          }
        }
      }

      if (lastPos < html.length) {
        if (tmpName === false) {
          addAttr(html.slice(lastPos));
        } else {
          addAttr(tmpName, stripQuoteWrap(_.trim(html.slice(lastPos))));
        }
      }

      return _.trim(retAttrs.join(" "));
    }

    function findNextEqual(str, i) {
      for (; i < str.length; i++) {
        var c = str[i];
        if (c === " ") continue;
        if (c === "=") return i;
        return -1;
      }
    }

    function findBeforeEqual(str, i) {
      for (; i > 0; i--) {
        var c = str[i];
        if (c === " ") continue;
        if (c === "=") return i;
        return -1;
      }
    }

    function isQuoteWrapString(text) {
      if (text[0] === '"' && text[text.length - 1] === '"' || text[0] === "'" && text[text.length - 1] === "'") {
        return true;
      } else {
        return false;
      }
    }

    function stripQuoteWrap(text) {
      if (isQuoteWrapString(text)) {
        return text.substr(1, text.length - 2);
      } else {
        return text;
      }
    }

    exports.parseTag = parseTag;
    exports.parseAttr = parseAttr;
  }, {
    "./util": 4
  }],
  4: [function (require, module, exports) {
    module.exports = {
      indexOf: function indexOf(arr, item) {
        var i, j;

        if (Array.prototype.indexOf) {
          return arr.indexOf(item);
        }

        for (i = 0, j = arr.length; i < j; i++) {
          if (arr[i] === item) {
            return i;
          }
        }

        return -1;
      },
      forEach: function forEach(arr, fn, scope) {
        var i, j;

        if (Array.prototype.forEach) {
          return arr.forEach(fn, scope);
        }

        for (i = 0, j = arr.length; i < j; i++) {
          fn.call(scope, arr[i], i, arr);
        }
      },
      trim: function trim(str) {
        if (String.prototype.trim) {
          return str.trim();
        }

        return str.replace(/(^\s*)|(\s*$)/g, "");
      },
      spaceIndex: function spaceIndex(str) {
        var reg = /\s|\n|\t/;
        var match = reg.exec(str);
        return match ? match.index : -1;
      }
    };
  }, {}],
  5: [function (require, module, exports) {
    /**
     * filter xss
     *
     * @author Zongmin Lei<leizongmin@gmail.com>
     */
    var FilterCSS = require("cssfilter").FilterCSS;

    var DEFAULT = require("./default");

    var parser = require("./parser");

    var parseTag = parser.parseTag;
    var parseAttr = parser.parseAttr;

    var _ = require("./util");
    /**
     * returns `true` if the input value is `undefined` or `null`
     *
     * @param {Object} obj
     * @return {Boolean}
     */


    function isNull(obj) {
      return obj === undefined || obj === null;
    }
    /**
     * get attributes for a tag
     *
     * @param {String} html
     * @return {Object}
     *   - {String} html
     *   - {Boolean} closing
     */


    function getAttrs(html) {
      var i = _.spaceIndex(html);

      if (i === -1) {
        return {
          html: "",
          closing: html[html.length - 2] === "/"
        };
      }

      html = _.trim(html.slice(i + 1, -1));
      var isClosing = html[html.length - 1] === "/";
      if (isClosing) html = _.trim(html.slice(0, -1));
      return {
        html: html,
        closing: isClosing
      };
    }
    /**
     * shallow copy
     *
     * @param {Object} obj
     * @return {Object}
     */


    function shallowCopyObject(obj) {
      var ret = {};

      for (var i in obj) {
        ret[i] = obj[i];
      }

      return ret;
    }
    /**
     * FilterXSS class
     *
     * @param {Object} options
     *        whiteList, onTag, onTagAttr, onIgnoreTag,
     *        onIgnoreTagAttr, safeAttrValue, escapeHtml
     *        stripIgnoreTagBody, allowCommentTag, stripBlankChar
     *        css{whiteList, onAttr, onIgnoreAttr} `css=false` means don't use `cssfilter`
     */


    function FilterXSS(options) {
      options = shallowCopyObject(options || {});

      if (options.stripIgnoreTag) {
        if (options.onIgnoreTag) {
          console.error('Notes: cannot use these two options "stripIgnoreTag" and "onIgnoreTag" at the same time');
        }

        options.onIgnoreTag = DEFAULT.onIgnoreTagStripAll;
      }

      options.whiteList = options.whiteList || DEFAULT.whiteList;
      options.onTag = options.onTag || DEFAULT.onTag;
      options.onTagAttr = options.onTagAttr || DEFAULT.onTagAttr;
      options.onIgnoreTag = options.onIgnoreTag || DEFAULT.onIgnoreTag;
      options.onIgnoreTagAttr = options.onIgnoreTagAttr || DEFAULT.onIgnoreTagAttr;
      options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;
      options.escapeHtml = options.escapeHtml || DEFAULT.escapeHtml;
      this.options = options;

      if (options.css === false) {
        this.cssFilter = false;
      } else {
        options.css = options.css || {};
        this.cssFilter = new FilterCSS(options.css);
      }
    }
    /**
     * start process and returns result
     *
     * @param {String} html
     * @return {String}
     */


    FilterXSS.prototype.process = function (html) {
      // compatible with the input
      html = html || "";
      html = html.toString();
      if (!html) return "";
      var me = this;
      var options = me.options;
      var whiteList = options.whiteList;
      var onTag = options.onTag;
      var onIgnoreTag = options.onIgnoreTag;
      var onTagAttr = options.onTagAttr;
      var onIgnoreTagAttr = options.onIgnoreTagAttr;
      var safeAttrValue = options.safeAttrValue;
      var escapeHtml = options.escapeHtml;
      var cssFilter = me.cssFilter; // remove invisible characters

      if (options.stripBlankChar) {
        html = DEFAULT.stripBlankChar(html);
      } // remove html comments


      if (!options.allowCommentTag) {
        html = DEFAULT.stripCommentTag(html);
      } // if enable stripIgnoreTagBody


      var stripIgnoreTagBody = false;

      if (options.stripIgnoreTagBody) {
        var stripIgnoreTagBody = DEFAULT.StripTagBody(options.stripIgnoreTagBody, onIgnoreTag);
        onIgnoreTag = stripIgnoreTagBody.onIgnoreTag;
      }

      var retHtml = parseTag(html, function (sourcePosition, position, tag, html, isClosing) {
        var info = {
          sourcePosition: sourcePosition,
          position: position,
          isClosing: isClosing,
          isWhite: whiteList.hasOwnProperty(tag)
        }; // call `onTag()`

        var ret = onTag(tag, html, info);
        if (!isNull(ret)) return ret;

        if (info.isWhite) {
          if (info.isClosing) {
            return "</" + tag + ">";
          }

          var attrs = getAttrs(html);
          var whiteAttrList = whiteList[tag];
          var attrsHtml = parseAttr(attrs.html, function (name, value) {
            // call `onTagAttr()`
            var isWhiteAttr = _.indexOf(whiteAttrList, name) !== -1;
            var ret = onTagAttr(tag, name, value, isWhiteAttr);
            if (!isNull(ret)) return ret;

            if (isWhiteAttr) {
              // call `safeAttrValue()`
              value = safeAttrValue(tag, name, value, cssFilter);

              if (value) {
                return name + '="' + value + '"';
              } else {
                return name;
              }
            } else {
              // call `onIgnoreTagAttr()`
              var ret = onIgnoreTagAttr(tag, name, value, isWhiteAttr);
              if (!isNull(ret)) return ret;
              return;
            }
          }); // build new tag html

          var html = "<" + tag;
          if (attrsHtml) html += " " + attrsHtml;
          if (attrs.closing) html += " /";
          html += ">";
          return html;
        } else {
          // call `onIgnoreTag()`
          var ret = onIgnoreTag(tag, html, info);
          if (!isNull(ret)) return ret;
          return escapeHtml(html);
        }
      }, escapeHtml); // if enable stripIgnoreTagBody

      if (stripIgnoreTagBody) {
        retHtml = stripIgnoreTagBody.remove(retHtml);
      }

      return retHtml;
    };

    module.exports = FilterXSS;
  }, {
    "./default": 1,
    "./parser": 3,
    "./util": 4,
    "cssfilter": 8
  }],
  6: [function (require, module, exports) {
    /**
     * cssfilter
     *
     * @author 老雷<leizongmin@gmail.com>
     */
    var DEFAULT = require('./default');

    var parseStyle = require('./parser');

    var _ = require('./util');
    /**
     * 返回值是否为空
     *
     * @param {Object} obj
     * @return {Boolean}
     */


    function isNull(obj) {
      return obj === undefined || obj === null;
    }
    /**
     * 浅拷贝对象
     *
     * @param {Object} obj
     * @return {Object}
     */


    function shallowCopyObject(obj) {
      var ret = {};

      for (var i in obj) {
        ret[i] = obj[i];
      }

      return ret;
    }
    /**
     * 创建CSS过滤器
     *
     * @param {Object} options
     *   - {Object} whiteList
     *   - {Function} onAttr
     *   - {Function} onIgnoreAttr
     *   - {Function} safeAttrValue
     */


    function FilterCSS(options) {
      options = shallowCopyObject(options || {});
      options.whiteList = options.whiteList || DEFAULT.whiteList;
      options.onAttr = options.onAttr || DEFAULT.onAttr;
      options.onIgnoreAttr = options.onIgnoreAttr || DEFAULT.onIgnoreAttr;
      options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;
      this.options = options;
    }

    FilterCSS.prototype.process = function (css) {
      // 兼容各种奇葩输入
      css = css || '';
      css = css.toString();
      if (!css) return '';
      var me = this;
      var options = me.options;
      var whiteList = options.whiteList;
      var onAttr = options.onAttr;
      var onIgnoreAttr = options.onIgnoreAttr;
      var safeAttrValue = options.safeAttrValue;
      var retCSS = parseStyle(css, function (sourcePosition, position, name, value, source) {
        var check = whiteList[name];
        var isWhite = false;
        if (check === true) isWhite = check;else if (typeof check === 'function') isWhite = check(value);else if (check instanceof RegExp) isWhite = check.test(value);
        if (isWhite !== true) isWhite = false; // 如果过滤后 value 为空则直接忽略

        value = safeAttrValue(name, value);
        if (!value) return;
        var opts = {
          position: position,
          sourcePosition: sourcePosition,
          source: source,
          isWhite: isWhite
        };

        if (isWhite) {
          var ret = onAttr(name, value, opts);

          if (isNull(ret)) {
            return name + ':' + value;
          } else {
            return ret;
          }
        } else {
          var ret = onIgnoreAttr(name, value, opts);

          if (!isNull(ret)) {
            return ret;
          }
        }
      });
      return retCSS;
    };

    module.exports = FilterCSS;
  }, {
    "./default": 7,
    "./parser": 9,
    "./util": 10
  }],
  7: [function (require, module, exports) {
    /**
     * cssfilter
     *
     * @author 老雷<leizongmin@gmail.com>
     */
    function getDefaultWhiteList() {
      // 白名单值说明：
      // true: 允许该属性
      // Function: function (val) { } 返回true表示允许该属性，其他值均表示不允许
      // RegExp: regexp.test(val) 返回true表示允许该属性，其他值均表示不允许
      // 除上面列出的值外均表示不允许
      var whiteList = {};
      whiteList['align-content'] = false; // default: auto

      whiteList['align-items'] = false; // default: auto

      whiteList['align-self'] = false; // default: auto

      whiteList['alignment-adjust'] = false; // default: auto

      whiteList['alignment-baseline'] = false; // default: baseline

      whiteList['all'] = false; // default: depending on individual properties

      whiteList['anchor-point'] = false; // default: none

      whiteList['animation'] = false; // default: depending on individual properties

      whiteList['animation-delay'] = false; // default: 0

      whiteList['animation-direction'] = false; // default: normal

      whiteList['animation-duration'] = false; // default: 0

      whiteList['animation-fill-mode'] = false; // default: none

      whiteList['animation-iteration-count'] = false; // default: 1

      whiteList['animation-name'] = false; // default: none

      whiteList['animation-play-state'] = false; // default: running

      whiteList['animation-timing-function'] = false; // default: ease

      whiteList['azimuth'] = false; // default: center

      whiteList['backface-visibility'] = false; // default: visible

      whiteList['background'] = true; // default: depending on individual properties

      whiteList['background-attachment'] = true; // default: scroll

      whiteList['background-clip'] = true; // default: border-box

      whiteList['background-color'] = true; // default: transparent

      whiteList['background-image'] = true; // default: none

      whiteList['background-origin'] = true; // default: padding-box

      whiteList['background-position'] = true; // default: 0% 0%

      whiteList['background-repeat'] = true; // default: repeat

      whiteList['background-size'] = true; // default: auto

      whiteList['baseline-shift'] = false; // default: baseline

      whiteList['binding'] = false; // default: none

      whiteList['bleed'] = false; // default: 6pt

      whiteList['bookmark-label'] = false; // default: content()

      whiteList['bookmark-level'] = false; // default: none

      whiteList['bookmark-state'] = false; // default: open

      whiteList['border'] = true; // default: depending on individual properties

      whiteList['border-bottom'] = true; // default: depending on individual properties

      whiteList['border-bottom-color'] = true; // default: current color

      whiteList['border-bottom-left-radius'] = true; // default: 0

      whiteList['border-bottom-right-radius'] = true; // default: 0

      whiteList['border-bottom-style'] = true; // default: none

      whiteList['border-bottom-width'] = true; // default: medium

      whiteList['border-collapse'] = true; // default: separate

      whiteList['border-color'] = true; // default: depending on individual properties

      whiteList['border-image'] = true; // default: none

      whiteList['border-image-outset'] = true; // default: 0

      whiteList['border-image-repeat'] = true; // default: stretch

      whiteList['border-image-slice'] = true; // default: 100%

      whiteList['border-image-source'] = true; // default: none

      whiteList['border-image-width'] = true; // default: 1

      whiteList['border-left'] = true; // default: depending on individual properties

      whiteList['border-left-color'] = true; // default: current color

      whiteList['border-left-style'] = true; // default: none

      whiteList['border-left-width'] = true; // default: medium

      whiteList['border-radius'] = true; // default: 0

      whiteList['border-right'] = true; // default: depending on individual properties

      whiteList['border-right-color'] = true; // default: current color

      whiteList['border-right-style'] = true; // default: none

      whiteList['border-right-width'] = true; // default: medium

      whiteList['border-spacing'] = true; // default: 0

      whiteList['border-style'] = true; // default: depending on individual properties

      whiteList['border-top'] = true; // default: depending on individual properties

      whiteList['border-top-color'] = true; // default: current color

      whiteList['border-top-left-radius'] = true; // default: 0

      whiteList['border-top-right-radius'] = true; // default: 0

      whiteList['border-top-style'] = true; // default: none

      whiteList['border-top-width'] = true; // default: medium

      whiteList['border-width'] = true; // default: depending on individual properties

      whiteList['bottom'] = false; // default: auto

      whiteList['box-decoration-break'] = true; // default: slice

      whiteList['box-shadow'] = true; // default: none

      whiteList['box-sizing'] = true; // default: content-box

      whiteList['box-snap'] = true; // default: none

      whiteList['box-suppress'] = true; // default: show

      whiteList['break-after'] = true; // default: auto

      whiteList['break-before'] = true; // default: auto

      whiteList['break-inside'] = true; // default: auto

      whiteList['caption-side'] = false; // default: top

      whiteList['chains'] = false; // default: none

      whiteList['clear'] = true; // default: none

      whiteList['clip'] = false; // default: auto

      whiteList['clip-path'] = false; // default: none

      whiteList['clip-rule'] = false; // default: nonzero

      whiteList['color'] = true; // default: implementation dependent

      whiteList['color-interpolation-filters'] = true; // default: auto

      whiteList['column-count'] = false; // default: auto

      whiteList['column-fill'] = false; // default: balance

      whiteList['column-gap'] = false; // default: normal

      whiteList['column-rule'] = false; // default: depending on individual properties

      whiteList['column-rule-color'] = false; // default: current color

      whiteList['column-rule-style'] = false; // default: medium

      whiteList['column-rule-width'] = false; // default: medium

      whiteList['column-span'] = false; // default: none

      whiteList['column-width'] = false; // default: auto

      whiteList['columns'] = false; // default: depending on individual properties

      whiteList['contain'] = false; // default: none

      whiteList['content'] = false; // default: normal

      whiteList['counter-increment'] = false; // default: none

      whiteList['counter-reset'] = false; // default: none

      whiteList['counter-set'] = false; // default: none

      whiteList['crop'] = false; // default: auto

      whiteList['cue'] = false; // default: depending on individual properties

      whiteList['cue-after'] = false; // default: none

      whiteList['cue-before'] = false; // default: none

      whiteList['cursor'] = false; // default: auto

      whiteList['direction'] = false; // default: ltr

      whiteList['display'] = true; // default: depending on individual properties

      whiteList['display-inside'] = true; // default: auto

      whiteList['display-list'] = true; // default: none

      whiteList['display-outside'] = true; // default: inline-level

      whiteList['dominant-baseline'] = false; // default: auto

      whiteList['elevation'] = false; // default: level

      whiteList['empty-cells'] = false; // default: show

      whiteList['filter'] = false; // default: none

      whiteList['flex'] = false; // default: depending on individual properties

      whiteList['flex-basis'] = false; // default: auto

      whiteList['flex-direction'] = false; // default: row

      whiteList['flex-flow'] = false; // default: depending on individual properties

      whiteList['flex-grow'] = false; // default: 0

      whiteList['flex-shrink'] = false; // default: 1

      whiteList['flex-wrap'] = false; // default: nowrap

      whiteList['float'] = false; // default: none

      whiteList['float-offset'] = false; // default: 0 0

      whiteList['flood-color'] = false; // default: black

      whiteList['flood-opacity'] = false; // default: 1

      whiteList['flow-from'] = false; // default: none

      whiteList['flow-into'] = false; // default: none

      whiteList['font'] = true; // default: depending on individual properties

      whiteList['font-family'] = true; // default: implementation dependent

      whiteList['font-feature-settings'] = true; // default: normal

      whiteList['font-kerning'] = true; // default: auto

      whiteList['font-language-override'] = true; // default: normal

      whiteList['font-size'] = true; // default: medium

      whiteList['font-size-adjust'] = true; // default: none

      whiteList['font-stretch'] = true; // default: normal

      whiteList['font-style'] = true; // default: normal

      whiteList['font-synthesis'] = true; // default: weight style

      whiteList['font-variant'] = true; // default: normal

      whiteList['font-variant-alternates'] = true; // default: normal

      whiteList['font-variant-caps'] = true; // default: normal

      whiteList['font-variant-east-asian'] = true; // default: normal

      whiteList['font-variant-ligatures'] = true; // default: normal

      whiteList['font-variant-numeric'] = true; // default: normal

      whiteList['font-variant-position'] = true; // default: normal

      whiteList['font-weight'] = true; // default: normal

      whiteList['grid'] = false; // default: depending on individual properties

      whiteList['grid-area'] = false; // default: depending on individual properties

      whiteList['grid-auto-columns'] = false; // default: auto

      whiteList['grid-auto-flow'] = false; // default: none

      whiteList['grid-auto-rows'] = false; // default: auto

      whiteList['grid-column'] = false; // default: depending on individual properties

      whiteList['grid-column-end'] = false; // default: auto

      whiteList['grid-column-start'] = false; // default: auto

      whiteList['grid-row'] = false; // default: depending on individual properties

      whiteList['grid-row-end'] = false; // default: auto

      whiteList['grid-row-start'] = false; // default: auto

      whiteList['grid-template'] = false; // default: depending on individual properties

      whiteList['grid-template-areas'] = false; // default: none

      whiteList['grid-template-columns'] = false; // default: none

      whiteList['grid-template-rows'] = false; // default: none

      whiteList['hanging-punctuation'] = false; // default: none

      whiteList['height'] = true; // default: auto

      whiteList['hyphens'] = false; // default: manual

      whiteList['icon'] = false; // default: auto

      whiteList['image-orientation'] = false; // default: auto

      whiteList['image-resolution'] = false; // default: normal

      whiteList['ime-mode'] = false; // default: auto

      whiteList['initial-letters'] = false; // default: normal

      whiteList['inline-box-align'] = false; // default: last

      whiteList['justify-content'] = false; // default: auto

      whiteList['justify-items'] = false; // default: auto

      whiteList['justify-self'] = false; // default: auto

      whiteList['left'] = false; // default: auto

      whiteList['letter-spacing'] = true; // default: normal

      whiteList['lighting-color'] = true; // default: white

      whiteList['line-box-contain'] = false; // default: block inline replaced

      whiteList['line-break'] = false; // default: auto

      whiteList['line-grid'] = false; // default: match-parent

      whiteList['line-height'] = false; // default: normal

      whiteList['line-snap'] = false; // default: none

      whiteList['line-stacking'] = false; // default: depending on individual properties

      whiteList['line-stacking-ruby'] = false; // default: exclude-ruby

      whiteList['line-stacking-shift'] = false; // default: consider-shifts

      whiteList['line-stacking-strategy'] = false; // default: inline-line-height

      whiteList['list-style'] = true; // default: depending on individual properties

      whiteList['list-style-image'] = true; // default: none

      whiteList['list-style-position'] = true; // default: outside

      whiteList['list-style-type'] = true; // default: disc

      whiteList['margin'] = true; // default: depending on individual properties

      whiteList['margin-bottom'] = true; // default: 0

      whiteList['margin-left'] = true; // default: 0

      whiteList['margin-right'] = true; // default: 0

      whiteList['margin-top'] = true; // default: 0

      whiteList['marker-offset'] = false; // default: auto

      whiteList['marker-side'] = false; // default: list-item

      whiteList['marks'] = false; // default: none

      whiteList['mask'] = false; // default: border-box

      whiteList['mask-box'] = false; // default: see individual properties

      whiteList['mask-box-outset'] = false; // default: 0

      whiteList['mask-box-repeat'] = false; // default: stretch

      whiteList['mask-box-slice'] = false; // default: 0 fill

      whiteList['mask-box-source'] = false; // default: none

      whiteList['mask-box-width'] = false; // default: auto

      whiteList['mask-clip'] = false; // default: border-box

      whiteList['mask-image'] = false; // default: none

      whiteList['mask-origin'] = false; // default: border-box

      whiteList['mask-position'] = false; // default: center

      whiteList['mask-repeat'] = false; // default: no-repeat

      whiteList['mask-size'] = false; // default: border-box

      whiteList['mask-source-type'] = false; // default: auto

      whiteList['mask-type'] = false; // default: luminance

      whiteList['max-height'] = true; // default: none

      whiteList['max-lines'] = false; // default: none

      whiteList['max-width'] = true; // default: none

      whiteList['min-height'] = true; // default: 0

      whiteList['min-width'] = true; // default: 0

      whiteList['move-to'] = false; // default: normal

      whiteList['nav-down'] = false; // default: auto

      whiteList['nav-index'] = false; // default: auto

      whiteList['nav-left'] = false; // default: auto

      whiteList['nav-right'] = false; // default: auto

      whiteList['nav-up'] = false; // default: auto

      whiteList['object-fit'] = false; // default: fill

      whiteList['object-position'] = false; // default: 50% 50%

      whiteList['opacity'] = false; // default: 1

      whiteList['order'] = false; // default: 0

      whiteList['orphans'] = false; // default: 2

      whiteList['outline'] = false; // default: depending on individual properties

      whiteList['outline-color'] = false; // default: invert

      whiteList['outline-offset'] = false; // default: 0

      whiteList['outline-style'] = false; // default: none

      whiteList['outline-width'] = false; // default: medium

      whiteList['overflow'] = false; // default: depending on individual properties

      whiteList['overflow-wrap'] = false; // default: normal

      whiteList['overflow-x'] = false; // default: visible

      whiteList['overflow-y'] = false; // default: visible

      whiteList['padding'] = true; // default: depending on individual properties

      whiteList['padding-bottom'] = true; // default: 0

      whiteList['padding-left'] = true; // default: 0

      whiteList['padding-right'] = true; // default: 0

      whiteList['padding-top'] = true; // default: 0

      whiteList['page'] = false; // default: auto

      whiteList['page-break-after'] = false; // default: auto

      whiteList['page-break-before'] = false; // default: auto

      whiteList['page-break-inside'] = false; // default: auto

      whiteList['page-policy'] = false; // default: start

      whiteList['pause'] = false; // default: implementation dependent

      whiteList['pause-after'] = false; // default: implementation dependent

      whiteList['pause-before'] = false; // default: implementation dependent

      whiteList['perspective'] = false; // default: none

      whiteList['perspective-origin'] = false; // default: 50% 50%

      whiteList['pitch'] = false; // default: medium

      whiteList['pitch-range'] = false; // default: 50

      whiteList['play-during'] = false; // default: auto

      whiteList['position'] = false; // default: static

      whiteList['presentation-level'] = false; // default: 0

      whiteList['quotes'] = false; // default: text

      whiteList['region-fragment'] = false; // default: auto

      whiteList['resize'] = false; // default: none

      whiteList['rest'] = false; // default: depending on individual properties

      whiteList['rest-after'] = false; // default: none

      whiteList['rest-before'] = false; // default: none

      whiteList['richness'] = false; // default: 50

      whiteList['right'] = false; // default: auto

      whiteList['rotation'] = false; // default: 0

      whiteList['rotation-point'] = false; // default: 50% 50%

      whiteList['ruby-align'] = false; // default: auto

      whiteList['ruby-merge'] = false; // default: separate

      whiteList['ruby-position'] = false; // default: before

      whiteList['shape-image-threshold'] = false; // default: 0.0

      whiteList['shape-outside'] = false; // default: none

      whiteList['shape-margin'] = false; // default: 0

      whiteList['size'] = false; // default: auto

      whiteList['speak'] = false; // default: auto

      whiteList['speak-as'] = false; // default: normal

      whiteList['speak-header'] = false; // default: once

      whiteList['speak-numeral'] = false; // default: continuous

      whiteList['speak-punctuation'] = false; // default: none

      whiteList['speech-rate'] = false; // default: medium

      whiteList['stress'] = false; // default: 50

      whiteList['string-set'] = false; // default: none

      whiteList['tab-size'] = false; // default: 8

      whiteList['table-layout'] = false; // default: auto

      whiteList['text-align'] = true; // default: start

      whiteList['text-align-last'] = true; // default: auto

      whiteList['text-combine-upright'] = true; // default: none

      whiteList['text-decoration'] = true; // default: none

      whiteList['text-decoration-color'] = true; // default: currentColor

      whiteList['text-decoration-line'] = true; // default: none

      whiteList['text-decoration-skip'] = true; // default: objects

      whiteList['text-decoration-style'] = true; // default: solid

      whiteList['text-emphasis'] = true; // default: depending on individual properties

      whiteList['text-emphasis-color'] = true; // default: currentColor

      whiteList['text-emphasis-position'] = true; // default: over right

      whiteList['text-emphasis-style'] = true; // default: none

      whiteList['text-height'] = true; // default: auto

      whiteList['text-indent'] = true; // default: 0

      whiteList['text-justify'] = true; // default: auto

      whiteList['text-orientation'] = true; // default: mixed

      whiteList['text-overflow'] = true; // default: clip

      whiteList['text-shadow'] = true; // default: none

      whiteList['text-space-collapse'] = true; // default: collapse

      whiteList['text-transform'] = true; // default: none

      whiteList['text-underline-position'] = true; // default: auto

      whiteList['text-wrap'] = true; // default: normal

      whiteList['top'] = false; // default: auto

      whiteList['transform'] = false; // default: none

      whiteList['transform-origin'] = false; // default: 50% 50% 0

      whiteList['transform-style'] = false; // default: flat

      whiteList['transition'] = false; // default: depending on individual properties

      whiteList['transition-delay'] = false; // default: 0s

      whiteList['transition-duration'] = false; // default: 0s

      whiteList['transition-property'] = false; // default: all

      whiteList['transition-timing-function'] = false; // default: ease

      whiteList['unicode-bidi'] = false; // default: normal

      whiteList['vertical-align'] = false; // default: baseline

      whiteList['visibility'] = false; // default: visible

      whiteList['voice-balance'] = false; // default: center

      whiteList['voice-duration'] = false; // default: auto

      whiteList['voice-family'] = false; // default: implementation dependent

      whiteList['voice-pitch'] = false; // default: medium

      whiteList['voice-range'] = false; // default: medium

      whiteList['voice-rate'] = false; // default: normal

      whiteList['voice-stress'] = false; // default: normal

      whiteList['voice-volume'] = false; // default: medium

      whiteList['volume'] = false; // default: medium

      whiteList['white-space'] = false; // default: normal

      whiteList['widows'] = false; // default: 2

      whiteList['width'] = true; // default: auto

      whiteList['will-change'] = false; // default: auto

      whiteList['word-break'] = true; // default: normal

      whiteList['word-spacing'] = true; // default: normal

      whiteList['word-wrap'] = true; // default: normal

      whiteList['wrap-flow'] = false; // default: auto

      whiteList['wrap-through'] = false; // default: wrap

      whiteList['writing-mode'] = false; // default: horizontal-tb

      whiteList['z-index'] = false; // default: auto

      return whiteList;
    }
    /**
     * 匹配到白名单上的一个属性时
     *
     * @param {String} name
     * @param {String} value
     * @param {Object} options
     * @return {String}
     */


    function onAttr(name, value, options) {} // do nothing

    /**
     * 匹配到不在白名单上的一个属性时
     *
     * @param {String} name
     * @param {String} value
     * @param {Object} options
     * @return {String}
     */


    function onIgnoreAttr(name, value, options) {// do nothing
    }

    var REGEXP_URL_JAVASCRIPT = /javascript\s*\:/img;
    /**
     * 过滤属性值
     *
     * @param {String} name
     * @param {String} value
     * @return {String}
     */

    function safeAttrValue(name, value) {
      if (REGEXP_URL_JAVASCRIPT.test(value)) return '';
      return value;
    }

    exports.whiteList = getDefaultWhiteList();
    exports.getDefaultWhiteList = getDefaultWhiteList;
    exports.onAttr = onAttr;
    exports.onIgnoreAttr = onIgnoreAttr;
    exports.safeAttrValue = safeAttrValue;
  }, {}],
  8: [function (require, module, exports) {
    /**
     * cssfilter
     *
     * @author 老雷<leizongmin@gmail.com>
     */
    var DEFAULT = require('./default');

    var FilterCSS = require('./css');
    /**
     * XSS过滤
     *
     * @param {String} css 要过滤的CSS代码
     * @param {Object} options 选项：whiteList, onAttr, onIgnoreAttr
     * @return {String}
     */


    function filterCSS(html, options) {
      var xss = new FilterCSS(options);
      return xss.process(html);
    } // 输出


    exports = module.exports = filterCSS;
    exports.FilterCSS = FilterCSS;

    for (var i in DEFAULT) {
      exports[i] = DEFAULT[i];
    } // 在浏览器端使用


    if (typeof window !== 'undefined') {
      window.filterCSS = module.exports;
    }
  }, {
    "./css": 6,
    "./default": 7
  }],
  9: [function (require, module, exports) {
    /**
     * cssfilter
     *
     * @author 老雷<leizongmin@gmail.com>
     */
    var _ = require('./util');
    /**
     * 解析style
     *
     * @param {String} css
     * @param {Function} onAttr 处理属性的函数
     *   参数格式： function (sourcePosition, position, name, value, source)
     * @return {String}
     */


    function parseStyle(css, onAttr) {
      css = _.trimRight(css);
      if (css[css.length - 1] !== ';') css += ';';
      var cssLength = css.length;
      var isParenthesisOpen = false;
      var lastPos = 0;
      var i = 0;
      var retCSS = '';

      function addNewAttr() {
        // 如果没有正常的闭合圆括号，则直接忽略当前属性
        if (!isParenthesisOpen) {
          var source = _.trim(css.slice(lastPos, i));

          var j = source.indexOf(':');

          if (j !== -1) {
            var name = _.trim(source.slice(0, j));

            var value = _.trim(source.slice(j + 1)); // 必须有属性名称


            if (name) {
              var ret = onAttr(lastPos, retCSS.length, name, value, source);
              if (ret) retCSS += ret + '; ';
            }
          }
        }

        lastPos = i + 1;
      }

      for (; i < cssLength; i++) {
        var c = css[i];

        if (c === '/' && css[i + 1] === '*') {
          // 备注开始
          var j = css.indexOf('*/', i + 2); // 如果没有正常的备注结束，则后面的部分全部跳过

          if (j === -1) break; // 直接将当前位置调到备注结尾，并且初始化状态

          i = j + 1;
          lastPos = i + 1;
          isParenthesisOpen = false;
        } else if (c === '(') {
          isParenthesisOpen = true;
        } else if (c === ')') {
          isParenthesisOpen = false;
        } else if (c === ';') {
          if (isParenthesisOpen) {// 在圆括号里面，忽略
          } else {
            addNewAttr();
          }
        } else if (c === '\n') {
          addNewAttr();
        }
      }

      return _.trim(retCSS);
    }

    module.exports = parseStyle;
  }, {
    "./util": 10
  }],
  10: [function (require, module, exports) {
    module.exports = {
      indexOf: function indexOf(arr, item) {
        var i, j;

        if (Array.prototype.indexOf) {
          return arr.indexOf(item);
        }

        for (i = 0, j = arr.length; i < j; i++) {
          if (arr[i] === item) {
            return i;
          }
        }

        return -1;
      },
      forEach: function forEach(arr, fn, scope) {
        var i, j;

        if (Array.prototype.forEach) {
          return arr.forEach(fn, scope);
        }

        for (i = 0, j = arr.length; i < j; i++) {
          fn.call(scope, arr[i], i, arr);
        }
      },
      trim: function trim(str) {
        if (String.prototype.trim) {
          return str.trim();
        }

        return str.replace(/(^\s*)|(\s*$)/g, '');
      },
      trimRight: function trimRight(str) {
        if (String.prototype.trimRight) {
          return str.trimRight();
        }

        return str.replace(/(\s*$)/g, '');
      }
    };
  }, {}]
}, {}, [2]);

/***/ }),
/* 3 */
/***/ (function(module, exports) {

/**
 * Helper functions used in other JS files in the ../custom folder
 */
var recaptchaKey;

window.helper = function () {
  // Find a parent of the "el" element specified by the "parentSelector" param
  var getParents = function getParents(el, parentSelector) {
    if (parentSelector === undefined) {
      parentSelector = document;
    }

    var parents = [];
    var p = el.parentNode;

    while (p !== parentSelector) {
      var o = p;
      parents.push(o);
      p = o.parentNode;
    }

    parents.push(parentSelector);
    return parents;
  };

  var findAncestor = function findAncestor(el, sel) {
    while ((el = el.parentElement) && !(el.matches || el.matchesSelector).call(el, sel)) {
      ;
    }

    return el;
  };

  var htmlDecode = function htmlDecode(input) {
    var e = document.createElement('textarea');
    e.innerHTML = input; // handle case of empty input

    return e.childNodes.length === 0 ? '' : e.childNodes[0].nodeValue;
  }; // Get full height of an element


  var outerHeight = function outerHeight(el) {
    var height = el.offsetHeight;
    var style = getComputedStyle(el);
    height += parseInt(style.marginBottom) + parseInt(style.marginTop);
    return height;
  }; // Helper function for event listeners bind to scroll events that makes them fire on setTimeout


  var debounce = function debounce(func, wait, immediate) {
    var timeout;
    return function () {
      var context = this;
      var args = arguments;

      var later = function later() {
        timeout = null;
        if (!immediate) func.apply(context, args);
      };

      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) func.apply(context, args);
    };
  }; // Converts string to node


  var createElementFromHTML = function createElementFromHTML(htmlString) {
    var div = document.createElement('div');
    div.innerHTML = htmlString.trim(); // Change this to div.childNodes to support multiple top-level nodes

    return div.firstChild;
  }; // Stores text in a clipboard


  var copyToClipboard = function copyToClipboard(text) {
    var textArea = document.createElement('textarea'); //
    // *** This styling is an extra step which is likely not required. ***
    //
    // Why is it here? To ensure:
    // 1. the element is able to have focus and selection.
    // 2. if element was to flash render it has minimal visual impact.
    // 3. less flakyness with selection and copying which **might** occur if
    //    the textarea element is not visible.
    //
    // The likelihood is the element won't even render, not even a flash,
    // so some of these are just precautions. However in IE the element
    // is visible whilst the popup box asking the user for permission for
    // the web page to copy to the clipboard.
    //
    // Place in top-left corner of screen regardless of scroll position.

    textArea.style.position = 'fixed';
    textArea.style.top = 0;
    textArea.style.left = 0; // Ensure it has a small width and height. Setting to 1px / 1em
    // doesn't work as this gives a negative w/h on some browsers.

    textArea.style.width = '2em';
    textArea.style.height = '2em'; // We don't need padding, reducing the size if it does flash render.

    textArea.style.padding = 0; // Clean up any borders.

    textArea.style.border = 'none';
    textArea.style.outline = 'none';
    textArea.style.boxShadow = 'none'; // Avoid flash of white box if rendered for any reason.

    textArea.style.background = 'transparent';
    textArea.value = text;
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();

    try {
      document.execCommand('copy');
    } catch (err) {
      throw new Error('Oops, unable to copy');
    }

    document.body.removeChild(textArea);
  };

  var evaluateAjaxResponse = function evaluateAjaxResponse(xmlhttp, callback, type) {
    if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {
      try {
        var data;

        if (type === 'json') {
          // Parse JSON if specified in the "type" param
          data = JSON.parse(xmlhttp.responseText);
        } else {
          data = xmlhttp.responseText;
        }

        return callback(data);
      } catch (err) {
        throw new Error(err);
      }
    }
  }; // Ajax GET call


  var ajaxGet = function ajaxGet(url, callback, type) {
    var xmlhttp = new XMLHttpRequest();
    xmlhttp.open('GET', url, true);

    xmlhttp.onreadystatechange = function () {
      return evaluateAjaxResponse(xmlhttp, callback, type);
    };

    return xmlhttp.send();
  }; // Ajax POST call


  var ajaxPost = function ajaxPost(url, requestData, callback, type) {
    var xmlhttp = new XMLHttpRequest();
    xmlhttp.open('POST', url, true);
    xmlhttp.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');

    xmlhttp.onload = function () {
      return evaluateAjaxResponse(xmlhttp, callback, type);
    };

    return xmlhttp.send(JSON.stringify(requestData));
  }; // Get url parameter by its name


  var getParameterByName = function getParameterByName(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[[\]]/g, '\\$&');
    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)');
    var results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
  }; // Get page url and remove query string parameters specified in the params array


  var removeParametersByNames = function removeParametersByNames(params) {
    var url = window.location.href.split('#');
    var hash = url[1] || '';
    var path = url[0].split('?');
    var qString = path.length > 1 ? path[1].split('&') : [];

    for (var i = 0; i < qString.length; i++) {
      var name = qString[i].split('=')[0];

      for (var j = 0; j < params.length; j++) {
        if (name === params[j]) {
          qString.splice(i, 1);
          i--;
        }
      }
    }

    qString = qString.join('&');
    return path[0] + (qString ? '?' + qString : '') + (hash ? '#' + hash : '');
  };

  var replaceUrlParam = function replaceUrlParam(url, paramName, paramValue) {
    if (paramValue == null) {
      paramValue = '';
    }

    var pattern = new RegExp('\\b(' + paramName + '=).*?(&|#|$)');

    if (url.search(pattern) >= 0) {
      return url.replace(pattern, '$1' + paramValue + '$2');
    }

    url = url.replace(/[?#]$/, '');
    return url + (url.indexOf('?') > 0 ? '&' : '?') + paramName + '=' + paramValue;
  }; // Add link tag to page head and make it load and behave as stylesheet


  var addStylesheet = function addStylesheet(url) {
    var link = document.createElement('link');
    link.rel = 'stylesheet';
    link.href = url;
    return document.head.appendChild(link);
  }; // Request stylesheet, append additional font-display property and in-line it in page head


  var loadStylesheet = function loadStylesheet(url) {
    return ajaxGet(url, function (css) {
      css = css.replace(/}/g, 'font-display: swap; }');
      var head = document.getElementsByTagName('head')[0];
      var style = document.createElement('style');
      style.appendChild(document.createTextNode(css));
      head.appendChild(style);
    });
  };

  var decodeHTMLEntities = function decodeHTMLEntities(text) {
    var entities = [['amp', '&'], ['apos', '\''], ['#x27', '\''], ['#x2F', '/'], ['#39', '\''], ['#47', '/'], ['lt', '<'], ['gt', '>'], ['nbsp', ' '], ['quot', '"']];

    for (var i = 0, max = entities.length; i < max; ++i) {
      text = text.replace(new RegExp('&' + entities[i][0] + ';', 'g'), entities[i][1]);
    }

    return text;
  };

  var setCookie = function setCookie(name, value, days) {
    var expires = '';

    if (days) {
      var date = new Date();
      date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
      expires = '; expires=' + date.toUTCString();
    }

    document.cookie = name + '=' + (value || '') + expires + '; path=/';
    return document.cookie;
  };

  var getCookie = function getCookie(name) {
    var nameEQ = name + '=';
    var ca = document.cookie.split(';');

    for (var i = 0; i < ca.length; i++) {
      var c = ca[i];

      while (c.charAt(0) === ' ') {
        c = c.substring(1, c.length);
      }

      if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
    }

    return null;
  };

  var eraseCookie = function eraseCookie(name) {
    document.cookie = name + '=; Max-Age=-99999999;';
    return document.cookie;
  };

  var loadRecaptcha = function loadRecaptcha() {
    var recaptchaElem = document.querySelector('#recaptcha-script');
    recaptchaKey = recaptchaElem.getAttribute('data-site');

    if (recaptchaElem && recaptchaKey) {
      var script = document.createElement('script');
      script.src = 'https://www.google.com/recaptcha/api.js?onload=renderReCaptcha';
      script.setAttribute('data-size', 'compact');
      recaptchaElem.appendChild(script);
    }

    return recaptchaKey;
  };

  var nextUntil = function nextUntil(elem, selector, filter, skip) {
    // matches() polyfill
    if (!Element.prototype.matches) {
      Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
    } // Setup siblings array


    var siblings = []; // Get the next sibling element

    elem = elem.nextElementSibling; // As long as a sibling exists

    while (elem) {
      // If we've reached our match, bail
      if (elem.matches(selector)) break; // If filtering by a selector, check if the sibling matches

      if (filter && !elem.matches(filter)) {
        elem = elem.nextElementSibling;
        continue;
      } // If filtering by a selector, check if the sibling matches


      if (skip && elem.matches(skip)) {
        elem = elem.nextElementSibling;
        continue;
      } // Otherwise, push it to the siblings array


      siblings.push(elem); // Get the next sibling element

      elem = elem.nextElementSibling;
    }

    return siblings;
  };

  return {
    getParents: getParents,
    findAncestor: findAncestor,
    htmlDecode: htmlDecode,
    outerHeight: outerHeight,
    debounce: debounce,
    createElementFromHTML: createElementFromHTML,
    copyToClipboard: copyToClipboard,
    ajaxGet: ajaxGet,
    ajaxPost: ajaxPost,
    getParameterByName: getParameterByName,
    removeParametersByNames: removeParametersByNames,
    replaceUrlParam: replaceUrlParam,
    loadStylesheet: loadStylesheet,
    addStylesheet: addStylesheet,
    decodeHTMLEntities: decodeHTMLEntities,
    setCookie: setCookie,
    getCookie: getCookie,
    eraseCookie: eraseCookie,
    loadRecaptcha: loadRecaptcha,
    nextUntil: nextUntil
  };
}();

window.renderReCaptcha = function () {
  // eslint-disable-line no-unused-vars
  window.grecaptcha.render('g-recaptcha-placeholder', {
    sitekey: recaptchaKey,
    theme: 'light'
  });
};

/***/ }),
/* 4 */
/***/ (function(module, exports) {

/**
 * Shows/hides element with animation when a trigger element is clicked
 * */
(function () {
  // Bind click event to all triggers
  document.querySelectorAll('[data-toggle-trigger]').forEach(function (item) {
    item.addEventListener('click', function (event) {
      event.preventDefault(); // Find target element according to the trigger name

      var toToggle = item.getAttribute('data-toggle-trigger');
      var elemToToggle = document.querySelector("[data-toggle-target=\"".concat(toToggle, "\"]")); // Add/remove class names that show/hide target elements

      if (elemToToggle.classList.contains('toggle-active')) {
        item.classList.remove('trigger-active');
        elemToToggle.classList.remove('toggle-active');
      } else {
        item.classList.add('trigger-active');
        elemToToggle.classList.add('toggle-active'); // In case target contains input, set focus on it

        var input = elemToToggle.querySelector('#nav-search');

        if (input) {
          setTimeout(function () {
            input.focus();
          }, 50);
        }
      }
    });
  });
})();

/***/ }),
/* 5 */
/***/ (function(module, exports) {

/**
 * Article sub-navigation
 */
(function () {
  // On click 2nd level of the sub-navigation make the 3rd level collapse
  var actionOnLevel2 = function actionOnLevel2(event) {
    var isLevel3 = false;
    window.helper.getParents(event.target).forEach(function (item) {
      if (item && item.classList && item.classList.contains('sub-navigation--level-3')) {
        isLevel3 = true;
      }
    });

    if (!isLevel3) {
      event.preventDefault();

      if (event.target.classList.contains('sub-navigation__link--active')) {
        event.target.classList.remove('sub-navigation__link--active');
      } else {
        event.target.classList.add('sub-navigation__link--active');
      }
    }
  };

  var toggleLevel2 = function toggleLevel2() {
    var level2 = document.querySelector('.sub-navigation--level-2');

    if (level2) {
      level2.addEventListener('click', function (event) {
        if (event.target && event.target.classList.contains('sub-navigation__link')) {
          actionOnLevel2(event);
        }
      });
    }
  }; // Make the sub-navigation fixed to top/bottom of the sreen, or to header/footer


  var fixSubNav = function fixSubNav() {
    var subNavigation = document.querySelector('.sub-navigation.sub-navigation--level-1');
    var footer = document.querySelector('.footer');
    var viewportWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    var viewportHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);

    if (viewportWidth >= 768 && subNavigation) {
      var topOffset = (window.pageYOffset || document.scrollTop) - (document.clientTop || 0) || 0;
      var isTop = topOffset <= document.querySelector('.navigation').offsetHeight;
      var bottom = window.innerHeight + window.pageYOffset + window.helper.outerHeight(footer);
      var isBottom = bottom >= document.body.offsetHeight;

      if (isTop) {
        subNavigation.classList.add('sub-navigation--top');
      } else {
        subNavigation.classList.remove('sub-navigation--top');
      }

      if (isBottom) {
        var bottomPosition = viewportHeight - footer.getBoundingClientRect().top;
        subNavigation.style.bottom = "".concat(bottomPosition < 0 ? 0 : bottomPosition, "px");
        subNavigation.classList.add('sub-navigation--bottom');
      } else {
        subNavigation.classList.remove('sub-navigation--bottom');
      }
    }
  };

  toggleLevel2();
  fixSubNav();
  window.addEventListener('scroll', fixSubNav, window.supportsPassive ? {
    passive: true
  } : false);
})();

/***/ }),
/* 6 */
/***/ (function(module, exports) {

(function () {
  var updatePlatformInUrls = function updatePlatformInUrls(platform) {
    var links = document.querySelectorAll('[data-lang]');
    links.forEach(function (item) {
      var href = item.getAttribute('href').split('?');
      var path = href[0];
      var qs = href[1] ? href[1].split('#')[0] : null;
      var hash = href[1] ? href[1].split('#')[1] : null;

      if (qs) {
        qs = qs.split('&');
        qs = qs.map(function (item) {
          if (item.indexOf('tech') === 0) {
            item = 'tech=' + platform;
          }

          return item;
        });
        qs.join('&');
      } else {
        qs = 'tech=' + platform;
      }

      item.setAttribute('href', "".concat(path).concat(qs ? '?' + qs : '').concat(hash ? '#' + hash : ''));
    });
  };

  var highlightSelector = function highlightSelector(articleContent, e) {
    var fixedLabel = document.querySelector('.language-selector__label');
    var textTofixedLabel;
    var bgTofixedLabel;

    if (e) {
      window.helper.setCookie('KCDOCS.preselectedLanguage', e.target.getAttribute('data-platform'));
      articleContent.querySelectorAll('.language-selector__link--active').forEach(function (item) {
        return item.classList.remove('language-selector__link--active');
      });
      articleContent.querySelectorAll("[data-platform=".concat(e.target.getAttribute('data-platform'), "]")).forEach(function (item) {
        return item.classList.add('language-selector__link--active');
      });
      updatePlatformInUrls(e.target.getAttribute('data-slug'));
      textTofixedLabel = e.target.innerHTML;
      bgTofixedLabel = e.target.getAttribute('data-icon');
    } else {
      var preselectedPlatform = window.helper.getCookie('KCDOCS.preselectedLanguage');
      var preselectedElem = document.querySelectorAll("[data-platform=\"".concat(preselectedPlatform, "\"]"));

      if (preselectedPlatform && preselectedElem.length) {
        preselectedElem.forEach(function (item) {
          item.classList.add('language-selector__link--active');
        });
        textTofixedLabel = preselectedElem[0].innerHTML;
        bgTofixedLabel = preselectedElem[0].getAttribute('data-icon');
      } else {
        var firstPlatformElem = document.querySelectorAll('.language-selector__item:first-child .language-selector__link');
        firstPlatformElem.forEach(function (item) {
          item.classList.add('language-selector__link--active');
        });

        if (firstPlatformElem.length) {
          textTofixedLabel = firstPlatformElem[0].innerHTML;
          bgTofixedLabel = firstPlatformElem[0].getAttribute('data-icon');
        }
      }
    }

    if (fixedLabel && textTofixedLabel) {
      fixedLabel.innerHTML = textTofixedLabel;
      fixedLabel.style.backgroundImage = "url('".concat(bgTofixedLabel, "')");
    }
  };

  var getSelectedPlatform = function getSelectedPlatform(e) {
    var selectedPlatform;

    if (e) {
      selectedPlatform = e.target.getAttribute('data-platform');
    } else {
      var activeLink = document.querySelector('.language-selector__link--active');

      if (activeLink) {
        selectedPlatform = activeLink.getAttribute('data-platform');
      }
    }

    return selectedPlatform;
  };

  var toggleBlock = function toggleBlock(e, attribute, allowEmpty, selectorCompare) {
    var selectedPlatform = getSelectedPlatform(e);
    var selectorToGetVisible = "[".concat(attribute).concat(selectorCompare, "\"").concat(selectedPlatform, "\"]");

    if (allowEmpty) {
      selectorToGetVisible += ", [".concat(attribute, "=\"\"]");
    }

    document.querySelectorAll("[".concat(attribute, "]:not([").concat(attribute, "=\"\"])")).forEach(function (item) {
      return item.classList.add('hidden');
    });
    document.querySelectorAll(selectorToGetVisible).forEach(function (item) {
      return item.classList.remove('hidden');
    });
  };

  var selectCode = function selectCode(e) {
    toggleBlock(e, 'data-platform-code', false, '=');
  };

  var switchContentChunk = function switchContentChunk(e) {
    toggleBlock(e, 'data-platform-chunk', true, '*=');
  };

  var removeParameterfromUrlSearch = function removeParameterfromUrlSearch(urlSearch, param) {
    urlSearch = urlSearch.replace('?', '').split('&');
    urlSearch = urlSearch.filter(function (item) {
      return item.indexOf(param) !== 0 && item !== '';
    });
    return urlSearch.length ? '?' + urlSearch.join('&') : '';
  };

  var replaceLanguageInUrl = function replaceLanguageInUrl(e) {
    var selectedPlatform = e.target.getAttribute('data-slug');
    var url = window.location;
    var path = url.href.split(/[?#]/)[0];
    path = path + '?tech=' + selectedPlatform + removeParameterfromUrlSearch(url.search, 'tech').replace('?', '&') + url.hash;

    if (history && history.replaceState) {
      history.replaceState({}, null, path);
    }
  };

  var getScrollPosition = function getScrollPosition() {
    var doc = document.documentElement;
    return window.pageYOffset || doc.scrollTop;
  };

  var getFirstElemInViewport = function getFirstElemInViewport(selector) {
    var elements = document.querySelectorAll(selector);

    for (var i = 0; i < elements.length; i++) {
      if (elements[i].getBoundingClientRect().top >= 0 && elements[i].offsetWidth > 0 && elements[i].offsetHeight > 0) {
        return elements[i];
      }
    }

    return null;
  };

  var actionLanguageOnClick = function actionLanguageOnClick(e, articleContent) {
    highlightSelector(articleContent, e);
    selectCode(e);
    switchContentChunk(e);
    replaceLanguageInUrl(e);
    document.querySelectorAll("pre[data-platform-code=".concat(e.target.getAttribute('data-platform'), "] code")).forEach(function (item) {
      window.Prism.highlightElement(item);
    });
  };

  var handleLanguageSelection = function handleLanguageSelection(e, articleContent) {
    if (e.target && e.target.matches('.language-selector__link')) {
      e.preventDefault();
      var offsetTarget = e.target;
      var prevElemOffset;
      var scrollPosition;
      var newElemOffset;

      if (window.helper.findAncestor(offsetTarget, '.language-selector--fixed')) {
        offsetTarget = getFirstElemInViewport('.language-selector--code-block');
      }

      if (offsetTarget) {
        prevElemOffset = offsetTarget.getBoundingClientRect().top;
      }

      actionLanguageOnClick(e, articleContent);

      if (offsetTarget) {
        scrollPosition = getScrollPosition();
        newElemOffset = offsetTarget.getBoundingClientRect().top;
        window.scrollTo(0, scrollPosition - (prevElemOffset - newElemOffset));
      }
    }
  };

  var selectLanguageOnClick = function selectLanguageOnClick(articleContent) {
    articleContent.addEventListener('click', function (e) {
      handleLanguageSelection(e, articleContent);
    });
  };

  var cloneLanguageSelectorToFixed = function cloneLanguageSelectorToFixed() {
    var languageSelector = document.querySelector('.language-selector');

    if (languageSelector) {
      languageSelector = languageSelector.cloneNode(true);
      var content = document.querySelector('.article__content');
      languageSelector.classList.add('language-selector--fixed');
      var label = document.createElement('div');
      label.classList.add('language-selector__label');
      languageSelector.insertBefore(label, languageSelector.firstChild);
      var iconItems = languageSelector.querySelectorAll('[data-icon]');

      for (var i = 0; i < iconItems.length; i++) {
        iconItems[i].style.backgroundImage = "url('".concat(iconItems[i].getAttribute('data-icon'), "')");
      }

      var text = document.createElement('label');
      text.classList.add('language-selector__fixed-label');
      text.innerHTML = window.UIMessages && window.UIMessages.technologyLabel ? window.UIMessages.technologyLabel : 'Technology';
      languageSelector.insertBefore(text, languageSelector.firstChild);
      document.querySelector('body').addEventListener('click', function (e) {
        if (e.target && e.target.matches('.language-selector--fixed .language-selector__label')) {
          if (languageSelector.classList.contains('language-selector--opened')) {
            languageSelector.classList.remove('language-selector--opened');
          } else {
            languageSelector.classList.add('language-selector--opened');
          }
        } else {
          languageSelector.classList.remove('language-selector--opened');
        }
      });
      content.appendChild(languageSelector);
    }
  };

  var handleFixedSelector = function handleFixedSelector() {
    var selector = document.querySelector('.language-selector--fixed');
    var viewportWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);

    if (viewportWidth >= 1150 && selector) {
      var topOffset = (window.pageYOffset || document.scrollTop) - (document.clientTop || 0) || 0;
      var mainSelector = document.querySelector('.language-selector');
      var isTop = topOffset <= mainSelector.getBoundingClientRect().top + mainSelector.offsetHeight + (window.scrollY || document.documentElement.scrollTop);

      if (isTop) {
        var relativePositionTo = document.querySelector('.article__content h1');

        var _topOffset = relativePositionTo ? relativePositionTo.getBoundingClientRect().top : 0;

        selector.style.top = "".concat(_topOffset > 60 ? _topOffset : 60, "px");
        selector.classList.remove('language-selector--visible');
      } else {
        selector.classList.add('language-selector--visible');
      }
    }
  };

  var copyCode = function copyCode() {
    var articleContent = document.querySelector('.article__content');

    if (articleContent) {
      var copyTooltips = articleContent.querySelectorAll('.infobar__tooltip');
      copyTooltips.forEach(function (item) {
        item.innerHTML = window.UIMessages ? window.UIMessages.copyCode : '';
      });
      articleContent.addEventListener('click', function (e) {
        if (e.target && e.target.matches('.infobar__copy')) {
          e.preventDefault();
          var textElem = e.target.querySelector('.infobar__tooltip');
          var text = textElem.innerHTML;
          textElem.innerHTML = window.UIMessages ? window.UIMessages.copyCodeActive : '';
          setTimeout(function () {
            textElem.innerHTML = text;
          }, 1500);
          var code = window.helper.findAncestor(e.target, 'pre').querySelector('.clean-code').innerHTML;
          window.helper.copyToClipboard(window.helper.htmlDecode(code));
        }
      });
    }
  };

  var selectLanguage = function selectLanguage() {
    var articleContent = document.querySelector('.article__content');
    var selector = document.querySelectorAll('.language-selector__list:not(.language-selector__list--static)');

    if (selector.length) {
      highlightSelector();
      selectCode();
      switchContentChunk();
      selectLanguageOnClick(articleContent);
    } else {
      var fixedLabel = document.querySelector('.language-selector__label');
      var activeSelector = document.querySelector('.language-selector__link--active');

      if (fixedLabel && activeSelector) {
        fixedLabel.innerHTML = activeSelector.innerHTML;
        fixedLabel.style.backgroundImage = "url('".concat(activeSelector.getAttribute('data-icon'), "')");
      }
    }
  };

  var makeInfobarsVisible = function makeInfobarsVisible() {
    var infobars = document.querySelectorAll('.infobar');

    if (infobars.length) {
      infobars.forEach(function (item) {
        item.classList.add('infobar--visible');
      });
    }
  };

  var findAndRemoveFromArray = function findAndRemoveFromArray(array, item) {
    var index = array.indexOf(item);

    if (index > -1) {
      array.splice(index, 1);
    }

    return array;
  };

  var handleEmptyPlatforms = function handleEmptyPlatforms() {
    var codeBlocks = document.querySelectorAll('.code-samples');
    var message = window.UIMessages && window.UIMessages.emptyCodeBlock ? window.UIMessages.emptyCodeBlock : 'We don\'t have a code sample for the selected technology.';
    var langSelector = document.querySelector('.language-selector__list');
    codeBlocks.forEach(function (block) {
      var availablePlatforms = Array.prototype.slice.call(langSelector.querySelectorAll('[data-platform]')).map(function (item) {
        return item.getAttribute('data-platform');
      });
      var availableCodeBlocks = Array.prototype.slice.call(block.querySelectorAll('[data-platform-code]')).map(function (item) {
        return item.getAttribute('data-platform-code');
      });
      availableCodeBlocks.forEach(function (item) {
        availablePlatforms = findAndRemoveFromArray(availablePlatforms, item);
      });
      var emptyBlocks = '';
      availablePlatforms.forEach(function (platform) {
        emptyBlocks += "<pre class=\"code-samples__empty\" data-platform-code=\"".concat(platform, "\"><div class=\"code-samples__text\">").concat(message, "</div></pre>");
      });
      block.innerHTML = block.innerHTML + emptyBlocks;
    });
  };

  cloneLanguageSelectorToFixed();
  handleEmptyPlatforms();
  handleFixedSelector();
  window.addEventListener('scroll', handleFixedSelector, window.supportsPassive ? {
    passive: true
  } : false);
  window.addEventListener('resize', handleFixedSelector, window.supportsPassive ? {
    passive: true
  } : false);
  selectLanguage();
  copyCode();
  setTimeout(function () {
    makeInfobarsVisible();
  }, 0);
})();

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

var require;var require;window.basicLightbox = function () {
  return function i(u, c, a) {
    function s(n, e) {
      if (!c[n]) {
        if (!u[n]) {
          var t = typeof require === 'function' && require;
          if (!e && t) return require(n, !0);
          if (l) return l(n, !0);
          var o = new Error("Cannot find module '" + n + "'");
          throw o.code = 'MODULE_NOT_FOUND', o;
        }

        var r = c[n] = {
          exports: {}
        };
        u[n][0].call(r.exports, function (e) {
          return s(u[n][1][e] || e);
        }, r, r.exports, i, u, c, a);
      }

      return c[n].exports;
    }

    for (var l = typeof require === 'function' && require, e = 0; e < a.length; e++) {
      s(a[e]);
    }

    return s;
  }({
    1: [function (e, n, t) {
      'use strict';

      Object.defineProperty(t, '__esModule', {
        value: !0
      });

      var c = function c(e) {
        var n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        var t = document.createElement('div');
        return t.innerHTML = e.trim(), !0 === n ? t.children : t.firstChild;
      };

      var a = function a(e, n) {
        var t = e.children;
        return t.length === 1 && t[0].tagName === n;
      };

      var u = t.visible = function (e) {
        return (e = e || document.querySelector('.basicLightbox')) != null && !0 === e.ownerDocument.body.contains(e);
      };

      t.create = function (e, o) {
        var r = function (e, n) {
          var t = c('\n\t\t<div class="basicLightbox ' + n.className + '">\n\t\t\t<div class="basicLightbox__placeholder" role="dialog"></div>\n\t\t</div>\n\t');
          var o = t.querySelector('.basicLightbox__placeholder');
          e.forEach(function (e) {
            return o.appendChild(e);
          });
          var r = a(o, 'IMG');
          var i = a(o, 'VIDEO');
          var u = a(o, 'IFRAME');
          return !0 === r && t.classList.add('basicLightbox--img'), !0 === i && t.classList.add('basicLightbox--video'), !0 === u && t.classList.add('basicLightbox--iframe'), t;
        }(e = function (e) {
          var n = typeof e === 'string';
          var t = e instanceof HTMLElement == 1;
          if (!1 === n && !1 === t) throw new Error('Content must be a DOM element/node or string');
          return !0 === n ? Array.from(c(e, !0)) : e.tagName === 'TEMPLATE' ? [e.content.cloneNode(!0)] : Array.from(e.children);
        }(e), o = function () {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
          if ((e = Object.assign({}, e)).closable == null && (e.closable = !0), e.className == null && (e.className = ''), e.onShow == null && (e.onShow = function () {}), e.onClose == null && (e.onClose = function () {}), typeof e.closable !== 'boolean') throw new Error('Property `closable` must be a boolean');
          if (typeof e.className !== 'string') throw new Error('Property `className` must be a string');
          if (typeof e.onShow !== 'function') throw new Error('Property `onShow` must be a function');
          if (typeof e.onClose !== 'function') throw new Error('Property `onClose` must be a function');
          return e;
        }(o));

        var n = function n(e) {
          return !1 !== o.onClose(i) && (t = function t() {
            if (typeof e === 'function') return e(i);
          }, (n = r).classList.remove('basicLightbox--visible'), setTimeout(function () {
            return !1 === u(n) || n.parentElement.removeChild(n), t();
          }, 410), !0);
          var n, t;
        };

        !0 === o.closable && r.addEventListener('click', function (e) {
          /* e.target === r && */
          n();
        });
        var i = {
          element: function element() {
            return r;
          },
          visible: function visible() {
            return u(r);
          },
          show: function show(e) {
            return !1 !== o.onShow(i) && (n = r, t = function t() {
              if (typeof e === 'function') return e(i);
            }, document.body.appendChild(n), setTimeout(function () {
              requestAnimationFrame(function () {
                return n.classList.add('basicLightbox--visible'), t();
              });
            }, 10), !0);
            var n, t;
          },
          close: n
        };
        return i;
      };
    }, {}]
  }, {}, [1])(1);
}();

/***/ }),
/* 8 */
/***/ (function(module, exports) {

/**
 * Initializes lightbox and caption if available
 */
(function () {
  setTimeout(function () {
    var imgs = document.querySelectorAll('img.article__add-lightbox');

    var initLightbox = function initLightbox() {
      document.querySelectorAll('img.article__add-lightbox').forEach(function (item) {
        var figcaption = '';
        var nextSibling = item.nextSibling;
        var nextNextSibling = nextSibling.nextSibling; // Find caption in DOM generated by Kentico Kontent

        var captionElem = function () {
          if (nextSibling && nextSibling.tagName === 'FIGCAPTION') {
            return nextSibling;
          } else if (nextNextSibling && nextNextSibling.tagName === 'FIGCAPTION') {
            return nextNextSibling;
          } else {
            return null;
          }
        }();

        if (captionElem !== null) {
          figcaption = "<div class=\"basicLightbox__description\">".concat(captionElem.innerHTML, "</div>");
        } // Init lighbox with caption


        item.addEventListener('click', function () {
          window.basicLightbox.create("<img src=\"".concat(item.getAttribute('src').split('?')[0] + '?w=1600&fm=jpg&auto=format', "\">").concat(figcaption)).show();
        });
      });
    };

    var interval = setInterval(function () {
      imgs = document.querySelectorAll('img.article__add-lightbox');

      if (imgs.length) {
        initLightbox();
        clearInterval(interval);
      }
    }, 100);
  }, 0);
})();

/***/ }),
/* 9 */
/***/ (function(module, exports) {

/**
 * Make tables spread reasonably it the page content
 */
(function () {
  var tables = document.querySelectorAll('table');
  var articleContent = document.querySelector('.article__content'); // Set a wrapper to all tables

  var wrapTables = function wrapTables() {
    if (tables.length > 0) {
      tables.forEach(function (item) {
        var wrapper = document.createElement('div');
        wrapper.classList.add('table__wrapper');
        item.parentNode.insertBefore(wrapper, item);
        wrapper.appendChild(item);
        var container = document.createElement('div');
        container.classList.add('table');
        wrapper.parentNode.insertBefore(container, wrapper);
        container.appendChild(wrapper);
      });
    }
  }; // Force size of table to the very right of the viewport if number of cells if more than 5


  var setWrapperSize = window.helper.debounce(function () {
    if (tables.length > 0) {
      var viewportWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
      var websiteWidth = document.querySelector('main').offsetWidth;
      var contentWidth = articleContent.offsetWidth;
      var tableWidth = contentWidth + (viewportWidth - websiteWidth) / 2;
      tables.forEach(function (item) {
        var cellCount = item.querySelector('tr').childElementCount;

        if (cellCount >= 6) {
          item.style.width = "".concat(tableWidth, "px");
        }
      });
    }
  }, 250); // If cell count is lower than 6, set a max-size to them to prevent overflowing the table from the website container

  var setCellMaxWidth = function setCellMaxWidth() {
    var contentWidth = articleContent.offsetWidth;

    if (tables.length > 0 && contentWidth > 768) {
      tables.forEach(function (item, index) {
        var cellCount = item.querySelector('tr').childElementCount;

        if (cellCount < 6) {
          var maxWidth = Math.floor(contentWidth / cellCount);
          item.setAttribute('id', "table-".concat(index));
          item.insertAdjacentHTML('beforebegin', "<style>#table-".concat(index, " td{max-width:").concat(maxWidth, "px}</style>"));
        }
      });
    }
  };

  if (articleContent) {
    wrapTables();
    setWrapperSize();
    setCellMaxWidth();
    window.addEventListener('resize', setWrapperSize);
  }
})();

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/* PrismJS 1.16.0
https://prismjs.com/download.html#themes=prism&languages=markup+css+clike+javascript+csharp+bash+aspnet+ruby+markup-templating+java+php+typescript+python+swift&plugins=line-numbers */
var _self = typeof window !== 'undefined' ? window : typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope ? self : {};

var Prism = function (g) {
  var c = /\blang(?:uage)?-([\w-]+)\b/i;
  var a = 0;
  var C = {
    manual: g.Prism && g.Prism.manual,
    disableWorkerMessageHandler: g.Prism && g.Prism.disableWorkerMessageHandler,
    util: {
      encode: function encode(e) {
        return e instanceof M ? new M(e.type, C.util.encode(e.content), e.alias) : Array.isArray(e) ? e.map(C.util.encode) : e.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\u00a0/g, ' ');
      },
      type: function type(e) {
        return Object.prototype.toString.call(e).slice(8, -1);
      },
      objId: function objId(e) {
        return e.__id || Object.defineProperty(e, '__id', {
          value: ++a
        }), e.__id;
      },
      clone: function t(e, n) {
        var r;
        var a;
        var i = C.util.type(e);

        switch (n = n || {}, i) {
          case 'Object':
            if (a = C.util.objId(e), n[a]) return n[a];

            for (var l in r = {}, n[a] = r, e) {
              e.hasOwnProperty(l) && (r[l] = t(e[l], n));
            }

            return r;

          case 'Array':
            return a = C.util.objId(e), n[a] ? n[a] : (r = [], n[a] = r, e.forEach(function (e, a) {
              r[a] = t(e, n);
            }), r);

          default:
            return e;
        }
      }
    },
    languages: {
      extend: function extend(e, a) {
        var t = C.util.clone(C.languages[e]);

        for (var n in a) {
          t[n] = a[n];
        }

        return t;
      },
      insertBefore: function insertBefore(t, e, a, n) {
        var r = (n = n || C.languages)[t];
        var i = {};

        for (var l in r) {
          if (r.hasOwnProperty(l)) {
            if (l == e) for (var o in a) {
              a.hasOwnProperty(o) && (i[o] = a[o]);
            }
            a.hasOwnProperty(l) || (i[l] = r[l]);
          }
        }

        var s = n[t];
        return n[t] = i, C.languages.DFS(C.languages, function (e, a) {
          a === s && e != t && (this[e] = i);
        }), i;
      },
      DFS: function e(a, t, n, r) {
        r = r || {};
        var i = C.util.objId;

        for (var l in a) {
          if (a.hasOwnProperty(l)) {
            t.call(a, l, a[l], n || l);
            var o = a[l];
            var s = C.util.type(o);
            s !== 'Object' || r[i(o)] ? s !== 'Array' || r[i(o)] || (r[i(o)] = !0, e(o, t, l, r)) : (r[i(o)] = !0, e(o, t, null, r));
          }
        }
      }
    },
    plugins: {},
    highlightAll: function highlightAll(e, a) {
      C.highlightAllUnder(document, e, a);
    },
    highlightAllUnder: function highlightAllUnder(e, a, t) {
      var n = {
        callback: t,
        selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'
      };
      C.hooks.run('before-highlightall', n);

      for (var r, i = n.elements || e.querySelectorAll(n.selector), l = 0; r = i[l++];) {
        C.highlightElement(r, !0 === a, n.callback);
      }
    },
    highlightElement: function highlightElement(e, a, t) {
      for (var n, r, i = e; i && !c.test(i.className);) {
        i = i.parentNode;
      }

      i && (n = (i.className.match(c) || [, ''])[1].toLowerCase(), r = C.languages[n]), e.className = e.className.replace(c, '').replace(/\s+/g, ' ') + ' language-' + n, e.parentNode && (i = e.parentNode, /pre/i.test(i.nodeName) && (i.className = i.className.replace(c, '').replace(/\s+/g, ' ') + ' language-' + n));
      var l = {
        element: e,
        language: n,
        grammar: r,
        code: e.textContent
      };

      var o = function o(e) {
        l.highlightedCode = e, C.hooks.run('before-insert', l), l.element.innerHTML = l.highlightedCode, C.hooks.run('after-highlight', l), C.hooks.run('complete', l), t && t.call(l.element);
      };

      if (C.hooks.run('before-sanity-check', l), l.code) {
        if (C.hooks.run('before-highlight', l), l.grammar) {
          if (a && g.Worker) {
            var s = new Worker(C.filename);
            s.onmessage = function (e) {
              o(e.data);
            }, s.postMessage(JSON.stringify({
              language: l.language,
              code: l.code,
              immediateClose: !0
            }));
          } else o(C.highlight(l.code, l.grammar, l.language));
        } else o(C.util.encode(l.code));
      } else C.hooks.run('complete', l);
    },
    highlight: function highlight(e, a, t) {
      var n = {
        code: e,
        grammar: a,
        language: t
      };
      return C.hooks.run('before-tokenize', n), n.tokens = C.tokenize(n.code, n.grammar), C.hooks.run('after-tokenize', n), M.stringify(C.util.encode(n.tokens), n.language);
    },
    matchGrammar: function matchGrammar(e, a, t, n, r, i, l) {
      for (var o in t) {
        if (t.hasOwnProperty(o) && t[o]) {
          if (o == l) return;
          var s = t[o];
          s = C.util.type(s) === 'Array' ? s : [s];

          for (var g = 0; g < s.length; ++g) {
            var c = s[g];
            var u = c.inside;
            var h = !!c.lookbehind;
            var f = !!c.greedy;
            var d = 0;
            var m = c.alias;

            if (f && !c.pattern.global) {
              var p = c.pattern.toString().match(/[imuy]*$/)[0];
              c.pattern = RegExp(c.pattern.source, p + 'g');
            }

            c = c.pattern || c;

            for (var y = n, v = r; y < a.length; v += a[y].length, ++y) {
              var k = a[y];
              if (a.length > e.length) return;

              if (!(k instanceof M)) {
                if (f && y != a.length - 1) {
                  if (c.lastIndex = v, !(x = c.exec(e))) break;

                  for (var b = x.index + (h ? x[1].length : 0), w = x.index + x[0].length, A = y, P = v, O = a.length; A < O && (P < w || !a[A].type && !a[A - 1].greedy); ++A) {
                    (P += a[A].length) <= b && (++y, v = P);
                  }

                  if (a[y] instanceof M) continue;
                  N = A - y, k = e.slice(v, P), x.index -= v;
                } else {
                  c.lastIndex = 0;
                  var x = c.exec(k);
                  var N = 1;
                }

                if (x) {
                  h && (d = x[1] ? x[1].length : 0);
                  w = (b = x.index + d) + (x = x[0].slice(d)).length;
                  var j = k.slice(0, b);
                  var S = k.slice(w);
                  var E = [y, N];
                  j && (++y, v += j.length, E.push(j));

                  var _ = new M(o, u ? C.tokenize(x, u) : x, m, x, f);

                  if (E.push(_), S && E.push(S), Array.prototype.splice.apply(a, E), N != 1 && C.matchGrammar(e, a, t, y, v, !0, o), i) break;
                } else if (i) break;
              }
            }
          }
        }
      }
    },
    tokenize: function tokenize(e, a) {
      var t = [e];
      var n = a.rest;

      if (n) {
        for (var r in n) {
          a[r] = n[r];
        }

        delete a.rest;
      }

      return C.matchGrammar(e, t, a, 0, 0, !1), t;
    },
    hooks: {
      all: {},
      add: function add(e, a) {
        var t = C.hooks.all;
        t[e] = t[e] || [], t[e].push(a);
      },
      run: function run(e, a) {
        var t = C.hooks.all[e];
        if (t && t.length) for (var n, r = 0; n = t[r++];) {
          n(a);
        }
      }
    },
    Token: M
  };

  function M(e, a, t, n, r) {
    this.type = e, this.content = a, this.alias = t, this.length = 0 | (n || '').length, this.greedy = !!r;
  }

  if (g.Prism = C, M.stringify = function (e, a) {
    if (typeof e === 'string') return e;
    if (Array.isArray(e)) return e.map(function (e) {
      return M.stringify(e, a);
    }).join('');
    var t = {
      type: e.type,
      content: M.stringify(e.content, a),
      tag: 'span',
      classes: ['token', e.type],
      attributes: {},
      language: a
    };

    if (e.alias) {
      var n = Array.isArray(e.alias) ? e.alias : [e.alias];
      Array.prototype.push.apply(t.classes, n);
    }

    C.hooks.run('wrap', t);
    var r = Object.keys(t.attributes).map(function (e) {
      return e + '="' + (t.attributes[e] || '').replace(/"/g, '&quot;') + '"';
    }).join(' ');
    return '<' + t.tag + ' class="' + t.classes.join(' ') + '"' + (r ? ' ' + r : '') + '>' + t.content + '</' + t.tag + '>';
  }, !g.document) return g.addEventListener && (C.disableWorkerMessageHandler || g.addEventListener('message', function (e) {
    var a = JSON.parse(e.data);
    var t = a.language;
    var n = a.code;
    var r = a.immediateClose;
    g.postMessage(C.highlight(n, C.languages[t], t)), r && g.close();
  }, !1)), C;
  var e = document.currentScript || [].slice.call(document.getElementsByTagName('script')).pop();
  return e && (C.filename = e.src, C.manual || e.hasAttribute('data-manual') || (document.readyState !== 'loading' ? window.requestAnimationFrame ? window.requestAnimationFrame(C.highlightAll) : window.setTimeout(C.highlightAll, 16) : document.addEventListener('DOMContentLoaded', C.highlightAll))), C;
}(_self);

 true && module.exports && (module.exports = Prism), typeof global !== 'undefined' && (global.Prism = Prism);
Prism.languages.markup = {
  comment: /<!--[\s\S]*?-->/,
  prolog: /<\?[\s\S]+?\?>/,
  doctype: /<!DOCTYPE[\s\S]+?>/i,
  cdata: /<!\[CDATA\[[\s\S]*?]]>/i,
  tag: {
    pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/i,
    greedy: !0,
    inside: {
      tag: {
        pattern: /^<\/?[^\s>\/]+/i,
        inside: {
          punctuation: /^<\/?/,
          namespace: /^[^\s>\/:]+:/
        }
      },
      'attr-value': {
        pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/i,
        inside: {
          punctuation: [/^=/, {
            pattern: /^(\s*)["']|["']$/,
            lookbehind: !0
          }]
        }
      },
      punctuation: /\/?>/,
      'attr-name': {
        pattern: /[^\s>\/]+/,
        inside: {
          namespace: /^[^\s>\/:]+:/
        }
      }
    }
  },
  entity: /&#?[\da-z]{1,8};/i
}, Prism.languages.markup.tag.inside['attr-value'].inside.entity = Prism.languages.markup.entity, Prism.hooks.add('wrap', function (a) {
  a.type === 'entity' && (a.attributes.title = a.content.replace(/&amp;/, '&'));
}), Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {
  value: function value(a, e) {
    var s = {};
    s['language-' + e] = {
      pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
      lookbehind: !0,
      inside: Prism.languages[e]
    }, s.cdata = /^<!\[CDATA\[|\]\]>$/i;
    var n = {
      'included-cdata': {
        pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
        inside: s
      }
    };
    n['language-' + e] = {
      pattern: /[\s\S]+/,
      inside: Prism.languages[e]
    };
    var i = {};
    i[a] = {
      pattern: RegExp('(<__[\\s\\S]*?>)(?:<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\s*|[\\s\\S])*?(?=<\\/__>)'.replace(/__/g, a), 'i'),
      lookbehind: !0,
      greedy: !0,
      inside: n
    }, Prism.languages.insertBefore('markup', 'cdata', i);
  }
}), Prism.languages.xml = Prism.languages.extend('markup', {}), Prism.languages.html = Prism.languages.markup, Prism.languages.mathml = Prism.languages.markup, Prism.languages.svg = Prism.languages.markup;
!function (s) {
  var e = /("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/;
  s.languages.css = {
    comment: /\/\*[\s\S]*?\*\//,
    atrule: {
      pattern: /@[\w-]+?[\s\S]*?(?:;|(?=\s*\{))/i,
      inside: {
        rule: /@[\w-]+/
      }
    },
    url: RegExp('url\\((?:' + e.source + '|.*?)\\)', 'i'),
    selector: RegExp("[^{}\\s](?:[^{};\"']|" + e.source + ')*?(?=\\s*\\{)'),
    string: {
      pattern: e,
      greedy: !0
    },
    property: /[-_a-z\xA0-\uFFFF][-\w\xA0-\uFFFF]*(?=\s*:)/i,
    important: /!important\b/i,
    "function": /[-a-z0-9]+(?=\()/i,
    punctuation: /[(){};:,]/
  }, s.languages.css.atrule.inside.rest = s.languages.css;
  var a = s.languages.markup;
  a && (a.tag.addInlined('style', 'css'), s.languages.insertBefore('inside', 'attr-value', {
    'style-attr': {
      pattern: /\s*style=("|')(?:\\[\s\S]|(?!\1)[^\\])*\1/i,
      inside: {
        'attr-name': {
          pattern: /^\s*style/i,
          inside: a.tag.inside
        },
        punctuation: /^\s*=\s*['"]|['"]\s*$/,
        'attr-value': {
          pattern: /.+/i,
          inside: s.languages.css
        }
      },
      alias: 'language-css'
    }
  }, a.tag));
}(Prism);
Prism.languages.clike = {
  comment: [{
    pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
    lookbehind: !0
  }, {
    pattern: /(^|[^\\:])\/\/.*/,
    lookbehind: !0,
    greedy: !0
  }],
  string: {
    pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
    greedy: !0
  },
  'class-name': {
    pattern: /((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[\w.\\]+/i,
    lookbehind: !0,
    inside: {
      punctuation: /[.\\]/
    }
  },
  keyword: /\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,
  "boolean": /\b(?:true|false)\b/,
  "function": /\w+(?=\()/,
  number: /\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i,
  operator: /--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/,
  punctuation: /[{}[\];(),.:]/
};
Prism.languages.javascript = Prism.languages.extend('clike', {
  'class-name': [Prism.languages.clike['class-name'], {
    pattern: /(^|[^$\w\xA0-\uFFFF])[_$A-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\.(?:prototype|constructor))/,
    lookbehind: !0
  }],
  keyword: [{
    pattern: /((?:^|})\s*)(?:catch|finally)\b/,
    lookbehind: !0
  }, {
    pattern: /(^|[^.])\b(?:as|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
    lookbehind: !0
  }],
  number: /\b(?:(?:0[xX][\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+)n?|\d+n|NaN|Infinity)\b|(?:\b\d+\.?\d*|\B\.\d+)(?:[Ee][+-]?\d+)?/,
  "function": /[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
  operator: /-[-=]?|\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\|[|=]?|\*\*?=?|\/=?|~|\^=?|%=?|\?|\.{3}/
}), Prism.languages.javascript['class-name'][0].pattern = /(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/, Prism.languages.insertBefore('javascript', 'keyword', {
  regex: {
    pattern: /((?:^|[^$\w\xA0-\uFFFF."'\])\s])\s*)\/(\[(?:[^\]\\\r\n]|\\.)*]|\\.|[^/\\\[\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})\]]))/,
    lookbehind: !0,
    greedy: !0
  },
  'function-variable': {
    pattern: /[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)\s*=>))/,
    alias: 'function'
  },
  parameter: [{
    pattern: /(function(?:\s+[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)?\s*\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\))/,
    lookbehind: !0,
    inside: Prism.languages.javascript
  }, {
    pattern: /[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*=>)/i,
    inside: Prism.languages.javascript
  }, {
    pattern: /(\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*=>)/,
    lookbehind: !0,
    inside: Prism.languages.javascript
  }, {
    pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*\s*)\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*\{)/,
    lookbehind: !0,
    inside: Prism.languages.javascript
  }],
  constant: /\b[A-Z](?:[A-Z_]|\dx?)*\b/
}), Prism.languages.insertBefore('javascript', 'string', {
  'template-string': {
    pattern: /`(?:\\[\s\S]|\${[^}]+}|[^\\`])*`/,
    greedy: !0,
    inside: {
      interpolation: {
        pattern: /\${[^}]+}/,
        inside: {
          'interpolation-punctuation': {
            pattern: /^\${|}$/,
            alias: 'punctuation'
          },
          rest: Prism.languages.javascript
        }
      },
      string: /[\s\S]+/
    }
  }
}), Prism.languages.markup && Prism.languages.markup.tag.addInlined('script', 'javascript'), Prism.languages.js = Prism.languages.javascript;
Prism.languages.csharp = Prism.languages.extend('clike', {
  keyword: /\b(?:abstract|add|alias|as|ascending|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|descending|do|double|dynamic|else|enum|event|explicit|extern|false|finally|fixed|float|for|foreach|from|get|global|goto|group|if|implicit|in|int|interface|internal|into|is|join|let|lock|long|namespace|new|null|object|operator|orderby|out|override|params|partial|private|protected|public|readonly|ref|remove|return|sbyte|sealed|select|set|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|value|var|virtual|void|volatile|where|while|yield)\b/,
  string: [{
    pattern: /@("|')(?:\1\1|\\[\s\S]|(?!\1)[^\\])*\1/,
    greedy: !0
  }, {
    pattern: /("|')(?:\\.|(?!\1)[^\\\r\n])*?\1/,
    greedy: !0
  }],
  'class-name': [{
    pattern: /\b[A-Z]\w*(?:\.\w+)*\b(?=\s+\w+)/,
    inside: {
      punctuation: /\./
    }
  }, {
    pattern: /(\[)[A-Z]\w*(?:\.\w+)*\b/,
    lookbehind: !0,
    inside: {
      punctuation: /\./
    }
  }, {
    pattern: /(\b(?:class|interface)\s+[A-Z]\w*(?:\.\w+)*\s*:\s*)[A-Z]\w*(?:\.\w+)*\b/,
    lookbehind: !0,
    inside: {
      punctuation: /\./
    }
  }, {
    pattern: /((?:\b(?:class|interface|new)\s+)|(?:catch\s+\())[A-Z]\w*(?:\.\w+)*\b/,
    lookbehind: !0,
    inside: {
      punctuation: /\./
    }
  }],
  number: /\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)f?/i,
  operator: />>=?|<<=?|[-=]>|([-+&|?])\1|~|[-+*/%&|^!=<>]=?/,
  punctuation: /\?\.?|::|[{}[\];(),.:]/
}), Prism.languages.insertBefore('csharp', 'class-name', {
  'generic-method': {
    pattern: /\w+\s*<[^>\r\n]+?>\s*(?=\()/,
    inside: {
      "function": /^\w+/,
      'class-name': {
        pattern: /\b[A-Z]\w*(?:\.\w+)*\b/,
        inside: {
          punctuation: /\./
        }
      },
      keyword: Prism.languages.csharp.keyword,
      punctuation: /[<>(),.:]/
    }
  },
  preprocessor: {
    pattern: /(^\s*)#.*/m,
    lookbehind: !0,
    alias: 'property',
    inside: {
      directive: {
        pattern: /(\s*#)\b(?:define|elif|else|endif|endregion|error|if|line|pragma|region|undef|warning)\b/,
        lookbehind: !0,
        alias: 'keyword'
      }
    }
  }
}), Prism.languages.dotnet = Prism.languages.csharp;
!function (e) {
  var a = {
    variable: [{
      pattern: /\$?\(\([\s\S]+?\)\)/,
      inside: {
        variable: [{
          pattern: /(^\$\(\([\s\S]+)\)\)/,
          lookbehind: !0
        }, /^\$\(\(/],
        number: /\b0x[\dA-Fa-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:[Ee]-?\d+)?/,
        operator: /--?|-=|\+\+?|\+=|!=?|~|\*\*?|\*=|\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\^=?|\|\|?|\|=|\?|:/,
        punctuation: /\(\(?|\)\)?|,|;/
      }
    }, {
      pattern: /\$\([^)]+\)|`[^`]+`/,
      greedy: !0,
      inside: {
        variable: /^\$\(|^`|\)$|`$/
      }
    }, /\$(?:[\w#?*!@]+|\{[^}]+\})/i]
  };
  e.languages.bash = {
    shebang: {
      pattern: /^#!\s*\/bin\/bash|^#!\s*\/bin\/sh/,
      alias: 'important'
    },
    comment: {
      pattern: /(^|[^"{\\])#.*/,
      lookbehind: !0
    },
    string: [{
      pattern: /((?:^|[^<])<<\s*)["']?(\w+?)["']?\s*\r?\n(?:[\s\S])*?\r?\n\2/,
      lookbehind: !0,
      greedy: !0,
      inside: a
    }, {
      pattern: /(["'])(?:\\[\s\S]|\$\([^)]+\)|`[^`]+`|(?!\1)[^\\])*\1/,
      greedy: !0,
      inside: a
    }],
    variable: a.variable,
    "function": {
      pattern: /(^|[\s;|&])(?:add|alias|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|builtin|bzip2|cal|cat|cd|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|comm|command|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|enable|env|ethtool|eval|exec|expand|expect|export|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|getopts|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|hash|head|help|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logout|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|printf|ps|pushd|pv|pwd|quota|quotacheck|quotactl|ram|rar|rcp|read|readarray|readonly|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|shift|shopt|shutdown|sleep|slocate|sort|source|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tail|tar|tee|test|time|timeout|times|top|touch|tr|traceroute|trap|tsort|tty|type|ulimit|umask|umount|unalias|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zip|zypper)(?=$|[\s;|&])/,
      lookbehind: !0
    },
    keyword: {
      pattern: /(^|[\s;|&])(?:let|:|\.|if|then|else|elif|fi|for|break|continue|while|in|case|function|select|do|done|until|echo|exit|return|set|declare)(?=$|[\s;|&])/,
      lookbehind: !0
    },
    "boolean": {
      pattern: /(^|[\s;|&])(?:true|false)(?=$|[\s;|&])/,
      lookbehind: !0
    },
    operator: /&&?|\|\|?|==?|!=?|<<<?|>>|<=?|>=?|=~/,
    punctuation: /\$?\(\(?|\)\)?|\.\.|[{}[\];]/
  };
  var t = a.variable[1].inside;
  t.string = e.languages.bash.string, t["function"] = e.languages.bash["function"], t.keyword = e.languages.bash.keyword, t["boolean"] = e.languages.bash["boolean"], t.operator = e.languages.bash.operator, t.punctuation = e.languages.bash.punctuation, e.languages.shell = e.languages.bash;
}(Prism);
Prism.languages.aspnet = Prism.languages.extend('markup', {
  'page-directive tag': {
    pattern: /<%\s*@.*%>/i,
    inside: {
      'page-directive tag': /<%\s*@\s*(?:Assembly|Control|Implements|Import|Master(?:Type)?|OutputCache|Page|PreviousPageType|Reference|Register)?|%>/i,
      rest: Prism.languages.markup.tag.inside
    }
  },
  'directive tag': {
    pattern: /<%.*%>/i,
    inside: {
      'directive tag': /<%\s*?[$=%#:]{0,2}|%>/i,
      rest: Prism.languages.csharp
    }
  }
}), Prism.languages.aspnet.tag.pattern = /<(?!%)\/?[^\s>\/]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+))?)*\s*\/?>/i, Prism.languages.insertBefore('inside', 'punctuation', {
  'directive tag': Prism.languages.aspnet['directive tag']
}, Prism.languages.aspnet.tag.inside['attr-value']), Prism.languages.insertBefore('aspnet', 'comment', {
  'asp comment': /<%--[\s\S]*?--%>/
}), Prism.languages.insertBefore('aspnet', Prism.languages.javascript ? 'script' : 'tag', {
  'asp script': {
    pattern: /(<script(?=.*runat=['"]?server['"]?)[\s\S]*?>)[\s\S]*?(?=<\/script>)/i,
    lookbehind: !0,
    inside: Prism.languages.csharp || {}
  }
});
!function (e) {
  e.languages.ruby = e.languages.extend('clike', {
    comment: [/#.*/, {
      pattern: /^=begin\s[\s\S]*?^=end/m,
      greedy: !0
    }],
    keyword: /\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\b/
  });
  var n = {
    pattern: /#\{[^}]+\}/,
    inside: {
      delimiter: {
        pattern: /^#\{|\}$/,
        alias: 'tag'
      },
      rest: e.languages.ruby
    }
  };
  delete e.languages.ruby["function"], e.languages.insertBefore('ruby', 'keyword', {
    regex: [{
      pattern: /%r([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1[gim]{0,3}/,
      greedy: !0,
      inside: {
        interpolation: n
      }
    }, {
      pattern: /%r\((?:[^()\\]|\\[\s\S])*\)[gim]{0,3}/,
      greedy: !0,
      inside: {
        interpolation: n
      }
    }, {
      pattern: /%r\{(?:[^#{}\\]|#(?:\{[^}]+\})?|\\[\s\S])*\}[gim]{0,3}/,
      greedy: !0,
      inside: {
        interpolation: n
      }
    }, {
      pattern: /%r\[(?:[^\[\]\\]|\\[\s\S])*\][gim]{0,3}/,
      greedy: !0,
      inside: {
        interpolation: n
      }
    }, {
      pattern: /%r<(?:[^<>\\]|\\[\s\S])*>[gim]{0,3}/,
      greedy: !0,
      inside: {
        interpolation: n
      }
    }, {
      pattern: /(^|[^/])\/(?!\/)(\[.+?]|\\.|[^/\\\r\n])+\/[gim]{0,3}(?=\s*($|[\r\n,.;})]))/,
      lookbehind: !0,
      greedy: !0
    }],
    variable: /[@$]+[a-zA-Z_]\w*(?:[?!]|\b)/,
    symbol: {
      pattern: /(^|[^:]):[a-zA-Z_]\w*(?:[?!]|\b)/,
      lookbehind: !0
    },
    'method-definition': {
      pattern: /(\bdef\s+)[\w.]+/,
      lookbehind: !0,
      inside: {
        "function": /\w+$/,
        rest: e.languages.ruby
      }
    }
  }), e.languages.insertBefore('ruby', 'number', {
    builtin: /\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\b/,
    constant: /\b[A-Z]\w*(?:[?!]|\b)/
  }), e.languages.ruby.string = [{
    pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1/,
    greedy: !0,
    inside: {
      interpolation: n
    }
  }, {
    pattern: /%[qQiIwWxs]?\((?:[^()\\]|\\[\s\S])*\)/,
    greedy: !0,
    inside: {
      interpolation: n
    }
  }, {
    pattern: /%[qQiIwWxs]?\{(?:[^#{}\\]|#(?:\{[^}]+\})?|\\[\s\S])*\}/,
    greedy: !0,
    inside: {
      interpolation: n
    }
  }, {
    pattern: /%[qQiIwWxs]?\[(?:[^\[\]\\]|\\[\s\S])*\]/,
    greedy: !0,
    inside: {
      interpolation: n
    }
  }, {
    pattern: /%[qQiIwWxs]?<(?:[^<>\\]|\\[\s\S])*>/,
    greedy: !0,
    inside: {
      interpolation: n
    }
  }, {
    pattern: /("|')(?:#\{[^}]+\}|\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
    greedy: !0,
    inside: {
      interpolation: n
    }
  }], e.languages.rb = e.languages.ruby;
}(Prism);
!function (h) {
  function v(e, n) {
    return '___' + e.toUpperCase() + n + '___';
  }

  Object.defineProperties(h.languages['markup-templating'] = {}, {
    buildPlaceholders: {
      value: function value(a, r, e, o) {
        if (a.language === r) {
          var c = a.tokenStack = [];
          a.code = a.code.replace(e, function (e) {
            if (typeof o === 'function' && !o(e)) return e;

            for (var n, t = c.length; a.code.indexOf(n = v(r, t)) !== -1;) {
              ++t;
            }

            return c[t] = e, n;
          }), a.grammar = h.languages.markup;
        }
      }
    },
    tokenizePlaceholders: {
      value: function value(p, k) {
        if (p.language === k && p.tokenStack) {
          p.grammar = h.languages[k];
          var m = 0;
          var d = Object.keys(p.tokenStack);
          !function e(n) {
            for (var t = 0; t < n.length && !(m >= d.length); t++) {
              var a = n[t];

              if (typeof a === 'string' || a.content && typeof a.content === 'string') {
                var r = d[m];
                var o = p.tokenStack[r];
                var c = typeof a === 'string' ? a : a.content;
                var i = v(k, r);
                var u = c.indexOf(i);

                if (u > -1) {
                  ++m;
                  var g = c.substring(0, u);
                  var l = new h.Token(k, h.tokenize(o, p.grammar), 'language-' + k, o);
                  var s = c.substring(u + i.length);
                  var f = [];
                  g && f.push.apply(f, e([g])), f.push(l), s && f.push.apply(f, e([s])), typeof a === 'string' ? n.splice.apply(n, [t, 1].concat(f)) : a.content = f;
                }
              } else a.content && e(a.content);
            }

            return n;
          }(p.tokens);
        }
      }
    }
  });
}(Prism);
!function (e) {
  var t = /\b(?:abstract|continue|for|new|switch|assert|default|goto|package|synchronized|boolean|do|if|private|this|break|double|implements|protected|throw|byte|else|import|public|throws|case|enum|instanceof|return|transient|catch|extends|int|short|try|char|final|interface|static|void|class|finally|long|strictfp|volatile|const|float|native|super|while|var|null|exports|module|open|opens|provides|requires|to|transitive|uses|with)\b/;
  var a = /\b[A-Z](?:\w*[a-z]\w*)?\b/;
  e.languages.java = e.languages.extend('clike', {
    'class-name': [a, /\b[A-Z]\w*(?=\s+\w+\s*[;,=())])/],
    keyword: t,
    "function": [e.languages.clike["function"], {
      pattern: /(\:\:)[a-z_]\w*/,
      lookbehind: !0
    }],
    number: /\b0b[01][01_]*L?\b|\b0x[\da-f_]*\.?[\da-f_p+-]+\b|(?:\b\d[\d_]*\.?[\d_]*|\B\.\d[\d_]*)(?:e[+-]?\d[\d_]*)?[dfl]?/i,
    operator: {
      pattern: /(^|[^.])(?:<<=?|>>>?=?|->|([-+&|])\2|[?:~]|[-+*/%&|^!=<>]=?)/m,
      lookbehind: !0
    }
  }), e.languages.insertBefore('java', 'class-name', {
    annotation: {
      alias: 'punctuation',
      pattern: /(^|[^.])@\w+/,
      lookbehind: !0
    },
    namespace: {
      pattern: /(\b(?:exports|import(?:\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\s+)[a-z]\w*(\.[a-z]\w*)+/,
      lookbehind: !0,
      inside: {
        punctuation: /\./
      }
    },
    generics: {
      pattern: /<(?:[\w\s,.&?]|<(?:[\w\s,.&?]|<(?:[\w\s,.&?]|<[\w\s,.&?]*>)*>)*>)*>/,
      inside: {
        'class-name': a,
        keyword: t,
        punctuation: /[<>(),.:]/,
        operator: /[?&|]/
      }
    }
  });
}(Prism);
!function (n) {
  n.languages.php = n.languages.extend('clike', {
    keyword: /\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\b/i,
    "boolean": {
      pattern: /\b(?:false|true)\b/i,
      alias: 'constant'
    },
    constant: [/\b[A-Z_][A-Z0-9_]*\b/, /\b(?:null)\b/i],
    comment: {
      pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,
      lookbehind: !0
    }
  }), n.languages.insertBefore('php', 'string', {
    'shell-comment': {
      pattern: /(^|[^\\])#.*/,
      lookbehind: !0,
      alias: 'comment'
    }
  }), n.languages.insertBefore('php', 'comment', {
    delimiter: {
      pattern: /\?>$|^<\?(?:php(?=\s)|=)?/i,
      alias: 'important'
    }
  }), n.languages.insertBefore('php', 'keyword', {
    variable: /\$+(?:\w+\b|(?={))/i,
    "package": {
      pattern: /(\\|namespace\s+|use\s+)[\w\\]+/,
      lookbehind: !0,
      inside: {
        punctuation: /\\/
      }
    }
  }), n.languages.insertBefore('php', 'operator', {
    property: {
      pattern: /(->)[\w]+/,
      lookbehind: !0
    }
  });
  var e = {
    pattern: /{\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\{])\$+(?:\w+(?:\[.+?]|->\w+)*)/,
    lookbehind: !0,
    inside: {
      rest: n.languages.php
    }
  };
  n.languages.insertBefore('php', 'string', {
    'nowdoc-string': {
      pattern: /<<<'([^']+)'(?:\r\n?|\n)(?:.*(?:\r\n?|\n))*?\1;/,
      greedy: !0,
      alias: 'string',
      inside: {
        delimiter: {
          pattern: /^<<<'[^']+'|[a-z_]\w*;$/i,
          alias: 'symbol',
          inside: {
            punctuation: /^<<<'?|[';]$/
          }
        }
      }
    },
    'heredoc-string': {
      pattern: /<<<(?:"([^"]+)"(?:\r\n?|\n)(?:.*(?:\r\n?|\n))*?\1;|([a-z_]\w*)(?:\r\n?|\n)(?:.*(?:\r\n?|\n))*?\2;)/i,
      greedy: !0,
      alias: 'string',
      inside: {
        delimiter: {
          pattern: /^<<<(?:"[^"]+"|[a-z_]\w*)|[a-z_]\w*;$/i,
          alias: 'symbol',
          inside: {
            punctuation: /^<<<"?|[";]$/
          }
        },
        interpolation: e
      }
    },
    'single-quoted-string': {
      pattern: /'(?:\\[\s\S]|[^\\'])*'/,
      greedy: !0,
      alias: 'string'
    },
    'double-quoted-string': {
      pattern: /"(?:\\[\s\S]|[^\\"])*"/,
      greedy: !0,
      alias: 'string',
      inside: {
        interpolation: e
      }
    }
  }), delete n.languages.php.string, n.hooks.add('before-tokenize', function (e) {
    if (/<\?/.test(e.code)) {
      n.languages['markup-templating'].buildPlaceholders(e, 'php', /<\?(?:[^"'/#]|\/(?![*/])|("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|(?:\/\/|#)(?:[^?\n\r]|\?(?!>))*|\/\*[\s\S]*?(?:\*\/|$))*?(?:\?>|$)/gi);
    }
  }), n.hooks.add('after-tokenize', function (e) {
    n.languages['markup-templating'].tokenizePlaceholders(e, 'php');
  });
}(Prism);
Prism.languages.typescript = Prism.languages.extend('javascript', {
  keyword: /\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\b/,
  builtin: /\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\b/
}), Prism.languages.ts = Prism.languages.typescript;
Prism.languages.python = {
  comment: {
    pattern: /(^|[^\\])#.*/,
    lookbehind: !0
  },
  'string-interpolation': {
    pattern: /(?:f|rf|fr)(?:("""|''')[\s\S]+?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2)/i,
    greedy: !0,
    inside: {
      interpolation: {
        pattern: /((?:^|[^{])(?:{{)*){(?!{)(?:[^{}]|{(?!{)(?:[^{}]|{(?!{)(?:[^{}])+})+})+}/,
        lookbehind: !0,
        inside: {
          'format-spec': {
            pattern: /(:)[^:(){}]+(?=}$)/,
            lookbehind: !0
          },
          'conversion-option': {
            pattern: /![sra](?=[:}]$)/,
            alias: 'punctuation'
          },
          rest: null
        }
      },
      string: /[\s\S]+/
    }
  },
  'triple-quoted-string': {
    pattern: /(?:[rub]|rb|br)?("""|''')[\s\S]+?\1/i,
    greedy: !0,
    alias: 'string'
  },
  string: {
    pattern: /(?:[rub]|rb|br)?("|')(?:\\.|(?!\1)[^\\\r\n])*\1/i,
    greedy: !0
  },
  "function": {
    pattern: /((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/g,
    lookbehind: !0
  },
  'class-name': {
    pattern: /(\bclass\s+)\w+/i,
    lookbehind: !0
  },
  decorator: {
    pattern: /(^\s*)@\w+(?:\.\w+)*/i,
    lookbehind: !0,
    alias: ['annotation', 'punctuation'],
    inside: {
      punctuation: /\./
    }
  },
  keyword: /\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\b/,
  builtin: /\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\b/,
  "boolean": /\b(?:True|False|None)\b/,
  number: /(?:\b(?=\d)|\B(?=\.))(?:0[bo])?(?:(?:\d|0x[\da-f])[\da-f]*\.?\d*|\.\d+)(?:e[+-]?\d+)?j?\b/i,
  operator: /[-+%=]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,
  punctuation: /[{}[\];(),.:]/
}, Prism.languages.python['string-interpolation'].inside.interpolation.inside.rest = Prism.languages.python, Prism.languages.py = Prism.languages.python;
Prism.languages.swift = Prism.languages.extend('clike', {
  string: {
    pattern: /("|')(\\(?:\((?:[^()]|\([^)]+\))+\)|\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
    greedy: !0,
    inside: {
      interpolation: {
        pattern: /\\\((?:[^()]|\([^)]+\))+\)/,
        inside: {
          delimiter: {
            pattern: /^\\\(|\)$/,
            alias: 'variable'
          }
        }
      }
    }
  },
  keyword: /\b(?:as|associativity|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic(?:Type)?|else|enum|extension|fallthrough|final|for|func|get|guard|if|import|in|infix|init|inout|internal|is|lazy|left|let|mutating|new|none|nonmutating|operator|optional|override|postfix|precedence|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|Self|set|static|struct|subscript|super|switch|throws?|try|Type|typealias|unowned|unsafe|var|weak|where|while|willSet|__(?:COLUMN__|FILE__|FUNCTION__|LINE__))\b/,
  number: /\b(?:[\d_]+(?:\.[\de_]+)?|0x[a-f0-9_]+(?:\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\b/i,
  constant: /\b(?:nil|[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\b/,
  atrule: /@\b(?:IB(?:Outlet|Designable|Action|Inspectable)|class_protocol|exported|noreturn|NS(?:Copying|Managed)|objc|UIApplicationMain|auto_closure)\b/,
  builtin: /\b(?:[A-Z]\S+|abs|advance|alignof(?:Value)?|assert|contains|count(?:Elements)?|debugPrint(?:ln)?|distance|drop(?:First|Last)|dump|enumerate|equal|filter|find|first|getVaList|indices|isEmpty|join|last|lexicographicalCompare|map|max(?:Element)?|min(?:Element)?|numericCast|overlaps|partition|print(?:ln)?|reduce|reflect|reverse|sizeof(?:Value)?|sort(?:ed)?|split|startsWith|stride(?:of(?:Value)?)?|suffix|swap|toDebugString|toString|transcode|underestimateCount|unsafeBitCast|with(?:ExtendedLifetime|Unsafe(?:MutablePointers?|Pointers?)|VaList))\b/
}), Prism.languages.swift.string.inside.interpolation.inside.rest = Prism.languages.swift;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(11)))

/***/ }),
/* 11 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 12 */
/***/ (function(module, exports) {

!function () {
  if (typeof self !== 'undefined' && self.Prism && self.document) {
    var l = 'line-numbers';
    var c = /\n(?!$)/g;

    var m = function m(e) {
      var t = a(e)['white-space'];

      if (t === 'pre-wrap' || t === 'pre-line') {
        var n = e.querySelector('code');
        var r = e.querySelector('.line-numbers-rows');
        var s = e.querySelector('.line-numbers-sizer');
        var i = n.textContent.split(c);
        s || ((s = document.createElement('span')).className = 'line-numbers-sizer', n.appendChild(s)), s.style.display = 'block', i.forEach(function (e, t) {
          s.textContent = e || '\n';
          var n = s.getBoundingClientRect().height;
          r.children[t].style.height = n + 'px';
        }), s.textContent = '', s.style.display = 'none';
      }
    };

    var a = function a(e) {
      return e ? window.getComputedStyle ? getComputedStyle(e) : e.currentStyle || null : null;
    };

    window.addEventListener('resize', function () {
      Array.prototype.forEach.call(document.querySelectorAll('pre.' + l), m);
    }), Prism.hooks.add('complete', function (e) {
      if (e.code) {
        var t = e.element;
        var n = t.parentNode;

        if (n && /pre/i.test(n.nodeName) && !t.querySelector('.line-numbers-rows')) {
          for (var r = !1, s = /(?:^|\s)line-numbers(?:\s|$)/, i = t; i; i = i.parentNode) {
            if (s.test(i.className)) {
              r = !0;
              break;
            }
          }

          if (r) {
            t.className = t.className.replace(s, ' '), s.test(n.className) || (n.className += ' line-numbers');
            var l;
            var a = e.code.match(c);
            var o = a ? a.length + 1 : 1;
            var u = new Array(o + 1).join('<span></span>');
            (l = document.createElement('span')).setAttribute('aria-hidden', 'true'), l.className = 'line-numbers-rows', l.innerHTML = u, n.hasAttribute('data-start') && (n.style.counterReset = 'linenumber ' + (parseInt(n.getAttribute('data-start'), 10) - 1)), e.element.appendChild(l), m(n), Prism.hooks.run('line-numbers', e);
          }
        }
      }
    }), Prism.hooks.add('line-numbers', function (e) {
      e.plugins = e.plugins || {}, e.plugins.lineNumbers = !0;
    }), Prism.plugins.lineNumbers = {
      getLine: function getLine(e, t) {
        if (e.tagName === 'PRE' && e.classList.contains(l)) {
          var n = e.querySelector('.line-numbers-rows');
          var r = parseInt(e.getAttribute('data-start'), 10) || 1;
          var s = r + (n.children.length - 1);
          t < r && (t = r), s < t && (t = s);
          var i = t - r;
          return n.children[i];
        }
      }
    };
  }
}();

/***/ }),
/* 13 */
/***/ (function(module, exports) {

/**
 * Lazy loading
 */
(function () {
  var lazyloadElems = document.querySelectorAll('.lazy');

  var beLazyOnIntersectionObserver = function beLazyOnIntersectionObserver(flag) {
    if (flag === 'dnt-excluded') {
      lazyloadElems = document.querySelectorAll('.lazy.lazy--exclude-dnt');
    }

    var elemObserver = new IntersectionObserver(function (entries) {
      entries.forEach(function (entry) {
        if (entry.isIntersecting) {
          var elem = entry.target;

          if (elem.classList.contains('lazy') && elem.hasAttribute('data-src')) {
            elem.src = elem.dataset.src;
            elem.classList.remove('lazy');
            elem.removeAttribute('data-src');
            elemObserver.unobserve(elem);
          }
        }
      });
    });
    lazyloadElems.forEach(function (elem) {
      elemObserver.observe(elem);
    });
  };

  var handleLazyFallback = function handleLazyFallback(lazyloadElems, lazyload) {
    var scrollTop = window.pageYOffset;
    lazyloadElems.forEach(function (el) {
      var offsetTop = el.offsetTop === 0 ? el.offsetParent.offsetTop : el.offsetTop;

      if (offsetTop < window.innerHeight + scrollTop) {
        if (el.classList.contains('lazy') && el.hasAttribute('data-src')) {
          el.src = el.dataset.src;
          el.classList.remove('lazy');
          el.removeAttribute('data-src');
        }
      }
    });

    if (lazyloadElems.length === 0) {
      document.removeEventListener('scroll', lazyload);
      window.removeEventListener('resize', lazyload);
      window.removeEventListener('orientationChange', lazyload);
    }
  };

  var beLazyFallback = function beLazyFallback(flag) {
    var lazyloadThrottleTimeout;

    if (flag === 'dnt-excluded') {
      lazyloadElems = document.querySelectorAll('.lazy.lazy--exclude-dnt');
    }

    var lazyload = function lazyload() {
      if (lazyloadThrottleTimeout) {
        clearTimeout(lazyloadThrottleTimeout);
      }

      lazyloadThrottleTimeout = setTimeout(function () {
        handleLazyFallback(lazyloadElems, lazyload);
      }, 20);
    };

    lazyload();
    document.addEventListener('scroll', lazyload, window.supportsPassive ? {
      passive: true
    } : false);
    window.addEventListener('resize', lazyload);
    window.addEventListener('orientationChange', lazyload);
  }; // On scroll, check elements with the "lazy" class name and transform their data-src attribute into src
  // Implementation uses IntersectionObserver if is available, otherwise fallbacks to using scroll, resize and orientationChange events


  var loadOnScroll = function loadOnScroll(flag) {
    if ('IntersectionObserver' in window) {
      beLazyOnIntersectionObserver(flag);
    } else {
      beLazyFallback(flag);
    }
  };

  var handleLazyEmbed = function handleLazyEmbed(target) {
    // If embed wrapper element child gets clicked, find the parent embed wrapper
    if (!target.classList.contains('embed__dnt-enable')) {
      target = window.helper.getParents(target).filter(function (item) {
        var isEmbedWrapper = false;

        if (item.classList) {
          isEmbedWrapper = item.classList.contains('embed__dnt-enable');
        }

        return isEmbedWrapper;
      })[0];
    }

    var el = target.nextElementSibling;

    if (el.classList.contains('lazy') && el.hasAttribute('data-src')) {
      el.src = el.dataset.src;
      el.classList.remove('lazy');
      el.removeAttribute('data-src');
      target.parentNode.removeChild(target);
    }
  };

  var loadOnClick = function loadOnClick() {
    var lazy = document.querySelectorAll('.lazy:not(.lazy--exclude-dnt)');
    var label = window.UIMessages ? window.UIMessages.dntLabel : '';
    lazy.forEach(function (item) {
      var wrapper = window.helper.getParents(item);
      wrapper[0].insertBefore(window.helper.createElementFromHTML("<div class=\"embed__dnt-enable\">".concat(window.helper.decodeHTMLEntities(label), "</div>")), wrapper[0].firstChild);
    });
    document.querySelector('body').addEventListener('click', function (e) {
      e.stopPropagation();

      if (e.target && e.target.matches('div.embed__dnt-enable, div.embed__dnt-enable *')) {
        handleLazyEmbed(e.target);
      }
    });
  }; // Conditionally load stylesheets


  var loadFonts = function loadFonts() {
    if (document.querySelector('code, pre')) {
      window.helper.addStylesheet('https://fonts.googleapis.com/css?family=Inconsolata');
    }
  }; // Fire on DOMContentLoaded


  document.addEventListener('DOMContentLoaded', function () {
    loadFonts(); // Check if "Do not flag" is enabled in the browser settings
    // If yes, make embeds load on click, otherwise lazyload on scroll

    if (window.doNotTrack || navigator.doNotTrack || navigator.msDoNotTrack) {
      if (window.doNotTrack === '1' || navigator.doNotTrack === 'yes' || navigator.doNotTrack === '1' || navigator.msDoNotTrack === '1') {
        loadOnClick();
        loadOnScroll('dnt-excluded');
      } else {
        loadOnScroll();
      }
    } else {
      loadOnScroll();
    }
  });
})();

/***/ }),
/* 14 */
/***/ (function(module, exports) {

/**
 * Table of contents, heading anchros, copy anchor URL to clipboard
 */
(function () {
  var articleContent = document.querySelector('.article__content');
  var tableOfContentsWrapper = document.querySelector('.table-of-contents__list');
  var tableOfContentsElem = document.querySelector('.table-of-contents');
  var anchorsOnly = document.querySelector('.article__content--anchors-only');
  var affixHeadings;
  var tableOfContentsElemFixed; // For all sub-headings set unique id and create the copy to clipboard icon

  var createAnchors = function createAnchors() {
    var headings = articleContent.querySelectorAll('h2:not(.table-of-contents__heading):not(.feedback__heading), h3, h4');
    var anchorNameList = [];
    headings.forEach(function (item) {
      var anchorName = item.innerHTML.toLowerCase().replace(/(<([^>]+)>)/ig, '').replace(/&[^\s]*;/g, '').replace(/\W/g, '-').replace(/[-]+/g, '-');
      anchorNameList.push(anchorName);
      var anchorNameCount = 0;
      anchorNameList.forEach(function (name) {
        if (name === anchorName) {
          anchorNameCount += 1;
        }
      });
      var id = "a-".concat(anchorName).concat(anchorNameCount > 1 ? "-".concat(anchorNameCount) : '');
      item.setAttribute('id', id);
      item.innerHTML = "".concat(item.innerHTML, "<a href=\"#").concat(id, "\" class=\"anchor-copy\" aria-hidden=\"true\"><span class=\"anchor-copy__tooltip\"></span></a>");
    });
  }; // Scroll to anchor on page load. Init all lazy loading elements to be able to scroll to the correct position


  var anchorOnLoad = function anchorOnLoad() {
    var hash = window.location.href.split('#')[1];

    if (hash) {
      // Load all lazy elements
      var lazyloadElems = document.querySelectorAll('.lazy');
      lazyloadElems.forEach(function (elem) {
        var parent = window.helper.findAncestor(elem, '.embed');
        var dnt;

        if (parent) {
          dnt = parent.querySelector('.embed__dnt-enable');
        }

        if (!dnt) {
          elem.src = elem.dataset.src;
          elem.classList.remove('lazy');
          elem.removeAttribute('data-src');
        }
      });
      setTimeout(function () {
        document.getElementById(hash).scrollIntoView({
          block: 'start',
          behavior: 'smooth'
        });
      }, 200);
    }
  }; // For all sub-headings create a list cascade representing table of contents and append it to the appropriate element


  var createTableOfContents = function createTableOfContents() {
    var headingsSelector = 'h2:not(.table-of-contents__heading):not(.table-of-contents__whatsnext):not(.feedback__heading)';

    if (document.querySelector('[data-display-mode="step-by-step"]')) {
      headingsSelector = 'h2:not(.table-of-contents__heading):not(.feedback__heading)';
    }

    var headings = articleContent.querySelectorAll(headingsSelector);
    var tableOfContents = '';
    var prevHeadingLevel = 2;
    headings.forEach(function (item) {
      var headingLevel = parseInt(item.tagName.replace('H', ''));

      if (prevHeadingLevel > headingLevel) {
        tableOfContents += '</ul>';
      }

      if (prevHeadingLevel < headingLevel) {
        tableOfContents += '<ul>';
      }

      tableOfContents += "<li><a href=\"#".concat(item.getAttribute('id'), "\">").concat(item.textContent, "</a></li>");
      prevHeadingLevel = headingLevel;
    });
    tableOfContentsWrapper.innerHTML = tableOfContents;

    if (tableOfContentsWrapper.innerHTML) {
      tableOfContentsElem.classList.add('table-of-contents--render');
    }

    affixHeadings = headings;
  }; // Scroll to appropriate anchor when a table of content items gets clicked


  var bindSmothScroll = function bindSmothScroll() {
    var tocs = document.querySelectorAll('.table-of-contents__list');

    for (var i = 0; i < tocs.length; i++) {
      tocs[i].addEventListener('click', function (event) {
        if (event.target && event.target.nodeName === 'A') {
          event.preventDefault();
          document.querySelector(event.target.getAttribute('href')).scrollIntoView({
            block: 'start',
            behavior: 'smooth'
          });
          history.replaceState(undefined, undefined, "".concat(event.target.getAttribute('href')));
        }
      });
    }
  };

  var toggleItemsFromWithinContentChunks = function toggleItemsFromWithinContentChunks() {
    var run = function run() {
      var chunks = document.querySelectorAll('[data-platform-chunk]');
      chunks = Array.prototype.slice.call(chunks).filter(function (chunk) {
        return chunk.classList.contains('hidden');
      });
      var ids = [];
      chunks.forEach(function (chunk) {
        var headings = chunk.querySelectorAll('h2[id]');
        headings.forEach(function (heading) {
          ids.push(heading.getAttribute('id'));
        });
      });
      var tocItems = document.querySelectorAll('.table-of-contents__list li a');
      tocItems.forEach(function (item) {
        if (ids.indexOf(item.getAttribute('href').replace('#', '')) > -1) {
          item.classList.add('hidden');
        } else {
          item.classList.remove('hidden');
        }
      });
    };

    run();
    document.querySelector('body').addEventListener('click', function (e) {
      if (e.target && e.target.classList.contains('language-selector__link')) {
        run();
      }
    });
  };

  var cloneToFixed = function cloneToFixed() {
    var toc = document.querySelector('.table-of-contents');

    if (toc) {
      toc = toc.cloneNode(true);
      var content = document.querySelector('.article__content');
      toc.classList.add('table-of-contents--fixed');
      content.appendChild(toc);
      tableOfContentsElemFixed = document.querySelector('.table-of-contents--fixed');
    }
  };

  var handleFixed = function handleFixed() {
    var selector = document.querySelector('.table-of-contents--fixed');
    var viewportWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);

    if (viewportWidth >= 1150 && selector) {
      var topOffset = (window.pageYOffset || document.scrollTop) - (document.clientTop || 0) || 0;
      var main = document.querySelector('.table-of-contents');
      var isTop = topOffset <= main.getBoundingClientRect().top + main.offsetHeight + (window.scrollY || document.documentElement.scrollTop);

      if (isTop) {
        var relativePositionTo = document.querySelector('.article__content h1');
        var langSelector = document.querySelector('.language-selector--fixed');

        var _topOffset = relativePositionTo ? relativePositionTo.getBoundingClientRect().top : 0;

        var langSelectorHeight = langSelector ? langSelector.querySelector('.language-selector__fixed-label').offsetHeight + langSelector.querySelector('.language-selector__label').offsetHeight + 31 : 0;

        if (langSelector) {
          selector.style.top = "".concat(_topOffset + langSelectorHeight > 160 ? _topOffset + langSelectorHeight : 160, "px");
        } else {
          selector.style.top = "".concat(_topOffset > 60 ? _topOffset : 60, "px");
        }

        selector.classList.remove('table-of-contents--visible');
      } else {
        selector.classList.add('table-of-contents--visible');
      }
    }
  };

  var arrayMin = function arrayMin(arr) {
    var len = arr.length;
    var min = Infinity;
    var minIndex = 0;

    while (len--) {
      if (arr[len][0] < min) {
        min = arr[len][0];
        minIndex = len;
      }
    }

    return arr[minIndex];
  };

  var filterNonHiddenHeadings = function filterNonHiddenHeadings(headings) {
    var nonHidden = [];

    for (var i = 0; i < headings.length; i++) {
      if (!headings[i].parentElement.classList.contains('hidden')) {
        nonHidden.push(headings[i]);
      }
    }

    return nonHidden;
  };

  var getNextHeadingPosition = function getNextHeadingPosition(nextHeading) {
    var position;

    if (nextHeading) {
      position = Math.floor(nextHeading.getBoundingClientRect().top);
    } else {
      var body = document.body;
      var html = document.documentElement;
      position = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);
    }

    return position;
  };

  var affix = function affix() {
    var headingsPosition = [];

    if (affixHeadings && tableOfContentsElemFixed) {
      var affixHeadingsLocal = filterNonHiddenHeadings(affixHeadings);

      for (var i = 0; i < affixHeadingsLocal.length; i++) {
        var nextHeading = affixHeadingsLocal[i + 1];
        var position = getNextHeadingPosition(nextHeading);
        headingsPosition.push([position, affixHeadingsLocal[i].id]);
      }

      var contentOffset = 128; // how many pixels before the heading is right on the top of viewport should the affix nav item get active

      headingsPosition = headingsPosition.filter(function (item) {
        return item[0] >= contentOffset;
      });
      var topHeading = arrayMin(headingsPosition);

      if (topHeading) {
        var active = tableOfContentsElemFixed.querySelector('.active');
        var futureActive = tableOfContentsElemFixed.querySelector("[href=\"#".concat(topHeading[1], "\"]"));

        if (active) {
          active.classList.remove('active');
        }

        if (futureActive) {
          futureActive.classList.add('active');
        }
      }
    }
  };

  if (tableOfContentsElem) {
    setTimeout(function () {
      createAnchors();
      createTableOfContents();
      cloneToFixed();
      bindSmothScroll();
      handleFixed();
      window.addEventListener('scroll', handleFixed, window.supportsPassive ? {
        passive: true
      } : false);
      anchorOnLoad();
      toggleItemsFromWithinContentChunks();

      if (!document.querySelector('[data-display-mode="step-by-step"]')) {
        affix();
        window.addEventListener('scroll', affix, window.supportsPassive ? {
          passive: true
        } : false);
      }
    }, 0);
  } else if (anchorsOnly) {
    createAnchors();
    anchorOnLoad();
  }
})();

/***/ }),
/* 15 */
/***/ (function(module, exports) {

(function () {
  // Iframes
  var monitor = setInterval(intervals, 100);

  function intervals() {
    var elem = document.activeElement;

    if (elem && elem.tagName === 'IFRAME' && elem.getAttribute('src') !== 'about:blank') {
      window.dataLayer.push({
        event: 'click',
        eventCategory: 'Embed',
        eventAction: 'click',
        eventLabel: elem.getAttribute('src'),
        eventValue: window.location.pathname
      });
      clearInterval(monitor);
      monitor = setInterval(exitIframe.bind(null, elem), 100);
    }
  }

  function exitIframe(iframe) {
    var elem = document.activeElement;

    if (elem && elem.tagName !== 'IFRAME' || elem && elem !== iframe) {
      clearInterval(monitor);
      monitor = setInterval(intervals, 100);
    }
  }
})();

/***/ }),
/* 16 */
/***/ (function(module, exports) {

(function () {
  var btn = document.querySelector('[data-click="support"]');

  if (btn) {
    btn.addEventListener('click', function () {
      if (window.Intercom) {
        window.Intercom('show');
      }
    });
  }
})();

/***/ }),
/* 17 */
/***/ (function(module, exports) {

(function () {
  var yesBtn = document.querySelector('.feedback__button--yes');
  var noBtn = document.querySelector('.feedback__button--no');
  var yesMsg = document.querySelector('.feedback__message--yes');
  var noMsg = document.querySelector('.feedback__message--no');
  var btnArea = document.querySelector('.feedback__answer');
  var form = document.querySelector('.feedback__form');
  var wrapper = document.querySelector('.feedback__response-wrapper');
  var close = document.querySelector('.feedback__close');
  var posted = document.querySelector('.feedback--posted');

  var setTopOffset = function setTopOffset(elem) {
    var toc = document.querySelector('.table-of-contents--fixed');

    if (toc) {
      var tocHeading = toc.querySelector('.table-of-contents__heading');
      var tocList = toc.querySelector('.table-of-contents__list');
      var tocOffset = toc.getBoundingClientRect().top;
      var offset = tocHeading.offsetHeight + tocList.offsetHeight + tocOffset + 32;
      elem.style.top = "".concat(offset, "px");
    }
  };

  var handleFixed = function handleFixed() {
    var selector = document.querySelector('.feedback');
    var viewportWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);

    if (viewportWidth >= 1150 && selector) {
      var isTop = false;

      if (!document.querySelector('[data-display-mode-wrapper]')) {
        var topOffset = (window.pageYOffset || document.scrollTop) - (document.clientTop || 0) || 0;
        var main = document.querySelector('.article__content .table-of-contents:not(.hidden):not(.table-of-contents--fixed)') || document.querySelector('.article__filter') || document.querySelector('.article__notes');
        isTop = topOffset <= (main.getBoundingClientRect().top || 0) + main.offsetHeight + (window.scrollY || document.documentElement.scrollTop);
      }

      if (isTop) {
        selector.classList.remove('feedback--visible');
      } else {
        setTopOffset(selector);
        selector.classList.add('feedback--visible');
      }
    }
  };

  var sendFeedback = function sendFeedback(value) {
    if (!window.dataLayer) {
      window.dataLayer = [];
    }

    if (window.dataLayer) {
      window.dataLayer.push({
        event: 'event',
        eventCategory: 'feedback--submitted',
        eventAction: 'Click',
        eventLabel: window.location.pathname,
        eventValue: value
      });
    }
  };

  var handleFeedback = function handleFeedback(e) {
    e.preventDefault();

    if (e.target) {
      if (e.target.matches('.feedback__button--yes') || e.target.matches('.feedback__button--yes span')) {
        onBtnClick(yesBtn, yesMsg, 1);
      } else if (e.target.matches('.feedback__button--no') || e.target.matches('.feedback__button--no span')) {
        onBtnClick(noBtn, noMsg, 0);
      }
    }
  };

  var onBtnClick = function onBtnClick(btn, msg, value) {
    btnArea.removeEventListener('click', handleFeedback);
    btnArea.classList.add('feedback__answer--answered');
    btn.classList.add('feedback__button--active');
    wrapper.classList.remove('feedback__response-wrapper--hidden');

    if (msg) {
      msg.classList.remove('feedback__message--hidden');
    }

    if (!posted) {
      sendFeedback(value);
    }

    if (form && value === 0) {
      form.classList.remove('feedback__form--hidden');
      window.helper.loadRecaptcha();
    }
  };

  var closeFeedback = function closeFeedback() {
    if (close) {
      close.addEventListener('click', function () {
        wrapper.classList.add('feedback__response-wrapper--hidden');
        noBtn.classList.add('feedback__button--closed');
        yesBtn.classList.add('feedback__button--closed');
      });
    }
  };

  if (form) {
    window.addEventListener('scroll', handleFixed, window.supportsPassive ? {
      passive: true
    } : false);
    window.addEventListener('resize', handleFixed, window.supportsPassive ? {
      passive: true
    } : false);
  }

  if (yesMsg && noMsg && !posted) {
    btnArea.addEventListener('click', handleFeedback);
  }

  if (yesMsg && noMsg) {
    yesMsg.classList.add('feedback__message--hidden');
    noMsg.classList.add('feedback__message--hidden');
  }

  if (form && !posted) {
    form.classList.add('feedback__form--hidden');
  }

  if (posted) {
    onBtnClick(noBtn, noMsg, 0);

    if (form) {
      form.classList.remove('feedback__form--hidden');
    }
  }

  closeFeedback();
})();

/***/ }),
/* 18 */
/***/ (function(module, exports) {

window.helperForm = function () {
  var displayValidationMessages = function displayValidationMessages(data, form) {
    for (var item in data) {
      if (Object.prototype.hasOwnProperty.call(data, item)) {
        var errorElem = form.querySelector("[data-form-error=\"".concat(item, "\"]"));

        if (errorElem) {
          errorElem.innerHTML = data[item];
        }
      }
    }
  };

  var validateAndSubmitForm = function validateAndSubmitForm(form, button, callback) {
    if (!form.checkValidity()) {
      // Create the temporary button, click and remove it
      var tmpSubmit = document.createElement('button');
      form.appendChild(tmpSubmit);
      tmpSubmit.click();
      form.removeChild(tmpSubmit);
    } else {
      if (!button.classList.contains('form__button--loading')) {
        callback();
      }
    }
  };

  var enableInputs = function enableInputs(form, recaptchaCover) {
    form.querySelectorAll('.form__input').forEach(function (item) {
      item.removeAttribute('disabled');
    });
    recaptchaCover.classList.remove('form__recaptcha-disabled--visible');
  };

  var disableInputs = function disableInputs(form, recaptchaCover) {
    form.querySelectorAll('.form__input').forEach(function (item) {
      item.setAttribute('disabled', 'disabled');
    });
    recaptchaCover.classList.add('form__recaptcha-disabled--visible');
  };

  var addLoadingToButton = function addLoadingToButton(button) {
    button.classList.add('form__button--loading');
  };

  var removeLoadingFromButton = function removeLoadingFromButton(button) {
    button.classList.remove('form__button--loading');
  };

  var submitData = function submitData(endpoint, data, callback) {
    return window.helper.ajaxPost(endpoint, data, callback, 'json');
  };

  var clearForm = function clearForm(form) {
    form.querySelectorAll('.form__input').forEach(function (item) {
      item.value = '';
    });
  };

  var hideForm = function hideForm(form) {
    form.classList.add('form--hidden');
  };

  var submitForm = function submitForm(settings) {
    settings.clearMessages();
    disableInputs(settings.form, settings.recaptchaCover);
    addLoadingToButton(settings.submitButton);
    var data = settings.collectData();
    window.helperForm.submitData(settings.endpoint, data, settings.processData);
  };

  return {
    displayValidationMessages: displayValidationMessages,
    validateAndSubmitForm: validateAndSubmitForm,
    enableInputs: enableInputs,
    disableInputs: disableInputs,
    addLoadingToButton: addLoadingToButton,
    removeLoadingFromButton: removeLoadingFromButton,
    submitData: submitData,
    clearForm: clearForm,
    hideForm: hideForm,
    submitForm: submitForm
  };
}();

/***/ }),
/* 19 */
/***/ (function(module, exports) {

(function () {
  var toggleLabel = function toggleLabel(item) {
    if (item.value.trim() !== '') {
      item.classList.add('form__input--value');
    } else {
      item.classList.remove('form__input--value');
    }
  };

  var handleLabels = function handleLabels() {
    var inputs = document.querySelectorAll('.form__input');

    if (inputs.length) {
      inputs.forEach(function (item) {
        toggleLabel(item);
        item.addEventListener('blur', function () {
          toggleLabel(item);
        });
      });
    }
  };

  handleLabels();
})();

/***/ }),
/* 20 */
/***/ (function(module, exports) {

(function () {
  var formFeedback = document.querySelector('.feedback__form');

  if (formFeedback) {
    var submitButtonFeedback = formFeedback.querySelector('.form__button');
    var recaptchaCoverFeedback = formFeedback.querySelector('.form__recaptcha-disabled');

    var collectFeedbackData = function collectFeedbackData() {
      var data = {};
      data.feedback = formFeedback.querySelector('#feedback').value;
      data.email = formFeedback.querySelector('#email').value;
      data['g-recaptcha-response'] = window.grecaptcha.getResponse();
      data.url = window.location.href;
      return data;
    };

    var clearFeedbackMessages = function clearFeedbackMessages() {
      document.querySelector('.feedback__message').classList.add('feedback__message--hidden');
      formFeedback.querySelectorAll('[data-form-error]').forEach(function (item) {
        item.innerHTML = '';
      });
    };

    var displaySuccessMessage = function displaySuccessMessage() {
      document.querySelector('.feedback__message--yes').classList.remove('feedback__message--hidden');
      document.querySelector('.feedback__message--no').classList.add('feedback__message--hidden');
    };

    var processFeedbackData = function processFeedbackData(data) {
      window.helperForm.enableInputs(formFeedback, recaptchaCoverFeedback);
      window.helperForm.removeLoadingFromButton(submitButtonFeedback);
      window.grecaptcha.reset();

      if (data.isValid) {
        window.helperForm.clearForm(formFeedback);
        window.helperForm.hideForm(formFeedback);
        displaySuccessMessage();
      } else {
        window.helperForm.displayValidationMessages(data, formFeedback);
      }
    };

    var submitFeedbackForm = function submitFeedbackForm() {
      window.helperForm.submitForm({
        clearMessages: clearFeedbackMessages,
        form: formFeedback,
        recaptchaCover: recaptchaCoverFeedback,
        processData: processFeedbackData,
        submitButton: submitButtonFeedback,
        collectData: collectFeedbackData,
        endpoint: '/form/feedback'
      });
    };

    submitButtonFeedback.addEventListener('click', function (e) {
      e.preventDefault();
      window.helperForm.validateAndSubmitForm(formFeedback, e.target, submitFeedbackForm);
    });
  }
})();

/***/ }),
/* 21 */
/***/ (function(module, exports) {

(function () {
  var form = document.querySelector('.form__certification');

  if (form) {
    var submitButton = form.querySelector('.form__button');
    var recaptchaCover = form.querySelector('.form__recaptcha-disabled');

    var collectData = function collectData() {
      var data = {};
      var companyField = form.querySelector('#custom_field_1');

      if (companyField) {
        data.custom_field_1 = companyField.value;
      }

      data.course_id = form.querySelector('#course_id').value;
      data.first_name = form.querySelector('#first_name').value;
      data.last_name = form.querySelector('#last_name').value;
      data.email = form.querySelector('#email').value;
      data['g-recaptcha-response'] = window.grecaptcha.getResponse();
      return data;
    };

    var clearMessages = function clearMessages() {
      form.querySelectorAll('[data-form-error]').forEach(function (item) {
        item.innerHTML = '';
      });
      document.querySelector('[data-form-warning]').innerHTML = '';
    };

    var displaySuccessMessage = function displaySuccessMessage(data) {
      document.querySelector('[data-form-success]').innerHTML = data.success;
    };

    var displayWarningMessage = function displayWarningMessage(data) {
      document.querySelector('[data-form-warning]').innerHTML = data.warning;
    };

    var processData = function processData(data) {
      window.helperForm.enableInputs(form, recaptchaCover);
      window.helperForm.removeLoadingFromButton(submitButton);
      window.grecaptcha.reset();

      if (data.isValid) {
        if (data.warning) {
          displayWarningMessage(data);
        }

        if (data.success) {
          window.helperForm.clearForm(form);
          window.helperForm.hideForm(form);
          displaySuccessMessage(data);
        }
      } else {
        window.helperForm.displayValidationMessages(data, form);
      }
    };

    var submitForm = function submitForm() {
      window.helperForm.submitForm({
        clearMessages: clearMessages,
        form: form,
        recaptchaCover: recaptchaCover,
        processData: processData,
        submitButton: submitButton,
        collectData: collectData,
        endpoint: '/form/certification'
      });
    };

    submitButton.addEventListener('click', function (e) {
      e.preventDefault();
      window.helperForm.validateAndSubmitForm(form, e.target, submitForm);
    });
  }
})();

/***/ }),
/* 22 */
/***/ (function(module, exports) {

(function () {
  if (localStorage) {
    if (localStorage.getItem('KCDOCS.cookieBar') !== 'true') {
      var bar = '<div class="cookie-bar js-cookie-bar"><div class="cookie-bar__container"><div class="cookie-bar__inner"><div class="cookie-bar__text"></div><div class="cookie-bar__close js-cookie-bar__close">×</div></div></div></div>';
      document.querySelector('.footer').insertAdjacentHTML('afterend', bar);

      if (window.UIMessages && window.UIMessages.cookieBar) {
        document.querySelector('.cookie-bar__text').innerHTML = window.helper.decodeHTMLEntities(window.UIMessages.cookieBar);
      }
    }

    var closeEl = document.querySelector('.js-cookie-bar__close');

    if (closeEl !== null) {
      closeEl.addEventListener('click', function () {
        var barEl = document.querySelector('.js-cookie-bar');
        barEl.parentNode.removeChild(barEl);
        localStorage.setItem('KCDOCS.cookieBar', 'true');
      });
    }
  }
})();

/***/ }),
/* 23 */
/***/ (function(module, exports) {

(function () {
  var warning = document.querySelector('.preview-warning');

  if (warning) {
    var links = warning.querySelectorAll('a');

    for (var i = 0; i < links.length; i++) {
      if (links[i].innerHTML === 'live version') {
        var loc = window.location;
        var href = links[i].getAttribute('href');

        if (href.endsWith('/')) {
          href = href.slice(0, -1);
        }

        links[i].setAttribute('href', href + loc.pathname + loc.search + loc.hash);
      }
    }
  }
})();

/***/ }),
/* 24 */
/***/ (function(module, exports) {

(function () {
  var positionTooltips = function positionTooltips() {
    document.querySelectorAll('.icon').forEach(function (item) {
      var tooltip = item.querySelector('.icon__tooltip');
      var offsetRight = window.innerWidth - item.getBoundingClientRect().right;

      if (tooltip) {
        tooltip.classList.remove('icon__tooltip--right');
      }

      if (tooltip && offsetRight < 200) {
        tooltip.classList.add('icon__tooltip--right');
      }
    });
  };

  positionTooltips();
  window.addEventListener('resize', positionTooltips);
})();

/***/ }),
/* 25 */
/***/ (function(module, exports) {

/**
 * Initializes Algolia search with use of autocomplete.js
 */
(function () {
  // Get Algolia API details from object in the global scope (should be present in the page head)
  // Or use API detail injected with url parameters
  window.searchAPI.appid = window.helper.getParameterByName('searchappid') || window.searchAPI.appid;
  window.searchAPI.apikey = window.helper.getParameterByName('window.searchAPIkey') || window.searchAPI.apikey;
  window.searchAPI.indexname = window.helper.getParameterByName('searchindexname') || window.searchAPI.indexname;
  var client = window.algoliasearch(window.searchAPI.appid, window.searchAPI.apikey);
  var tutorials = client.initIndex(window.searchAPI.indexname);
  var url = window.location;
  var searchWrapper = document.querySelector('.navigation__search-wrapper');
  var searchOverlay = document.querySelector('.search-overlay');
  var searchTrigger = document.querySelector('[data-search-trigger]');
  var searchTarget = document.querySelector('[data-search-target]');
  var navigation = document.querySelector('.navigation');
  var searchTerm = '';
  var searchResultSelected = false;
  var searchResultsNumber = 0;
  var searchInput = document.querySelector('#nav-search'); // Get injected KC API details

  var projectIdUrl = window.helper.getParameterByName('projectid');
  var previewApiKeyUrl = window.helper.getParameterByName('previewapikey'); // Build query string with injected KC API details for the urlMap

  var queryString = function () {
    var qString = '';
    qString += typeof projectIdUrl !== 'undefined' && projectIdUrl !== null ? "projectid=".concat(projectIdUrl, "&") : '';
    qString += typeof previewApiKeyUrl !== 'undefined' && previewApiKeyUrl !== null ? "previewapikey=".concat(previewApiKeyUrl, "&") : '';
    qString = qString.slice(0, -1);
    qString = qString ? "?".concat(qString) : '';
    return qString;
  }();

  var arrowPress = function arrowPress(e) {
    e = e || window.event;

    if (e.keyCode === 38 || e.keyCode === 40 || e.keyCode === 37 || e.keyCode === 39) {
      searchInput.value = window.filterXSS(decodeURIComponent(searchTerm));
    }
  };

  var removeInlineElements = function removeInlineElements(content) {
    if (content) {
      content = content.replace(/{@[a-z,0-9,-</>]+@}/g, '');
      content = content.replace(/{~[^~]+~}/g, '');
      content = content.replace(/\r?\n|\r/g, ' ');
    }

    return content;
  };

  var formatSuggestionContent = function formatSuggestionContent(suggestion) {
    var ellipsisText = '&hellip;';
    suggestion._snippetResult.content.value = "".concat(ellipsisText).concat(suggestion._snippetResult.content.value).concat(ellipsisText);
    return suggestion;
  };

  var getTech = function getTech(platform) {
    var tech = platform;

    if (window.platformsConfig && window.platformsConfig.length) {
      for (var i = 0; i < window.platformsConfig.length; i++) {
        if (window.platformsConfig[i].platform === platform) {
          tech = window.platformsConfig[i].url;
        }
      }
    }

    return tech;
  };

  var formatSuggestion = function formatSuggestion(suggestion, urlMap) {
    // Store current search input value for use of querystring that is used in Google Analytics search terms
    searchTerm = encodeURIComponent(searchInput.value); // Get url from the urlMap

    var suggestionUrl = urlMap.filter(function (item) {
      return item.codename === suggestion.codename;
    }); // Add an anchor to the url if available

    var anchor = suggestion._highlightResult.heading.value ? "#a-".concat(suggestion._highlightResult.heading.value.replace(/<\/?[^>]+(>|$)/g, '').toLowerCase().replace(/\W/g, '-').replace(/[-]+/g, '-')) : '';
    var tech = suggestion.platforms && suggestion.platforms.length === 1 ? "?tech=".concat(getTech(suggestion.platforms[0])) : '';
    suggestion.resolvedUrl = suggestionUrl.length ? "".concat(suggestionUrl[0].url).concat(suggestionUrl[0].url.indexOf('?tech') === -1 ? tech : '').concat(suggestion.section !== 'API' ? anchor : '') : '';
    var section = suggestion.section === 'tutorials' && suggestion.resolvedUrl.includes('/reference/') ? 'reference' : suggestion.section;

    if (section.toLowerCase() === 'api') {
      section = 'reference';
    } // Template for a single search result suggestion


    return "<a href=\"".concat(suggestion.resolvedUrl, "\" class=\"suggestion\">\n                    <div class=\"suggestion__left\">\n                        <span class=\"suggestion__heading\">").concat(removeInlineElements(suggestion._highlightResult.title.value), "</span>\n                        ").concat(suggestion._highlightResult.heading.value ? '<span class="suggestion__sub-heading">' + removeInlineElements(suggestion._highlightResult.heading.value) + '</span>' : '', "\n                        <p class=\"suggestion__text\">").concat(removeInlineElements(suggestion._snippetResult.content.value), "</p>\n                    </div>\n                    <div class=\"suggestion__right\">\n                        <span class=\"suggestion__category suggestion__category--").concat(section.toLowerCase(), "\">").concat(section.toUpperCase(), "</span>\n                    </div>\n                </a>");
  };

  var formatEmptySuggestion = function formatEmptySuggestion() {
    searchTerm = encodeURIComponent(searchInput.value); // Template for a empty result

    return "<div class=\"suggestion suggestion--empty\">\n                    <span class=\"suggestion__heading\">".concat(window.UIMessages ? window.UIMessages.searchNoResults : '', "</span>\n                </div>");
  };

  var logSearchTermNumber = function logSearchTermNumber(term) {
    window.dataLayer.push({
      event: 'event',
      eventCategory: 'search--searched-result',
      eventAction: window.filterXSS(decodeURIComponent(term)),
      eventLabel: searchResultsNumber
    });
  };

  var logSearchTermErased = function logSearchTermErased() {
    window.dataLayer.push({
      event: 'event',
      eventCategory: 'search--used',
      eventAction: window.filterXSS(decodeURIComponent(searchTerm)),
      eventLabel: 'Not clicked'
    });
  };

  var logSearchTermSelected = function logSearchTermSelected(term, url) {
    window.dataLayer.push({
      event: 'event',
      eventCategory: 'search--used',
      eventAction: decodeURIComponent(term),
      eventLabel: url
    });
  };

  var onAutocompleteSelected = function onAutocompleteSelected(suggestion, context) {
    searchResultSelected = true;
    searchInput.value = window.filterXSS(decodeURIComponent(searchTerm));
    logSearchTermSelected(searchTerm, suggestion.resolvedUrl);
    logSearchTermNumber(searchTerm); // Do nothing on click, as the browser will handle <a> tag by default

    if (context.selectionMethod === 'click') {
      return;
    } // Change the page (for example, when enter key gets hit)


    window.location.assign("".concat(suggestion.resolvedUrl));
  };

  var onAutocompleteUpdated = function onAutocompleteUpdated() {
    setTimeout(function () {
      document.querySelector('.aa-dropdown-menu').scrollTop = 0; // Set scroll position to top
    }, 0);
  };

  var triggerSearchPanel = function triggerSearchPanel() {
    if (searchTrigger) {
      searchTrigger.addEventListener('click', function () {
        if (!searchTrigger.classList.contains('trigger-active')) {
          searchTrigger.classList.add('trigger-active');
          searchTarget.classList.add('toggle-active');
          var input = searchTarget.querySelector('#nav-search');

          if (input) {
            setTimeout(function () {
              input.focus();
            }, 100);
          }
        }
      });
    }
  };

  var onAutocompleteClosed = function onAutocompleteClosed() {
    if (searchTerm !== '' && !searchResultSelected) {
      logSearchTermNumber(searchTerm);
      logSearchTermErased();
    }

    if (searchWrapper && searchOverlay) {
      navigation.classList.remove('navigation--search-active');
      searchWrapper.classList.remove('navigation__search-wrapper--wide');
      searchOverlay.classList.remove('search-overlay--visible');
      setTimeout(function () {
        if (searchTrigger) {
          searchTrigger.classList.remove('trigger-active');
          searchTarget.classList.remove('toggle-active');
        }
      }, 100);
    }
  };

  var onAutocompleteOpened = function onAutocompleteOpened() {
    if (searchWrapper && searchOverlay) {
      navigation.classList.add('navigation--search-active');
      searchWrapper.classList.add('navigation__search-wrapper--wide');
      searchOverlay.classList.add('search-overlay--visible');
    }

    searchInput.focus();
  };

  var getSuggestionsSource = function getSuggestionsSource(hitsSource, query, callback) {
    hitsSource(query, function (suggestions) {
      searchResultsNumber = suggestions.length;
      var formattedSuggestions = [];

      for (var i = 0; i < suggestions.length; i++) {
        formattedSuggestions.push(formatSuggestionContent(suggestions[i]));
      }

      callback(formattedSuggestions);
    });
  };

  var autocompleteSettings = {
    autoselect: true,
    openOnFocus: true,
    clearOnSelected: false,
    debug: false
  };

  var getAutocompleteTemplates = function getAutocompleteTemplates(urlMap) {
    return {
      header: function header() {
        return "<div class=\"aa-header\">".concat(searchResultsNumber, " results for '<strong>").concat(window.filterXSS(decodeURIComponent(searchTerm)), "</strong>'</div>");
      },
      suggestion: function suggestion(_suggestion) {
        return formatSuggestion(_suggestion, urlMap);
      },
      empty: function empty() {
        return formatEmptySuggestion();
      }
    };
  }; // Init Algolia


  var initAutocomplete = function initAutocomplete(urlMap) {
    // Init autocomplete and set maximum of suggested search items
    var hitsSource = window.autocomplete.sources.hits(tutorials, {
      hitsPerPage: 50
    });
    var searchInputIsFocused = false;

    if (searchInput === document.activeElement) {
      searchInputIsFocused = true;
    }

    window.autocomplete('#nav-search', autocompleteSettings, [{
      source: function source(query, callback) {
        getSuggestionsSource(hitsSource, query, callback);
      },
      displayKey: 'title',
      templates: getAutocompleteTemplates(urlMap)
    }]).on('autocomplete:opened', onAutocompleteOpened).on('autocomplete:selected', function (event, suggestion, dataset, context) {
      onAutocompleteSelected(suggestion, context);
    }).on('autocomplete:closed', onAutocompleteClosed).on('autocomplete:updated', onAutocompleteUpdated);

    if (searchInputIsFocused) {
      searchInput.focus();
    }
  };

  var initAlgoliaSearch = function initAlgoliaSearch() {
    document.onkeydown = arrowPress; // Get urlMap and init the autocomplete

    window.helper.ajaxGet("".concat(url.protocol, "//").concat(url.hostname + (location.port ? ':' + location.port : ''), "/urlmap").concat(queryString), function (urlMap) {
      initAutocomplete(urlMap);
    }, 'json');
  };

  var setFocusOnMagnifier = function setFocusOnMagnifier(prefix) {
    var search = document.querySelector(".".concat(prefix, "__search"));

    if (search) {
      var icon = search.querySelector(".".concat(prefix, "__search-icon"));
      icon.addEventListener('click', function () {
        searchInput.focus();
      });
    }
  };

  if (window.searchAPI) {
    initAlgoliaSearch();
    setFocusOnMagnifier('navigation');
    setFocusOnMagnifier('hero');
    triggerSearchPanel();
  }
})();

/***/ }),
/* 26 */
/***/ (function(module, exports) {

(function () {
  var getUniqueOptions = function getUniqueOptions(options) {
    var unique = [];

    for (var i = 0; i < options.length; i++) {
      var optionValue = options[i].getAttribute('data-filter-value');
      var exists = false;

      for (var j = 0; j < unique.length; j++) {
        var uniqueValue = unique[j].getAttribute('data-filter-value');

        if (optionValue === uniqueValue) {
          exists = true;
          break;
        }
      }

      if (!exists) {
        unique.push(options[i]);
      }
    }

    return unique;
  };

  var renderFilters = function renderFilters() {
    var filters = document.querySelectorAll('[data-filter-selector]');

    for (var i = 0; i < filters.length; i++) {
      var options = document.querySelectorAll("[data-filter-target=".concat(filters[i].getAttribute('data-filter-selector'), "]"));
      options = getUniqueOptions(options);
      var optionsMarkup = "<div class=\"filter-label\">".concat(filters[i].getAttribute('data-filter-selector-label'), "</div><div class=\"filter\"><div class=\"filter__label\">All</div><ul class=\"filter__list\"><li class=\"filter__item\" data-filter-option=\"__all\">All</li>");

      for (var j = 0; j < options.length; j++) {
        optionsMarkup += "<li class=\"filter__item\" data-filter-option=\"".concat(options[j].getAttribute('data-filter-value'), "\">").concat(options[j].getAttribute('data-filter-label'), "</li>");
      }

      optionsMarkup += '</ul></div>';
      filters[i].innerHTML = optionsMarkup;
    }
  };

  var labelInteraction = function labelInteraction(target, filters) {
    if (target.matches('.filter__label')) {
      var filter = helper.findAncestor(target, '.filter');

      if (filter.classList.contains('filter--opened')) {
        filter.classList.remove('filter--opened');
      } else {
        filter.classList.add('filter--opened');
      }
    } else {
      for (var i = 0; i < filters.length; i++) {
        filters[i].classList.remove('filter--opened');
      }
    }
  };

  var itemInteraction = function itemInteraction(target, filterElems) {
    if (target.matches('.filter__item')) {
      var filterLabel = helper.findAncestor(target, '.filter').querySelector('.filter__label');
      var filterItems = helper.findAncestor(target, '.filter__list').querySelectorAll('.filter__item');
      filterLabel.innerHTML = target.innerHTML;

      for (var i = 0; i < filterItems.length; i++) {
        filterItems[i].classList.remove('filter__item--active');
      }

      target.classList.add('filter__item--active');

      for (var _i = 0; _i < filterElems.length; _i++) {
        filterElems[_i].classList.remove('filter-hidden');

        var items = filterElems[_i].getAttribute('data-filter-item').split(' ');

        if (items.indexOf(target.getAttribute('data-filter-option')) === -1) {
          filterElems[_i].classList.add('filter-hidden');
        }
      }
    }
  };

  var filterInteractions = function filterInteractions() {
    var filters = document.querySelectorAll('[data-filter-selector] .filter');
    var filterElems = document.querySelectorAll('[data-filter-item]');
    document.querySelector('body').addEventListener('click', function (e) {
      if (e.target) {
        labelInteraction(e.target, filters);
        itemInteraction(e.target, filterElems);
      }
    });
  };

  renderFilters();
  filterInteractions();
})();

/***/ }),
/* 27 */
/***/ (function(module, exports) {

(function () {
  var parallax = document.querySelectorAll('[data-parallax]');
  window.addEventListener('scroll', function () {
    for (var i = 0; i < parallax.length; i++) {
      var parallaxTarget = document.querySelector('[data-parallax-target="' + parallax[i].getAttribute('data-parallax') + '"]');
      var viewportOffset = parallax[i].getBoundingClientRect();
      var visibilityIndex = viewportOffset.top / window.innerHeight * 100;

      if (visibilityIndex >= 0 && visibilityIndex <= 100) {
        var parallaxOffset = parseInt(getComputedStyle(parallaxTarget).bottom);
        parallaxTarget.style.transform = 'translate3d(0, ' + Math.floor(parallaxOffset - visibilityIndex / 100 * parallaxOffset) + 'px, 0)';
      }
    }
  });
})();

/***/ }),
/* 28 */
/***/ (function(module, exports) {

(function () {
  var body = document.querySelector('body');

  var setHoverPosition = function setHoverPosition(e) {
    if (e.target && (e.target.matches('.feedback__button') || e.target.matches('.form__button') || e.target.matches('.button') || e.target.matches('.cta .call-to-action'))) {
      var rect = e.target.getBoundingClientRect();
      var top = e.clientY - rect.top;
      var left = e.clientX - rect.left;
      var span = e.target.querySelector('span:last-child');

      if (span) {
        span.style.top = top + 'px';
        span.style.left = left + 'px';
      }
    }
  };

  body.addEventListener('mouseover', function (e) {
    setHoverPosition(e);
  });
  body.addEventListener('mouseout', function (e) {
    setHoverPosition(e);
  });
})();

/***/ }),
/* 29 */
/***/ (function(module, exports) {

(function () {
  var allSamples = document.querySelectorAll('[data-platform-code]');

  var wrap = function wrap(el) {
    var div = document.createElement('div');
    div.classList.add('code-sample-standalone');
    el.parentNode.insertBefore(div, el);
    div.appendChild(el);
  };

  for (var i = 0; i < allSamples.length; i++) {
    if (!allSamples[i].parentNode.classList.contains('code-samples')) {
      wrap(allSamples[i]);
    }
  }
})();

/***/ }),
/* 30 */
/***/ (function(module, exports) {

/* eslint-disable no-new */

/* eslint-disable no-undef */
(function () {
  var createNavWrap = function createNavWrap(section) {
    var wrap = section.querySelector('[data-display-mode-wrap]');

    if (!wrap) {
      wrap = document.createElement('div');
      wrap.setAttribute('data-display-mode-wrap', '');
      section.appendChild(wrap);
    }
  };

  var createNavLink = function createNavLink(sections, i, direction) {
    var index = direction === 'prev' ? i - 1 : i + 1;
    var section = sections[index];
    createNavWrap(sections[i]);

    if (section) {
      var link = document.createElement('a');
      link.setAttribute('href', "#".concat(section.getAttribute('data-display-mode-id')));
      link.innerHTML = "<span>".concat(window.UIMessages ? window.UIMessages["".concat(direction, "PartText")] : "Go to ".concat(direction, " part"), "</span><span></span>");
      link.setAttribute("data-display-mode-".concat(direction), '');
      sections[i].querySelector('[data-display-mode-wrap]').appendChild(link);
    }
  };

  var duplicateNavToTop = function duplicateNavToTop(section) {
    var wrap = section.querySelector('[data-display-mode-wrap]');

    if (wrap) {
      var wrapClone = wrap.cloneNode(true);
      section.insertBefore(wrapClone, section.firstChild);
    }
  };

  var createSections = function createSections(content) {
    if (!content) {
      return;
    } // Each section starts with h2
    // Get h2s as as delimiter ind iterate them


    var h2s = content.querySelectorAll('.article__content > h2');

    for (var i = 0; i < h2s.length; i++) {
      // Create a section tag
      var wrapper = document.createElement('section'); // Mode id from h2 to section

      wrapper.setAttribute('data-display-mode-id', h2s[i].getAttribute('id')); // Create index and visibility flags

      wrapper.setAttribute('data-display-mode-index', i);
      wrapper.setAttribute('data-display-mode-visible', 'false'); // Add section in front of h2

      h2s[i].insertAdjacentElement('beforebegin', wrapper);
    } // Get newly created sentions


    var sections = content.querySelectorAll('.article__content > [data-display-mode-index]');
    var sectionsWrapper;

    if (sections && sections.length) {
      // Create a wrapper div
      sectionsWrapper = document.createElement('div');
      sectionsWrapper.setAttribute('data-display-mode-wrapper', '');
      sections[0].insertAdjacentElement('beforebegin', sectionsWrapper);
    } // Iterate sections


    for (var _i = 0; _i < sections.length; _i++) {
      // Get section index
      var sectionIndex = parseInt(sections[_i].getAttribute('data-display-mode-index')); // Bet all tags between current and next section

      var sectionElements = window.helper.nextUntil(sections[_i], "[data-display-mode-index=\"".concat(sectionIndex + 1, "\"]"), null, 'style, #feedback-form, #recaptcha-script, .language-selector, .table-of-contents'); // Move the tags in the current sention

      for (var j = 0; j < sectionElements.length; j++) {
        sections[_i].appendChild(sectionElements[j]);
      }

      createNavLink(sections, _i, 'prev');
      createNavLink(sections, _i, 'next');
      duplicateNavToTop(sections[_i]);

      if (sectionsWrapper) {
        // Move section in the wrapper
        sectionsWrapper.appendChild(sections[_i]);
      }
    }

    return sectionsWrapper;
  };

  var activateSection = function activateSection(wrapper, id) {
    if (id) {
      // Hide a visible section
      wrapper.querySelector('[data-display-mode-visible="true"]').setAttribute('data-display-mode-visible', 'false'); // Display section that is intended to be visible

      var section = wrapper.querySelector("[data-display-mode-id=\"".concat(id.replace('#', ''), "\"]"));

      if (section) {
        section.setAttribute('data-display-mode-visible', 'true'); // Scroll to the top of the section

        section.scrollIntoView({
          block: 'start',
          behavior: 'smooth'
        });
      } // Update url hash


      history.replaceState(undefined, undefined, id);
    }
  };

  var activateTOC = function activateTOC(href) {
    var links = document.querySelectorAll('.table-of-contents__list a');

    for (var i = 0; i < links.length; i++) {
      if (links[i].getAttribute('href') === href) {
        links[i].classList.add('active');
      } else {
        links[i].classList.remove('active');
      }
    }
  };

  var handleVisibilityOfToc = function handleVisibilityOfToc() {
    var tocArticle = document.querySelector('.table-of-contents:not(.table-of-contents--fixed)');
    var tocColumn = document.querySelector('.table-of-contents--fixed');

    if (tocArticle) {
      tocArticle.classList.add('hidden');
    }

    if (tocColumn) {
      tocColumn.classList.add('table-of-contents--force-visible');
    }
  };

  var makeSectionsInteractive = function makeSectionsInteractive(wrapper) {
    // On page load get url hash
    var hash = window.location.hash;
    var index = 0;
    var scrollToAnchor = false;
    var articleContent = document.querySelector('[data-display-mode]');

    if (hash) {
      // Get section index by the hash
      var hashElem = wrapper.querySelector("[data-display-mode-id=\"".concat(hash.replace('#', ''), "\"]"));

      if (hashElem) {
        index = hashElem.getAttribute('data-display-mode-index');
      } else {
        // If section with given hash ges not exist, find out if there is any other element with id equal to the hash and fond its parent section
        hashElem = wrapper.querySelector(hash);

        if (hashElem) {
          var parentWrapper = window.helper.findAncestor(hashElem, '[data-display-mode-index]');

          if (parentWrapper) {
            index = parentWrapper.getAttribute('data-display-mode-index');
            scrollToAnchor = true;
          }
        }
      }
    } // Display section by id


    var section = wrapper.querySelector("[data-display-mode-index=\"".concat(index, "\"]"));
    handleVisibilityOfToc();
    section.setAttribute('data-display-mode-visible', true);
    activateTOC("#".concat(section.getAttribute('data-display-mode-id')));

    if (scrollToAnchor) {
      wrapper.querySelector(hash).scrollIntoView({
        block: 'start',
        behavior: 'smooth'
      });
    }

    articleContent.addEventListener('click', function (e) {
      // Activate section on table of contents link or next link click
      if (e.target && (e.target.matches('.table-of-contents__list a') || e.target.matches('[data-display-mode-next]') || e.target.matches('[data-display-mode-next] span') || e.target.matches('[data-display-mode-prev]') || e.target.matches('[data-display-mode-prev] span'))) {
        e.preventDefault();
        var href = e.target.getAttribute('href') ? e.target.getAttribute('href') : e.target.parentNode.getAttribute('href');
        activateSection(wrapper, href);
        activateTOC(href);
      }
    });
  };

  var init = function init() {
    var displayModeElem = document.querySelector('[data-display-mode]');

    if (!displayModeElem) {
      return;
    }

    if (displayModeElem.getAttribute('data-display-mode') === 'step-by-step') {
      var sectionsWrapper = createSections(displayModeElem);
      makeSectionsInteractive(sectionsWrapper);
    }
  };

  setTimeout(function () {
    init();
  }, 0);
})();

/***/ }),
/* 31 */
/***/ (function(module, exports) {

(function () {
  var getDevicePixelRatio = function getDevicePixelRatio() {
    return window.devicePixelRatio || 1;
  };

  window.helper.setCookie('KCDOCS.dpr', getDevicePixelRatio());
})();

/***/ })
/******/ ]);
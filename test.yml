openapi: 3.0.2
info:
  title: Kentico Cloud API
  description: |
    ## Introduction

    The Delivery API is a read-only REST API that serves published content from your Kentico Cloud projects.

    Use the API to deliver large amounts of content to your website or app. The content is cached on the CDN level, which makes it quickly available from wherever you are. The Delivery API provides content filtering options that allow you to retrieve only the parts of the content you need.

    Sample JSON code block:

    <pre class="line-numbers language-clike" data-platform-code=""><div class="infobar infobar--visible"><ul class="infobar__languages"><li class="infobar__lang">JSON</li></ul><div class="infobar__copy">Copy code</div></div><div class="clean-code">"teaser_image": { 
      "type": "asset",
      "name": "Teaser image",
      "value": [
        {
          "name": "coffee-beverages-explained-1080px.jpg",
          "type": "image/jpeg",
          "size": "90895",
          "description": null,
          "url": "https://assets-us-01.kc-usercontent.com/38af179c-40ba-42e7-a5ca-33b8cdcc0d45/e700596b-03b0-4cee-ac5c-9212762c027a/coffee-beverages-explained-1080px.jpg",
          "width": 1000,
          "height": 666
        }
      ]
    }</div><code class=" language-clike"><span class="token string">"teaser_image"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> 
      <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"asset"</span><span class="token punctuation">,</span>
      <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Teaser image"</span><span class="token punctuation">,</span>
      <span class="token string">"value"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"coffee-beverages-explained-1080px.jpg"</span><span class="token punctuation">,</span>
          <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"image/jpeg"</span><span class="token punctuation">,</span>
          <span class="token string">"size"</span><span class="token punctuation">:</span> <span class="token string">"90895"</span><span class="token punctuation">,</span>
          <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
          <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://assets-us-01.kc-usercontent.com/38af179c-40ba-42e7-a5ca-33b8cdcc0d45/e700596b-03b0-4cee-ac5c-9212762c027a/coffee-beverages-explained-1080px.jpg"</span><span class="token punctuation">,</span>
          <span class="token string">"width"</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
          <span class="token string">"height"</span><span class="token punctuation">:</span> <span class="token number">666</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 72px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre>

    All requests to the API must be made securely with HTTPS with TLS 1.2.

    <div class="callout callout--note"><p><strong>API requests limit</strong></p><p>Requests made to the Delivery API count towards the overall API Calls limit set in our Fair Use Policy. This does NOT apply to Delivery Preview API calls to preview unpublished content.</p></div>

    ## Production vs. Preview (+code samples)

    You can work with the Delivery API in two ways â€“ either retrieve published versions of content items or preview their yet unpublished versions. In both cases, you use the same methods to request data but with a different base URL.

    Retrieve published content items from your project using the production URL:
    `https://deliver.kenticocloud.com/<YOUR_PROJECT_ID>/items`

    Note: To protect your published content, use the Delivery API with secure access enabled.

    Preview unpublished content items from your project using the preview URL:
    `https://preview-deliver.kenticocloud.com/<YOUR_PROJECT_ID>/items`

    If you want to preview unpublished content in your project, you need to authorize your request.

    <div class="language-selector language-selector--code-block"><ul class="language-selector__list"><li class="language-selector__item"><a class="language-selector__link" href="#" data-platform="rest" data-slug="rest">cURL</a></li><li class="language-selector__item"><a class="language-selector__link" href="#" data-platform="javascript" data-slug="javascript">JavaScript</a></li><li class="language-selector__item"><a class="language-selector__link language-selector__link--active" href="#" data-platform="typescript" data-slug="typescript">TypeScript</a></li><li class="language-selector__item"><a class="language-selector__link" href="#" data-platform="_net" data-slug="dotnet">.NET</a></li><li class="language-selector__item"><a class="language-selector__link" href="#" data-platform="java" data-slug="java">Java</a></li><li class="language-selector__item"><a class="language-selector__link" href="#" data-platform="android" data-slug="android">Android</a></li><li class="language-selector__item"><a class="language-selector__link" href="#" data-platform="ios" data-slug="ios">iOS</a></li><li class="language-selector__item"><a class="language-selector__link" href="#" data-platform="php" data-slug="php">PHP</a></li><li class="language-selector__item"><a class="language-selector__link" href="#" data-platform="ruby" data-slug="ruby">Ruby</a></li></ul></div><pre class="line-numbers hidden language-java" data-platform-code="android"><div class="infobar infobar--visible"><ul class="infobar__languages"><li class="infobar__lang">Java</li></ul><div class="infobar__copy">Copy code</div></div><div class="clean-code">import com.kenticocloud.delivery_core.*;
    import com.kenticocloud.delivery_rx.*;

    import io.reactivex.Observer;
    import io.reactivex.disposables.Disposable;
    import io.reactivex.functions.Function;

    // Prepares the DeliveryService configuration object
    String projectId = "975bf280-fd91-488c-994c-2f04416e5ee3";
    IDeliveryConfig config = DeliveryConfig.newConfig(projectId);

    // Initializes a DeliveryService for Java projects
    IDeliveryService deliveryService = new DeliveryService(config);

    // Gets all content items using a simple request
    List&lt;ContentItem&gt; items = deliveryService.&lt;ContentItem&gt;items()
        .get()
        .getItems();

    // Gets all content items using RxJava2
    deliveryService.&lt;ContentItem&gt;items()
        .getObservable()
        .subscribe(new Observer&lt;DeliveryItemListingResponse&lt;ContentItem&gt;&gt;() {
            @Override
            public void onSubscribe(Disposable d) {
            }

            @Override
            public void onNext(DeliveryItemListingResponse&lt;ContentItem&gt; response) {
                // Gets the content items
                List&lt;ContentItem&gt; items = response.getItems();
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {
            }
        });</div><code class=" language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kenticocloud<span class="token punctuation">.</span>delivery_core</span><span class="token punctuation">.</span>*<span class="token punctuation">;</span>
    <span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kenticocloud<span class="token punctuation">.</span>delivery_rx</span><span class="token punctuation">.</span>*<span class="token punctuation">;</span>

    <span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>reactivex</span><span class="token punctuation">.</span><span class="token class-name">Observer</span><span class="token punctuation">;</span>
    <span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>reactivex<span class="token punctuation">.</span>disposables</span><span class="token punctuation">.</span><span class="token class-name">Disposable</span><span class="token punctuation">;</span>
    <span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>reactivex<span class="token punctuation">.</span>functions</span><span class="token punctuation">.</span><span class="token class-name">Function</span><span class="token punctuation">;</span>

    <span class="token comment">// Prepares the DeliveryService configuration object</span>
    <span class="token class-name">String</span> projectId <span class="token operator">=</span> <span class="token string">"975bf280-fd91-488c-994c-2f04416e5ee3"</span><span class="token punctuation">;</span>
    <span class="token class-name">IDeliveryConfig</span> config <span class="token operator">=</span> <span class="token class-name">DeliveryConfig</span><span class="token punctuation">.</span><span class="token function">newConfig</span><span class="token punctuation">(</span>projectId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Initializes a DeliveryService for Java projects</span>
    <span class="token class-name">IDeliveryService</span> deliveryService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeliveryService</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Gets all content items using a simple request</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ContentItem</span><span class="token punctuation">&gt;</span></span> items <span class="token operator">=</span> deliveryService<span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ContentItem</span><span class="token punctuation">&gt;</span></span><span class="token function">items</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Gets all content items using RxJava2</span>
    deliveryService<span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ContentItem</span><span class="token punctuation">&gt;</span></span><span class="token function">items</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">getObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DeliveryItemListingResponse</span><span class="token punctuation">&lt;</span><span class="token class-name">ContentItem</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token class-name">Disposable</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token class-name">DeliveryItemListingResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ContentItem</span><span class="token punctuation">&gt;</span></span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// Gets the content items</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ContentItem</span><span class="token punctuation">&gt;</span></span> items <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><pre class="line-numbers hidden language-swift" data-platform-code="ios"><div class="infobar infobar--visible"><ul class="infobar__languages"><li class="infobar__lang">Swift</li></ul><div class="infobar__copy">Copy code</div></div><div class="clean-code">import KenticoCloud

    let client = DeliveryClient.init(projectId: "975bf280-fd91-488c-994c-2f04416e5ee3")

    // Note: Using "items" as custom query returns all content items,
    // but to map them to a single model, a filter is needed.
    let customQuery = "items?system.type=article"

    // More about strongly-typed models https://github.com/Kentico/cloud-sdk-swift#using-strongly-typed-models
    client.getItems(modelType: Article.self, customQuery: customQuery) { (isSuccess, itemsResponse, error) in
        if isSuccess {
            if let articles = itemsResponse?.items {
                // Use your items here
            }
        } else {
            if let error = error {
                print(error)
            }
        }
    }</div><code class=" language-swift"><span class="token keyword">import</span> <span class="token builtin">KenticoCloud</span>

    <span class="token keyword">let</span> client <span class="token operator">=</span> <span class="token builtin">DeliveryClient</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>projectId<span class="token punctuation">:</span> <span class="token string">"975bf280-fd91-488c-994c-2f04416e5ee3"</span><span class="token punctuation">)</span>

    <span class="token comment">// Note: Using "items" as custom query returns all content items,</span>
    <span class="token comment">// but to map them to a single model, a filter is needed.</span>
    <span class="token keyword">let</span> customQuery <span class="token operator">=</span> <span class="token string">"items?system.type=article"</span>

    <span class="token comment">// More about strongly-typed models https://github.com/Kentico/cloud-sdk-swift#using-strongly-typed-models</span>
    client<span class="token punctuation">.</span><span class="token function">getItems</span><span class="token punctuation">(</span>modelType<span class="token punctuation">:</span> <span class="token builtin">Article</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> customQuery<span class="token punctuation">:</span> customQuery<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>isSuccess<span class="token punctuation">,</span> itemsResponse<span class="token punctuation">,</span> error<span class="token punctuation">)</span> <span class="token keyword">in</span>
        <span class="token keyword">if</span> isSuccess <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token keyword">let</span> articles <span class="token operator">=</span> itemsResponse<span class="token operator">?</span><span class="token punctuation">.</span>items <span class="token punctuation">{</span>
                <span class="token comment">// Use your items here</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token keyword">let</span> error <span class="token operator">=</span> error <span class="token punctuation">{</span>
                <span class="token function">print</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><pre class="line-numbers hidden language-java" data-platform-code="java"><div class="infobar infobar--visible"><ul class="infobar__languages"><li class="infobar__lang">Java</li></ul><div class="infobar__copy">Copy code</div></div><div class="clean-code">import com.kenticocloud.delivery;

    DeliveryClient client = new DeliveryClient("975bf280-fd91-488c-994c-2f04416e5ee3");

    List&lt;NameValuePair&gt; params = DeliveryParameterBuilder.params()
        .build();

    ContentItemsListingResponse listingResponse = client.getItems();</div><code class=" language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kenticocloud<span class="token punctuation">.</span>delivery</span><span class="token punctuation">;</span>

    <span class="token class-name">DeliveryClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeliveryClient</span><span class="token punctuation">(</span><span class="token string">"975bf280-fd91-488c-994c-2f04416e5ee3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NameValuePair</span><span class="token punctuation">&gt;</span></span> params <span class="token operator">=</span> <span class="token class-name">DeliveryParameterBuilder</span><span class="token punctuation">.</span><span class="token function">params</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ContentItemsListingResponse</span> listingResponse <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><pre class="line-numbers hidden language-js" data-platform-code="javascript"><div class="infobar infobar--visible"><ul class="infobar__languages"><li class="infobar__lang">JavaScript</li></ul><div class="infobar__copy">Copy code</div></div><div class="clean-code">const KenticoCloud = require("kentico-cloud-delivery");

    const deliveryClient = new KenticoCloud.DeliveryClient({
        projectId: "975bf280-fd91-488c-994c-2f04416e5ee3"
    });

    deliveryClient.items()
        .getObservable()
        .subscribe(response =&gt; console.log(response));</div><code class=" language-js"><span class="token keyword">const</span> KenticoCloud <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"kentico-cloud-delivery"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> deliveryClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KenticoCloud<span class="token punctuation">.</span>DeliveryClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        projectId<span class="token punctuation">:</span> <span class="token string">"975bf280-fd91-488c-994c-2f04416e5ee3"</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    deliveryClient<span class="token punctuation">.</span><span class="token function">items</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">getObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><pre class="line-numbers hidden language-clike" data-platform-code="_net"><div class="infobar infobar--visible"><ul class="infobar__languages"><li class="infobar__lang">C#</li></ul><div class="infobar__copy">Copy code</div></div><div class="clean-code">using KenticoCloud.Delivery;

    // Initializes a content delivery client
    IDeliveryClient client = DeliveryClientBuilder
          .WithProjectId("975bf280-fd91-488c-994c-2f04416e5ee3")
          .Build();

    // Gets all content items
    // Note: Using the &lt;object&gt; generic parameter produces strongly typed objects, based on "system.type"
    DeliveryItemListingResponse&lt;object&gt; response = await client.GetItemsAsync&lt;object&gt;();

    var items = response.Items;</div><code class=" language-clike">using KenticoCloud<span class="token punctuation">.</span>Delivery<span class="token punctuation">;</span>

    <span class="token comment">// Initializes a content delivery client</span>
    IDeliveryClient client <span class="token operator">=</span> DeliveryClientBuilder
          <span class="token punctuation">.</span><span class="token function">WithProjectId</span><span class="token punctuation">(</span><span class="token string">"975bf280-fd91-488c-994c-2f04416e5ee3"</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Gets all content items</span>
    <span class="token comment">// Note: Using the &lt;object&gt; generic parameter produces strongly typed objects, based on "system.type"</span>
    DeliveryItemListingResponse<span class="token operator">&lt;</span>object<span class="token operator">&gt;</span> response <span class="token operator">=</span> await client<span class="token punctuation">.</span>GetItemsAsync<span class="token operator">&lt;</span>object<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    var items <span class="token operator">=</span> response<span class="token punctuation">.</span>Items<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><pre class="line-numbers hidden language-php" data-platform-code="php"><div class="infobar infobar--visible"><ul class="infobar__languages"><li class="infobar__lang">PHP</li></ul><div class="infobar__copy">Copy code</div></div><div class="clean-code">&lt;?php
    // Defined by Composer to include required libraries
    require __DIR__ . "/vendor/autoload.php";

    use KenticoCloud\Delivery\DeliveryClient;

    $client = new DeliveryClient("975bf280-fd91-488c-994c-2f04416e5ee3");

    $items = $client-&gt;getItems();</div><code class=" language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token comment">// Defined by Composer to include required libraries</span>
    <span class="token keyword">require</span> <span class="token constant">__DIR__</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"/vendor/autoload.php"</span><span class="token punctuation">;</span>

    <span class="token keyword">use</span> <span class="token package">KenticoCloud<span class="token punctuation">\</span>Delivery<span class="token punctuation">\</span>DeliveryClient</span><span class="token punctuation">;</span>

    <span class="token variable">$client</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeliveryClient</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"975bf280-fd91-488c-994c-2f04416e5ee3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$items</span> <span class="token operator">=</span> <span class="token variable">$client</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><pre class="line-numbers hidden language-shell" data-platform-code="rest"><div class="infobar infobar--visible"><ul class="infobar__languages"><li class="infobar__lang">cURL</li></ul><div class="infobar__copy">Copy code</div></div><div class="clean-code">curl --request GET \
      --url "https://deliver.kenticocloud.com/975bf280-fd91-488c-994c-2f04416e5ee3/items"
      --header "content-type: application/json"</div><code class=" language-shell"><span class="token function">curl</span> --request GET \
      --url <span class="token string">"https://deliver.kenticocloud.com/975bf280-fd91-488c-994c-2f04416e5ee3/items"</span>
      --header <span class="token string">"content-type: application/json"</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><pre class="line-numbers hidden language-ruby" data-platform-code="ruby"><div class="infobar infobar--visible"><ul class="infobar__languages"><li class="infobar__lang">Ruby</li></ul><div class="infobar__copy">Copy code</div></div><div class="clean-code">require "delivery-sdk-ruby"

    delivery_client = KenticoCloud::Delivery::DeliveryClient.new project_id: "975bf280-fd91-488c-994c-2f04416e5ee3"
    delivery_client.items.execute do |response|
      items = response.items
      items.each { |item| puts item.system.codename }
    end</div><code class=" language-ruby"><span class="token keyword">require</span> <span class="token string">"delivery-sdk-ruby"</span>

    delivery_client <span class="token operator">=</span> <span class="token constant">KenticoCloud</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">Delivery</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">DeliveryClient</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">project_id</span><span class="token punctuation">:</span> <span class="token string">"975bf280-fd91-488c-994c-2f04416e5ee3"</span>
    delivery_client<span class="token punctuation">.</span>items<span class="token punctuation">.</span>execute <span class="token keyword">do</span> <span class="token operator">|</span>response<span class="token operator">|</span>
      items <span class="token operator">=</span> response<span class="token punctuation">.</span>items
      items<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token punctuation">{</span> <span class="token operator">|</span>item<span class="token operator">|</span> puts item<span class="token punctuation">.</span>system<span class="token punctuation">.</span>codename <span class="token punctuation">}</span>
    <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><pre class="line-numbers language-ts" data-platform-code="typescript"><div class="infobar infobar--visible"><ul class="infobar__languages"><li class="infobar__lang">TypeScript</li></ul><div class="infobar__copy">Copy code</div></div><div class="clean-code">import { ContentItem, DeliveryClient } from "kentico-cloud-delivery";

    const deliveryClient = new DeliveryClient({
      projectId: "975bf280-fd91-488c-994c-2f04416e5ee3"
    });

    deliveryClient.items&lt;ContentItem&gt;()
        .getObservable()
        .subscribe(response =&gt; console.log(response));</div><code class=" language-ts"><span class="token keyword">import</span> <span class="token punctuation">{</span> ContentItem<span class="token punctuation">,</span> DeliveryClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"kentico-cloud-delivery"</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> deliveryClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeliveryClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      projectId<span class="token punctuation">:</span> <span class="token string">"975bf280-fd91-488c-994c-2f04416e5ee3"</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    deliveryClient<span class="token punctuation">.</span>items<span class="token operator">&lt;</span>ContentItem<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">getObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre>

    For the Delivery Preview API, you can use two concurrent API keys, Primary and Secondary. For more details on how to work with the keys, see Previewing unpublished content.

    ## Images and lists

    <ol><li>In Kentico Cloud, choose a project.</li><li>From the app menu, choose&nbsp;<strong>Project settings </strong><i aria-hidden="true" class="icon icon-settings"></i>.</li><li>Under Development, choose&nbsp;<strong>API keys</strong>.</li><li>In the&nbsp;<strong>Delivery API</strong>&nbsp;box, click the switch to activate secure access.</li></ol>

    Gif, not zoomable, with caption, with border

    <figure><img class="article__image-border article__image--100" alt="" src="https://assets-us-01.kc-usercontent.com:443/ad858591-7c5b-00e9-52c1-796f3aebc535/57359640-9fc7-46de-985d-8227b7523a79/9d2a8a5-helllllo.png?fm=jpg&amp;auto=format&amp;w=672"><noscript><img class="article__image-border" alt="" src="https://assets-us-01.kc-usercontent.com:443/ad858591-7c5b-00e9-52c1-796f3aebc535/57359640-9fc7-46de-985d-8227b7523a79/9d2a8a5-helllllo.png?fm=jpg&auto=format&w=672"></noscript><figcaption><p>Delivery API with secure access enabled.</p></figcaption></figure>

    Static image, zoomable, with border

    <figure><img class="article__image-border article__add-lightbox article__image--75" alt="" src="https://assets-us-01.kc-usercontent.com:443/ad858591-7c5b-00e9-52c1-796f3aebc535/08b45086-4457-49b5-8c6d-68321c8fcca1/GoogleConsoleOAuth.png?fm=jpg&amp;auto=format&amp;w=504"><noscript><img class="article__image-border" alt="" src="https://assets-us-01.kc-usercontent.com:443/ad858591-7c5b-00e9-52c1-796f3aebc535/08b45086-4457-49b5-8c6d-68321c8fcca1/GoogleConsoleOAuth.png?fm=jpg&auto=format&w=504"></noscript></figure>

    Static image, not zoomable, with URL
    <figure><a href="https://app.getpostman.com/run-collection/1af99683a4dd120ddbc6" target="_blank" class="no-icon"><img class="article__image--100" alt="" src="https://assets-us-01.kc-usercontent.com:443/ad858591-7c5b-00e9-52c1-796f3aebc535/efb5cade-4c99-4b0c-8d71-8ae993568db7/run%20in%20postman%20button.svg?fm=jpg&amp;auto=format&amp;w=672"></a><noscript><a href="https://app.getpostman.com/run-collection/1af99683a4dd120ddbc6" target="_blank" class="no-icon"><img class="article__image-border" alt="" src="https://assets-us-01.kc-usercontent.com:443/ad858591-7c5b-00e9-52c1-796f3aebc535/efb5cade-4c99-4b0c-8d71-8ae993568db7/run%20in%20postman%20button.svg?fm=jpg&auto=format&w=672"></a></noscript></figure>

    Static image, zoomable, with caption, with border
    <figure><img class="article__image-border article__add-lightbox article__image--100" alt="" src="https://assets-us-01.kc-usercontent.com:443/ad858591-7c5b-00e9-52c1-796f3aebc535/e2d95225-f8a4-42cf-a1c2-ef9ea1888ba8/a504d6a-PostmanCollection.png?fm=jpg&amp;auto=format&amp;w=672"><noscript><img class="article__image-border" alt="" src="https://assets-us-01.kc-usercontent.com:443/ad858591-7c5b-00e9-52c1-796f3aebc535/e2d95225-f8a4-42cf-a1c2-ef9ea1888ba8/a504d6a-PostmanCollection.png?fm=jpg&auto=format&w=672"></noscript><figcaption><p>The Kentico Cloud collection for Postman</p></figcaption></figure>
  version: "2.0"
  termsOfService: https://kenticocloud.com/terms-of-service
  contact:
    name: Kentico Cloud
    url: https://kenticocloud.com/contact
    email: cloud@kentico.com
security:
  - Bearer: []
servers:
  - description: PROD Content Management API v2
    url: https://manage.kenticocloud.com/v2/projects
  - description: QA Content Management API v2
    url: https://qa-manage.global.ssl.fastly.net/v2/projects
  - description: Delivery API
    url: https://deliver.kenticocloud.com/
  - description: Delivery Preview API
    url: https://preview-deliver.kenticocloud.com
tags:
  - name: Content elements
    description: |
      When you retrieve or update language variants, you will work with a collection of content elements. The elements collection contains the elements as defined in the content type.

      ## Element object

      The values of content elements can be strings (Text, Rich text, Date & Time, and URL slug elements), decimal numbers (Number element), and arrays of Reference objects (Multiple choice, Asset, Linked items (formerly called Modular content), and Taxonomy elements).

      Note: When retrieving language variants, the Content Management API will always reference content elements with their internal IDs. When creating or updating language variants via the API, you can reference content elements by their internal IDs or codenames.

      <pre class="line-numbers language-clike" data-platform-code=""><div class="infobar infobar--visible"><ul class="infobar__languages"><li class="infobar__lang">JSON</li></ul><div class="infobar__copy">Copy code</div></div><div class="clean-code"># Delivery API
      "content": {
        "type": "rich_text",
        "name": "Content",
        "images": {},
        "links": {},
        "modular_content": [],
        "value": "&lt;p&gt;&lt;a href=\"http://www.kenticocloud.com\" title=\"#1 CMS\"&gt;Kentico Cloud&lt;/a&gt;&lt;/p&gt;"
      }

      # Content Management API v2
      {
        "element": {
          "id": "0ddd5a94-0360-5126-92e6-264dfbb61849"
        },
        "value": "&lt;p&gt;&lt;a href=\"http://www.kenticocloud.com\" title=\"#1 CMS\"&gt;Kentico Cloud&lt;/a&gt;&lt;/p&gt;"
      }</div><code class=" language-clike"># Delivery API
      <span class="token string">"content"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"rich_text"</span><span class="token punctuation">,</span>
        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Content"</span><span class="token punctuation">,</span>
        <span class="token string">"images"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string">"links"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string">"modular_content"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">"value"</span><span class="token punctuation">:</span> <span class="token string">"&lt;p&gt;&lt;a href=\"http://www.kenticocloud.com\" title=\"#1 CMS\"&gt;Kentico Cloud&lt;/a&gt;&lt;/p&gt;"</span>
      <span class="token punctuation">}</span>

      # Content Management API v2
      <span class="token punctuation">{</span>
        <span class="token string">"element"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
          <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token string">"0ddd5a94-0360-5126-92e6-264dfbb61849"</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string">"value"</span><span class="token punctuation">:</span> <span class="token string">"&lt;p&gt;&lt;a href=\"http://www.kenticocloud.com\" title=\"#1 CMS\"&gt;Kentico Cloud&lt;/a&gt;&lt;/p&gt;"</span>
      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 48px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 24px;"></span><span style="height: 48px;"></span><span style="height: 24px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre>

      ## Text element (CM API v2)

      The value of Text elements is a string with the maximum length of 100,000 characters. If empty, the value is null.

      When retrieving and updating Text elements, the format of the value will be identical for both GET and PUT operations.

      <figure><img class="article__image-border article__image--100" alt="" src="https://assets-us-01.kc-usercontent.com:443/ad858591-7c5b-00e9-52c1-796f3aebc535/731c913a-53a8-4787-98d2-91d710e23da1/content%20group%20tabs.gif"><noscript><img class="article__image-border" alt="" src="https://assets-us-01.kc-usercontent.com:443/ad858591-7c5b-00e9-52c1-796f3aebc535/731c913a-53a8-4787-98d2-91d710e23da1/content%20group%20tabs.gif"></noscript></figure>

      ## Rich text element (BETA)

      The value of Rich text elements is a string with the maximum length of 100,000 characters. By default, if there is no text, the element's value is a single empty paragraph: `<p><br/></p>`. The element's value can contain HTML formatted text, specific HTML elements and must form a valid HTML fragment.

      ### Links to a URL address (CM API)

      Requires the attribute `href`.

      <div class="callout callout--info"><p><strong>Inserting URL values</strong></p><p>When inserting URL values, the system might add the <code>http://</code> prefix in case the provided URL is invalid or not safe. For example, URLs using the <code>javascript</code> protocol will be prefixed. URL values starting with <code>/</code>, <code>?</code>, or <code>#</code> are allowed.</p><p>Examples of how inserted URLs are stored:</p><ul><li><code>http://example.com</code> â†’ <code>http://example.com</code></li><li><code>https://example.com</code> â†’ <code>https://example.com</code></li><li><code>ftp://example.com</code> â†’ <code>ftp://example.com</code></li><li><code>example.com</code> â†’ <code>http://example.com</code></li><li><code>about-us.html</code> â†’ <code>http://about-us.html</code></li><li><code>/about-us.html</code> â†’ <code>/about-us.html</code></li><li><code>?query</code> â†’ <code>?query</code></li><li><code>#anchor</code> â†’ <code>#anchor</code></li><li><code>javascript:alert()</code> â†’ <code>http://javascript:alert()</code></li><li><code>javascript://%0aalert()</code> â†’ <code>http://javascript://%0aalert()</code></li><li><code>data:text/html,&lt;script&gt;alert()&lt;/script&gt;</code> â†’ <code>http://data:text/html,&lt;script&gt;alert()&lt;/script&gt;</code></li></ul></div>

      ### Assets in Rich text

      Assets in Rich text elements are defined by the block element `<figure>` which requires one of the following attributes: data-asset-id or data-asset-external-id. The data-asset-external-id attribute can also reference an object that was not yet imported to Kentico Cloud. For more details, see Referencing by external ID.

      When inserting values in Rich text elements, the `<img>` element is optional. Otherwise, the <img> element requires the attributes src and data-asset-id.
  - name: Content items
    # x-displayName: Content items
    description: |
      The content item object contains metadata about your content, such as the name of the content item and the sitemap locations it is placed in. The content item object does not store the content itself. The content for each language variant of a content item is saved in [language variants](https://developer.kenticocloud.com/reference#content-management-api-v2-language-variant-object), with each content item having as many variants as there are active languages in your project.

      To manage content items via the Content Management API, you need to send requests to URIs based on the following patterns:
      * Using internal IDs: `<base_URL>/items/<content_item_id>`
      * Using codenames: `<base_URL>/items/codename/<content_item_codename>`
      * Using external IDs: `<base_URL>/items/external-id/<content_item_external_identifier>`

      To retrieve [retrieve language variants](https://developer.kenticocloud.com/reference#content-management-api-v2-list-variants) of a specific content item, you can list the variants by specifying the internal ID, codename, or external ID of the content item.
  - name: Assets
    # x-displayName: Assets
    description: |
      Assets in Kentico Cloud consist of a reference to a binary file and metadata describing the file. Each binary file can be referenced only by a single asset. Once an asset is created, the file it references cannot be changed, you can only modify the asset's descriptions and title. Note that binary files that are not used by any assets will not be visible in the Kentico Cloud UI.
  - name: Taxonomy
    # x-displayName: Taxonomy
    description: |
      Test
paths:
  /{project_id}/items:
    get:
      tags:
      - Content items
      summary: List content items
      description: |
        Retrieve a list of content items in your project. By default, the content items are ordered alphabetically by codename.
      operationId: list-content-items
      parameters:
      - $ref: '#/components/parameters/project_id'
      - name: elements
        description: |
          A comma-separated list of content type element codenames. Use this parameter to choose which elements to retrieve. If not specified, all elements are retrieved.
        in: query
        schema:
          type: array
          items:
            type: string
        explode: false
        style: form
        example: title,summary,post_date,teaser_image
      - name: ordered
        in: query
        description: | 
          Order of the retrieved content items. By default, the items are sorted alphabetically by their codenames from A to Z in descending order.
        schema:
          type: string
        allowReserved: true
        example: elements.post_date[desc]
      - name: X-KC-Wait-For-Loading-Content
        in: header
        description: |
          If the requested content has changed since the last request, the header determines whether to wait while fetching content. This can be useful when retrieving changed content in reaction to a webhook call. By default, when the header is not set, the API serves old content (if cached by the CDN) while it's fetching the new content to minimize wait time. To always fetch new content, set the header value to `true`.
        schema:
          type: string
        example: true
      - name: limit
        in: query
        schema:
          type: integer
          format: int32
        description: |
          Number of content items to retrieve in a single request. If the limit is lower than the total number of items matching your query, the `next_page` attribute in the Pagination object will contain a URL to the next page of results.
        example: 10
      responses:
        '200':
          description: | 
            A list of content items in your project
          content:
            application/json:
              schema:
                type: object
                required:
                - items
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ContentItem'
      x-code-samples:
      - lang: cURL
        source: |
          curl --request GET \
            --url 'https://deliver.kenticocloud.com/975bf280-fd91-488c-994c-2f04416e5ee3/items?system.type=article&elements=title%2Csummary%2Cpost_date&order=elements.post_date' \
            --header 'content-type: application/json'
      - lang: .NET
        source: |
          // Tip: Find more about .NET SDKs at https://developer.kenticocloud.com/docs/net
          using KenticoCloud.Delivery;

          // Initializes a content delivery client
          IDeliveryClient client = DeliveryClientBuilder
                .WithProjectId("975bf280-fd91-488c-994c-2f04416e5ee3")
                .Build();

          // Gets specific elements of 3 articles ordered by the "Post date" element
          // Create strongly typed models according to https://developer.kenticocloud.com/docs/strongly-typed-models
          DeliveryItemListingResponse<Article> response = await client.GetItemsAsync<Article>(
              new EqualsFilter("system.type", "article"),
              new ElementsParameter("title", "summary", "post_date"),
              new OrderParameter("elements.post_date", SortOrder.Descending)
              );

          var items = response.Items;
      - lang: TypeScript
        source: |
          // Tip: Find more about JS/TS SDKs at https://developer.kenticocloud.com/docs/javascript
          import { ContentItem, DeliveryClient, Fields, SortOrder, TypeResolver } from 'kentico-cloud-delivery';

          // Create strongly typed models according to https://developer.kenticocloud.com/docs/strongly-typed-models
          export class Article extends ContentItem {
              public title: Fields.TextField;
              public summary: Fields.TextField;
              public post_date: Fields.DateTimeField;
              public teaser_image: Fields.AssetsField;
              public related_articles: Article[];
          }

          const deliveryClient = new DeliveryClient({
              projectId: '975bf280-fd91-488c-994c-2f04416e5ee3',
              typeResolvers: [
                  new TypeResolver('article', () => new Article)
              ]
          });

          deliveryClient.items<Article>()
              .type('article')
              .elementsParameter(['title', 'summary', 'post_date'])
              .orderParameter('elements.post_date', SortOrder.desc)
              .getObservable()
              .subscribe(response => console.log(response));
      - lang: JavaScript
        source: |
          // Tip: Find more about JS/TS SDKs at https://developer.kenticocloud.com/docs/javascript
          const KenticoCloud = require('kentico-cloud-delivery');

          // Create strongly typed models according to https://developer.kenticocloud.com/docs/strongly-typed-models
          class Article extends KenticoCloud.ContentItem {
              constructor() {
                  super();
              }
          }

          const deliveryClient = new KenticoCloud.DeliveryClient({
              projectId: '975bf280-fd91-488c-994c-2f04416e5ee3',
              typeResolvers: [
                  new KenticoCloud.TypeResolver('article', () => new Article())
              ]
          });

          deliveryClient.items()
              .type('article')
              .elementsParameter(['title', 'summary', 'post_date'])
              .orderParameter('elements.post_date', KenticoCloud.SortOrder.desc)
              .getObservable()
              .subscribe(response => console.log(response));
      - lang: Java
        source: |
          // Tip: Find more about Java/JavaRx SDKs at https://developer.kenticocloud.com/docs/javaandroid
          import com.kenticocloud.delivery;

          DeliveryClient client = new DeliveryClient("975bf280-fd91-488c-994c-2f04416e5ee3");

          List<NameValuePair> params = DeliveryParameterBuilder.params()
              .filterEquals("system.type", "article")
              .projection("title", "summary", "post_date")
              .orderByDesc("elements.post_date")
              .build();

          // Create strongly typed models according to https://developer.kenticocloud.com/docs/strongly-typed-models
          List<ArticleItem> items = client.getItems(ArticleItem.class, params);
      - lang: Swift
        source: |
          // Tip: Find more about Swift SDK at https://developer.kenticocloud.com/docs/ios
          import KenticoCloud
          
          let client = DeliveryClient.init(projectId:"975bf280-fd91-488c-994c-2f04416e5ee3")
          
          let customQuery = "items?system.type=article&elements=title,summary,post_date&order=elements.post_date[desc]"
          client.getItems(modelType: Article.self, customQuery: customQuery) { (isSuccess, itemsResponse, error) in
                if isSuccess {
                    if let articles = itemsResponse?.items {
                        // Use your items here
                    }
                } else {
                    if let error = error {
                        print(error)
                    }
                }
      - lang: JavaRx
        source: |
          // Tip: Find more about Java/JavaRx SDKs at https://developer.kenticocloud.com/docs/javaandroid
          import com.kenticocloud.delivery_core.*;
          import com.kenticocloud.delivery_rx.*;

          import io.reactivex.Observer;
          import io.reactivex.disposables.Disposable;
          import io.reactivex.functions.Function;

          // Prepares an array to hold strongly-typed models
          List<TypeResolver<?>> typeResolvers = new ArrayList<>();

          // Registers the type resolver for articles
          typeResolvers.add(new TypeResolver<>(Article.TYPE, new Function<Void, Article>() {
              @Override
              public Article apply(Void input) {
                  return new Article();
              }
          }));

          // Prepares the DeliveryService configuration object
          String projectId = "975bf280-fd91-488c-994c-2f04416e5ee3";
          IDeliveryConfig config = DeliveryConfig.newConfig(projectId)
              .withTypeResolvers(typeResolvers);

          // Initializes a DeliveryService for Java projects
          IDeliveryService deliveryService = new DeliveryService(config);

          // Gets specific elements of 3 articles ordered by the "Post date" element using a simple request
          List<Article> articles = deliveryService.<Article>items()
              .equalsFilter("system.type", "article")
              .elementsParameter(Arrays.asList("title", "summary", "post_date"))
              .orderParameter("elements.post_date", OrderType.Desc)
              .get()
              .getItems();

          // Gets specific elements of 3 articles ordered by the "Post date" element using RxJava2
          deliveryService.<Article>items()
              .equalsFilter("system.type", "article")
              .elementsParameter(Arrays.asList("title", "summary", "post_date"))
              .orderParameter("elements.post_date", OrderType.Desc)
              .getObservable()
              .subscribe(new Observer<DeliveryItemListingResponse<Article>>() {
                  @Override
                  public void onSubscribe(Disposable d) {
                  }

                  @Override
                  public void onNext(DeliveryItemListingResponse<Article> response) {
                      // Gets the mapped articles
                      List<Article> articles = response.getItems();
                  }

                  @Override
                  public void onError(Throwable e) {
                  }

                  @Override
                  public void onComplete() {
                  }
              });
      - lang: PHP
        source: |
          <?php
          // Tip: Find more about PHP SDKs at https://developer.kenticocloud.com/docs/php

          // Defined by Composer to include required libraries
          require __DIR__ . '/vendor/autoload.php';

          use KenticoCloud\Delivery\DeliveryClient;
          use KenticoCloud\Delivery\QueryParams;

          $client = new DeliveryClient('975bf280-fd91-488c-994c-2f04416e5ee3');

          $items = $client->getItems((new QueryParams())
                      ->equals('system.type', 'article')
                      ->elements(array('title', 'summary', 'post_date'))
                      ->orderDesc('elements.post_date');
      - lang: Ruby
        source: |
          require 'delivery-sdk-ruby'

          delivery_client = KenticoCloud::Delivery::DeliveryClient.new project_id: '975bf280-fd91-488c-994c-2f04416e5ee3'
          delivery_client.items('system.type'.eq('article'))
                        .order_by('elements.post_date', '[desc]')
                        .elements(%w[title summary post_date])
                        .execute do |response|
                          items = response.items
                        end        
    post:
      tags:
      - Content items
      summary: Add a content item
      description: |
        Create a new content item based on a specific content type. Content items do NOT contain any content themselves but serve as wrappers for individual language variants.

        To import content to a specific language variant of a content item, you can upsert a language variant.

        If you are importing content from a different system and want to use the same identifiers for your content as in the previous system, use the external_id attribute to set a custom identifier for the new content item.

        Here's a list for good measure:

        1. One
        1. there
        1. Three
        1. Funf
          * yourself
          * non-existent
          * NOT
        1. Seven
        1. Five
        1. Six
      operationId: add-a-content-item
      parameters:
      - $ref: '#/components/parameters/project_id'
      requestBody:
        description: |
          The content item you want to add. Some more random text.

          Oh hey, a callout.

          <div class="callout callout--tip"><p><strong>Oh look, a fancy tip</strong></p><p>"Callout, <a href="https://www.youtube.com/watch?v=ks072waMayk">you're out of your element</a>."</p></div>
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentItem'
            example:
              name: On Roasts
              type:
                codename: article
              sitemap_locations:
              - codename: articles
              external_id: '59713'
        required: true
      responses:
        201:
          description: |
            The created content item object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentItem'
              example:
                id: f4b3fc05-e988-4dae-9ac1-a94aba566474
                name: On Roasts
                codename: on_roasts
                type:
                  id: b7aa4a53-d9b1-48cf-b7a6-ed0b182c4b89
                sitemap_locations:
                - id: 45a123f3-1c55-c697-7dae-78369c8f1e2c
                external_id: '59713'
                last_modified: '2017-04-04T13:45:30.7692802Z'
        400:
          description: |
            A bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                request_id: e6368434-e500-48b4-9ffe-3cd3c0f53ac9
                error_code: 0
                message: Provide ID of content item's content type.
        429:
          description: |
            The API rate limit has been exceeded.
          headers:
            Retry-after:
              $ref: '#/components/parameters/retry_after'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                request_id: 80000004-0002-fd00-b63f-84710c7967bb
                error_code: 10000
                message: API rate limit exceeded. Please retry your request later.
      x-code-samples:
      - lang: cURL
        source: |
          curl --request POST \
          --url https://manage.kenticocloud.com/v2/projects/975bf280-fd91-488c-994c-2f04416e5ee3/items \
          --header 'Authorization: Bearer <YOUR_API_KEY>' \
          --header 'Content-type: application/json' \
          --data '{...}'
      - lang: .NET
        source: |
          using KenticoCloud.ContentManagement;

          ContentManagementOptions options = new ContentManagementOptions
          {
            ApiKey = "<YOUR_API_KEY>",
            ProjectId = "<YOUR_PROJECT_ID>"
          };

          ContentManagementClient client = new ContentManagementClient(options);

          ContentItemCreateModel item = new ContentItemCreateModel
          {
            Name = "On Roasts",
            Type = ContentTypeIdentifier.ByCodename("article"),
            SitemapLocations = new[] { SitemapNodeIdentifier.ByCodename("articles") },
            ExternalId = "59713";
          };

          ContentItemModel responseItem = await client.CreateContentItemAsync(item);
      - lang: JavaScript
        source: |
          // Using ES6 syntax
          import { ContentManagementClient } from 'kentico-cloud-content-management';

          const client = new ContentManagementClient({
            projectId: '<YOUR_PROJECT_ID>',
            apiKey: '<YOUR_API_KEY>'
          });

          client.addContentItem()
            .withData(
              {
                name: 'On Roasts',
                type: {
                  codename: 'article'
                },
                external_id: '59713'
              }
            )
            .toObservable()
            .subscribe((response) => {
              console.log(response);
            },
              (error) => {
                console.log(error);
              });
  /{project_id}/items/{item_identifier}:
    delete:
      tags:
      - Content items
      summary: Delete a content item
      description: |
        Delete a content item specified by its internal ID, codename or external ID. Note that deleting a content item deletes all of its language variants as well.

        If you only want to delete a specific language variant, see how to delete a language variant.
      operationId: delete-a-content-item
      parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/item_identifier'
      responses:
        204:
          description: | 
            The specified content item was deleted from the project.
        404:
          description: |
            The specified content item had been already deleted or doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                request_id: 2d2803b7-9b67-4bd8-b3d2-436aa077827f
                error_code: 100
                message: The requested content item 'f4b3fc05-e988-4dae-9ac1-a94aba566474' was not
                  found.
        429:
          $ref: '#/components/responses/rate_limit_error'
      x-code-samples: # code_sample - CM_API_DeleteItem
      - lang: cURL
        source: |
          curl --request DELETE \
            --url https://manage.kenticocloud.com/v2/projects/975bf280-fd91-488c-994c-2f04416e5ee3/items/f4b3fc05-e988-4dae-9ac1-a94aba566474 \
          # --url https://manage.kenticocloud.com/v2/projects/f4b3fc05-e988-4dae-9ac1-a94aba566474/items/codename/on_roasts \
          # --url https://manage.kenticocloud.com/v2/projects/975bf280-fd91-488c-994c-2f04416e5ee3/items/external-id/59713 \
            --header 'Authorization: Bearer <YOUR_API_KEY>' \
            --header 'Content-type: application/json'
      - lang: .NET
        source: |
          using KenticoCloud.ContentManagement;

          ContentManagementOptions options = new ContentManagementOptions
          {
              ApiKey = "<YOUR_API_KEY>",
              ProjectId = "<YOUR_PROJECT_ID>"
          };

          ContentManagementClient client = new ContentManagementClient(options);

          ContentItemIdentifier identifier = ContentItemIdentifier.ById(Guid.Parse("f4b3fc05-e988-4dae-9ac1-a94aba566474"));
          // ContentItemIdentifier identifier = ContentItemIdentifier.ByCodename("on_roasts");
          // ContentItemIdentifier identifier = ContentItemIdentifier.ByExternalId("59713");

          await client.DeleteContentItemAsync(identifier);
      - lang: JavaScript
        source: |
          // Using ES6 syntax
          import { ContentManagementClient } from 'kentico-cloud-content-management';

          const client = new ContentManagementClient({
            projectId: '<YOUR_PROJECT_ID>',
            apiKey: '<YOUR_API_KEY>'
          });

          client.deleteContentItem()
            .byItemId('f4b3fc05-e988-4dae-9ac1-a94aba566474')
            // .byItemCodename('on_roasts')
            // .byItemExternalId('59714')
            .toObservable()
            .subscribe((response) => {
              console.log(response);
            },
              (error) => {
                console.log(error);
              });
    put:
      tags:
      - Content items
      summary: Upsert a content item
      description: |
        Update an existing content item specified by its internal ID, codename, or external ID, or add a new content item specified by external ID.

        **Note**: If no content item with the specified external ID exists in the project, the system will try to create one. For existing content items, the API updates the content item's name and sitemap locations.

        You can also specify the external ID when adding content items.
      operationId: upsert-a-content-item
      parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/item_identifier_upsert'
      requestBody:
        description: |
          Content item you want to insert or update in the project. For existing items, you can update only their name.
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/Update_ContentItem'
              - $ref: '#/components/schemas/Insert_ContentItem'
      responses:
        200:
          description: |
            The specified content item was updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentItem'
              example:
                id: f4b3fc05-e988-4dae-9ac1-a94aba566474
                name: On Roasts
                codename: on_roasts
                type:
                  id: b7aa4a53-d9b1-48cf-b7a6-ed0b182c4b89
                sitemap_locations:
                - id: 45a123f3-1c55-c697-7dae-78369c8f1e2c
                last_modified: '2017-04-04T13:45:30.7692802Z'
        201:
          description: |
            The specified content item was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentItem'
              example:
                id: f4b3fc05-e988-4dae-9ac1-a94aba566474
                name: On Roasts
                codename: on_roasts
                type:
                  id: b7aa4a53-d9b1-48cf-b7a6-ed0b182c4b89
                sitemap_locations:
                - id: 45a123f3-1c55-c697-7dae-78369c8f1e2c
                external_id: '59713'
                last_modified: '2017-04-04T13:45:30.7692802Z'
        400:
          description: | 
            A bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                request_id: 00000000-0000-0000-8805-0080000000bf
                error_code: 5
                message: The provided request body is invalid. See the 'validation_errors' attribute
                  for more information and specify a valid JSON object.
                validation_errors:
                - message: Property 'id' must be a valid Guid identifier.
                  path: sitemap_locations[0]
                  line: 6
                  position: 6
        404:
          description: | 
            The content item was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        429:
          $ref: '#/components/responses/rate_limit_error'
      x-code-samples: # code_sample - CM_API_UpsertItem
      - lang: cURL
        source: |
          # Insert via external ID
          curl --request PUT \
            --url https://manage.kenticocloud.com/v2/projects/975bf280-fd91-488c-994c-2f04416e5ee3/items/external-id/59713 \
            --header 'Authorization: Bearer <YOUR_API_KEY>' \
            --header 'Content-type: application/json' \
            --data '
            {
              "name": "On Roasts",
              "type": {
                "codename": "article"
              },
              "sitemap_locations": [
                {
                  "codename": "articles"
                }
              ]
            }'
          
          # Update via internal ID or codename
          curl --request PUT \
            --url https://manage.kenticocloud.com/v2/projects/975bf280-fd91-488c-994c-2f04416e5ee3/items/f4b3fc05-e988-4dae-9ac1-a94aba566474 \
          # --url https://manage.kenticocloud.com/v2/projects/975bf280-fd91-488c-994c-2f04416e5ee3/items/codename/on_roasts  \
            --header 'Authorization: Bearer <YOUR_API_KEY>' \
            --header 'Content-type: application/json' \
            --data '
          {
            "name": "On Roasts",
            "sitemap_locations": [
              {
                "codename": "articles"
              }
            ]
          }'
      - lang: .NET
        source: |
          using KenticoCloud.ContentManagement;

          ContentManagementOptions options = new ContentManagementOptions
          {
              ApiKey = "<YOUR_API_KEY>",
              ProjectId = "<YOUR_PROJECT_ID>"
          };

          ContentManagementClient client = new ContentManagementClient(options);

          string externalId = "59713";

          ContentItemUpsertModel item = new ContentItemUpsertModel()
          {
              Name = "On Roasts",
              Type = ContentTypeIdentifier.ByCodename("article"),
              SitemapLocations = new[] { SitemapNodeIdentifier.ByCodename("articles") }
          };

          ContentItemModel contentItemResponse = await client.UpsertContentItemByExternalIdAsync(externalId, item);
      
  /{project_id}/files/{file_name}:
    post:
      tags:
        - Assets
      summary: Upload a binary file
      description: |
        Add a new file. The uploaded file will not be visible in the Kentico Cloud UI unless there is an asset using it, see how to [Add an asset](#link).

        **Note**: Maximum size limit for binary files is **100 MB**.
      operationId: upload-a-binary-file
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/file_name'
        - $ref: '#/components/parameters/content_type'
        - $ref: '#/components/parameters/content_length'
      requestBody:
        description: | 
          The binary data of the file.

          <div class="callout callout--note"><p><strong>Anything goes</strong></p><p>You can even upload exe files disguised as jpegs. It's all about the <code>Content-type</code> header.</p></div>
        content:
          application/json:
            schema:
              type: string
              format: binary
        required: true
      responses:
        200:
          description: |
            A file reference to the uploaded binary file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileReference'
              example:
                id: 806ec84e-7c71-4856-9519-ee3dd3558583
                type: internal
        400:
          description: |
            A bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                request_id: 00000000-0000-0000-c403-0080000000c2
                error_code: 205
                message: The request does not contain required header Content-Type.
        429:
          $ref: '#/components/responses/rate_limit_error'
      x-code-samples:
      - lang: cURL
        source: |
          curl --request POST \
          --url https://manage.kenticocloud.com/v1/projects/975bf280-fd91-488c-994c-2f04416e5ee3/files/which-brewing-fits-you-1080px.jpg \
          --data-binary "@which-brewing-fits-you-1080px.jpg" \
          --header 'Authorization: Bearer <YOUR_API_KEY>' \
          --header 'Content-type: image/jpeg' \
          --header 'Content-length: 125770'
      - lang: .NET
        source: |
          using KenticoCloud.ContentManagement;

          ContentManagementOptions options = new ContentManagementOptions
          {
            ApiKey = "<YOUR_API_KEY>",
            ProjectId = "<YOUR_PROJECT_ID>"
          };

          ContentManagementClient client = new ContentManagementClient(options);

          string filePath = Path.Combine(AppContext.BaseDirectory, @"<YOUR_PATH>\which-brewing-fits-you-1080px.jpg");
          string contentType = "image/jpeg";

          // Binary file reference to be used when adding a new asset
          FileReference fileReference = await client.UploadFileAsync(new FileContentSource(filePath, contentType));

          // To create an asset, see the "Add an asset" endpoint
  /{project_id}/assets:
    post:
      tags:
      - Assets
      summary: Add an asset
      description: |
        Use a file reference to link an existing [binary file](#operation/upload-a-binary-file) to a new asset. You can also create assets by upserting (PUT `/assets/external-id/<external_id>`), see Upsert an asset.

        **Note**: Each binary file can be referenced only by a single asset.
      operationId: add-an-asset
      parameters:
        - $ref: '#/components/parameters/project_id'
      requestBody:
        description: |
          The asset to be created.
        content:
          application/json:
            schema:
              properties:
                file_reference:
                  $ref: '#/components/schemas/FileReference'
                title:
                  type: string
                  description: |
                    The title of the new asset. Maximum length is 50 characters. Use this parameter to better identify and filter your assets in the UI.
                  example: Coffee Brewing Techniques
                  maxLength: 50
                external_id:
                  type: string
                  description: |
                    The external ID of the new asset. Use this parameter as a unique identifier for your assets. **Note**: You cannot upsert external ID into already existing assets.
                  example: which-brewing-fits-you
                descriptions:
                  type: array
                  description: |
                    An array of asset descriptions.
                  items:
                    $ref: '#/components/schemas/AssetDescription'
              required:
              - file_reference
              - descriptions
      responses:
        201:
          description: |
            The created asset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        400:
          description: |
            A bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        429:
          $ref: '#/components/responses/rate_limit_error'
      x-code-samples:
        - lang: cURL
          source: |
            curl --request POST \
              --url https://manage.kenticocloud.com/projects/v2/975bf280-fd91-488c-994c-2f04416e5ee3/assets \
              --header 'Authorization: Bearer <YOUR_API_KEY>' \
              --header 'Content-type: application/json' \
              --data '
              {
              "file_reference": {
                "id": "fcbb12e6-66a3-4672-85d9-d502d16b8d9c",
                "type": "internal"
              },
              "title": "Coffee Brewing Techniques",
              "external_id": "which-brewing-fits-you",
              "descriptions": [
                {
                  "language": {
                    "codename": "en-US"
                  },
                  "description": "Coffee Brewing Techniques"
                },
                {
                  "language": {
                    "codename": "es-ES"
                  },
                  "description": "TÃ©cnicas para hacer cafÃ©"
                }
              ]
              }'
        - lang: .NET
          source: |
            using KenticoCloud.ContentManagement;

            ContentManagementOptions options = new ContentManagementOptions
            {
              ApiKey = "<YOUR_API_KEY>",
              ProjectId = "<YOUR_PROJECT_ID>"
            };

            ContentManagementClient client = new ContentManagementClient(options);

            IEnumerable<AssetDescription> descriptions = new List<AssetDescription>();

            AssetUpsertModel model = new AssetUpsertModel
            {
              // To create a file reference, see the "Upload a binary file" endpoint
              FileReference = fileReference,

              Title = "Coffee Brewing Techniques",
            
              Descriptions = new List<AssetDescription>
              {
                  new AssetDescription { Description = "Coffee Brewing Techniques", Language = LanguageIdentifier.ByCodename("en-US") },
                  new AssetDescription { Description = "TÃ©cnicas para hacer cafÃ©", Language = LanguageIdentifier.ByCodename("es-ES") }
              }
            };

            AssetModel assetResult = await client.CreateAssetAsync(model);
  /{project_id}/taxonomies/{taxonomy_group_identifier}:
    patch:
      tags:
        - Taxonomy
      summary: Modify taxonomy groups
      description: |
        Modify taxonomy groups and their terms. The taxonomy group can be specified by internal ID, codename, or external ID.
        <div class="callout callout--info"><p><strong>Brace yourself</strong></p><p>Should only by administered by experienced professionals.</p></div>
      operationId: modify-taxonomy-groups
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/taxonomy_group_identifier'
      requestBody:
        description: |
          A list of operations to perform over your project's taxonomies.

        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TaxonomyOperation'
              example:
                - op: replace
                  reference:
                    codename: coffee_expert
                  property_name: name
                  value: Coffee Experts
                - op: replace
                  reference:
                    codename: coffee_enthusiast
                  property_name: terms
                  value:
                  - name: Coffee Lovers
                    terms: []
                  - name: Coffee Bloggers
                    terms:
                    - name: Coffee Connoisseurs
                      terms: []
                - op: remove
                  reference:
                    id: cdf2f3c6-89e3-5df1-f7de-7179460bd6b4
                - op: addInto
                  reference:
                    external-id: tax-term-11
                  before:
                    external-id: tax-term-24
                  value:
                    name: Coffee Sippers
                    terms: []
      responses:
        200:
          description: |
            A list of modified taxonomy groups.
                

components:
  securitySchemes:
    Bearer:
      type: http
      description: |
        API key to authorize requests to the API. If you don't have an API key for this API yet, get yours in [Kentico Cloud](https://app.kenticocloud.com/) > Project settings > API keys.

        <div class="callout callout--warning"><p><strong>Warning: This is fine</strong></p><p>We recommend that you use the `Authorization` header when making requests to the API to avoid getting hurt.</p></div>
      scheme: bearer
      bearerFormat: Bearer <YOUR_API_KEY>
  
  parameters:
    project_id:
      name: project_id
      in: path
      description: |
        The ID of your project.
      required: true
      schema:
        type: string
        format: uuid
      example: 975bf280-fd91-488c-994c-2f04416e5ee3

    item_identifier:
      name: item_identifier
      in: path
      description: |
        An identifier of a specific content item. You can identify the item by its:
        
        * Codename (`codename/on_roasts`)
        * Internal ID (`f4b3fc05-e988-4dae-9ac1-a94aba566474`)
        * External ID (`external-id/59713`)
      required: true
      schema:
        type: string
      example: external-id/59731

    item_identifier_upsert:
      name: item_identifier
      in: path
      description: |
        An identifier of a specific content item. You can identify the item by its:
        
        * Codename (`codename/on_roasts`)
        * Internal ID (`f4b3fc05-e988-4dae-9ac1-a94aba566474`)
        * External ID (`external-id/59713`)

        <div class="callout callout--note"><p><strong>External IDs</strong></p><p>If a content item with the specified external ID does NOT exist, a new content item will be created. If the content item specified by the external ID already exists, the properties specified in the request body will be updated.</p></div>
      required: true
      schema:
        type: string

    taxonomy_group_identifier:
      name: taxonomy_group_identifier
      in: path
      description: |
        An identifier of a specific taxonomy group. You can identify a taxonomy group by its codename (`codename/personas`), its internal ID (`f6191b9f-0625-44de-8d9a-764df42a00da`), or its external ID (`external-id/Tax-Group-123`).
      required: true
      schema:
        type: string
      example: 'external-id/Tax-Group-123'

    file_name:
      name: file_name
      in: path
      description: |
        The name of the uploaded binary file. The `file_name` parameter specified in the URL will be used for the asset name when [creating an asset](#operation/add-an-asset).

        <div class="callout callout--info"><p><strong>Premium feature</strong></p><p>You'll need a Business plan to specify file name. Lower plans get automatically generated uuids.</p></div>
      required: true
      schema:
        type: string
      example: which-brewing-fits-you-1080px.jpg

    content_type:
      name: Content-type
      in: header
      description: |
        Specifies the media type of the binary data.
      required: true
      schema:
        type: string
      example: image/jpeg

    content_length:
      name: Content-length
      in: header
      description: |
        Specifies the size of the binary file in bytes.
      required: true      
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 104857600
      example: 125770

    retry_after:
      name: Retry-after
      in: header
      description: |
        Indicates how long (in seconds) the client should wait before making a new request.
      required: true
      schema:
        type: integer
        format: int32
      example: 30
    
  schemas:
    Asset:
      type: object
      description: |
        Assets in Kentico Cloud consist of a reference to a binary file and metadata describing the file.
      properties:
        id:
          type: string
          description: |
            Internal identifier of the asset.
          example: fcbb12e6-66a3-4672-85d9-d502d16b8d9c
          format: uuid
          readOnly: true
        file_name:
          type: string
          description: |
            Name of the binary file associated with the asset. **Note**: Determined by the file referenced in the `file_reference` property.
          example: which-brewing-fits-you-1080px.jpg
          readOnly: true
        title:
          type: string
          description: |
            Display name of the asset.
          example: Coffee Brewing Techniques
        size:
          type: integer
          description: |
            Size of the binary file in bytes. **Note**: Determined by the file referenced in the `file_reference` property.
          example: 125770
          format: int32
          readOnly: true
        type:
          type: string
          description: |
            MIME type of the file. **Note**: Determined by the file referenced in the `file_reference` property.
          example: image/jpeg
          readOnly: true
        image_width:
          type: integer
          description: |
            Width of the image in pixels. **Note**: Determined by the file referenced in the `file_reference` property. Is `null` if the file is not an image.
          example: 1000
          format: int32
          nullable: true
          readOnly: true
        image_height:
          type: integer
          description: |
            Height of the image in pixels. **Note**: Determined by the file referenced in the `file_reference` property. Is `null` if the file is not an image.
          example: 666
          format: int32
          nullable: true
          readOnly: true
        file_reference:
          $ref: '#/components/schemas/FileReference'
        descriptions:
          type: array
          description: |
            Asset descriptions for each active language.

            <div class="callout callout--warning"><p><strong>Deactivated languages</strong></p><p>Deactivating a language in your project also deletes any content in that language, including your asset description. False.</p></div>
          items:
            $ref: '#/components/schemas/AssetDescription'
          uniqueItems: true
        external_id:
          type: string
          description: |
            External identifier of the asset. **Note**: The external ID can be specified when adding assets (POST `/assets`) or upserting assets (PUT `/assets/external-id/<external_id>`). If not specified, the `external_id` property is not present.
          example: which-brewing-fits-you
        last_modified:
          type: string
          description: |
            ISO-8601 formatted date/time of the last modification.
          example: 2017-09-12T08:29:36.1645977Z
          format: date-time
          readOnly: true
      required:
      - id
      - file_name
      - title
      - size
      - type
      - image_width
      - image_height
      - file_reference
      - descriptions
      - last_modified
    
    AssetDescription:
      type: object
      description: |
        An asset description defines a description of an asset for a single language.
      example:
        language:
          id: 00000000-0000-0000-0000-000000000000
        description: Coffee Brewing Techniques
      properties:
        language:
          $ref: '#/components/schemas/Reference'
        description:
          type: string
          description: |
            Description of the asset.
      required:
      - language
      - description

    ContentItem:
      type: object
      description: |
        The content item object contains metadata about your content, it does not store the content itself.
      properties:
        id:
          type: string
          description: | 
            Internal ID of the content item
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          format: uuid
          readOnly: true
        name:
          type: string
          description: |
            Display name of the content item
          example: On Roasts
          maxLength: 50
        codename:
          type: string
          description: |
            Codename of the content item, generated from the content item's name.
          example: on_roasts
          readOnly: true
        type:
          $ref: '#/components/schemas/Reference'
        sitemap_locations:
          type: array
          description: |
            One or more references to sitemap locations.
          items:
            $ref: '#/components/schemas/Reference'
        external_id:
          type: string
          description: |
            User-defined external ID of the content item
          example: "59713"
        last_modified:
          type: string
          description: |
            Time (ISO-8601 formatted) of the last modification of the content item
          format: date-time
          example: 2017-04-04T13:45:30.7692802Z
          readOnly: true
      required:
        - id
        - name
        - codename
        - type
        - sitemap_locations
        - last_modified

    Update_ContentItem:
      type: object
      description: |
        The content item to update.
      properties:
        name:
          type: string
          description: |
            Display name of the content item
          example: On Roasts
          maxLength: 50
        sitemap_locations:
          type: array
          description: |
            One or more references to sitemap locations.
          items:
            $ref: '#/components/schemas/Reference'
      required:
        - name
        - sitemap_locations
      example:
        name: On Roasts
        sitemap_locations:
        - codename: articles

    Insert_ContentItem:
      allOf:
        - $ref: '#/components/schemas/Update_ContentItem'
        - type: object
          properties:
            type:
              $ref: '#/components/schemas/Reference'
          required:
            - type
      example:
        name: On Roasts
        sitemap_locations:
        - codename: articles
        type:
          codename: article

    TaxonomyGroup:
      type: object

    TaxonomyTerm:
      type: object

    TaxonomyOperation:
      oneOf:
      - $ref: '#/components/schemas/TaxonomyOperationAddInto'
      - $ref: '#/components/schemas/TaxonomyOperationRemove'
      - $ref: '#/components/schemas/TaxonomyOperationReplace'
      description: |
        An operation that modifies a taxonomy group or taxonomy term, specified by a reference.

        <div class="callout callout--info"><p><strong>Referencing objects</strong></p><p>Scared of references? So were we. Learn more about references here and cherish the endless possibilities.</p></div>
      discriminator:
        propertyName: op
        mapping:
          addInto: '#/components/schemas/TaxonomyOperationAddInto'
          remove: '#/components/schemas/TaxonomyOperationRemove'
          replace: '#/components/schemas/TaxonomyOperationReplace'

    TaxonomyOperationAddInto:
      type: object
      required:
      - op
      - value
      - reference
      properties:
        op:
          type: string
          description: |
            The operation you want to perform. Use `replace` to modify taxonomy groups or terms, `remove` to delete taxonomy terms, or `addInto` to add new taxonomy terms.
          enum:
            - addInto
            - replace
            - remove
          example: addInto
        reference:
          description: |
            Reference to the taxonomy group or term to which the new term will be added.
          allOf:
            - $ref: '#/components/schemas/Reference'
        value:
          type: string
          description: |
            Name of the new taxonomy term.
        before:
          description: |
            Reference to another taxonomy term. Use `after` to place the new term below the referenced term.
            
            **Note**: `before` and `after` are optional  mutually exclusive. If you omit these properties, the new term will be added to the end of the list.
          allOf:
            - $ref: '#/components/schemas/Reference'
        after:
          description: |
            Reference to another taxonomy term. Use `before` to place the new term above the referenced term.
            
            **Note**: `before` and `after` are optional  mutually exclusive. If you omit these properties, the new term will be added to the end of the list.
          allOf:
            - $ref: '#/components/schemas/Reference'
  
    TaxonomyOperationReplace:
      type: object
      required:
      - op
      - value
      - reference
      properties:
        op:
          type: string
          description: |
            The operation you want to perform. Use `replace` to modify taxonomy groups or terms, `remove` to delete taxonomy terms, or `addInto` to add new taxonomy terms.
          enum:
            - addInto
            - replace
            - remove
        reference:
          description: |
            Reference to the existing taxonomy group or term that will be modified.
          allOf:
            - $ref: '#/components/schemas/Reference'
        value:
          type: string
          description: |
            Represents the name or terms of the updated taxonomy group or term. The value property to be added to the specified Taxonomy group or term can be: `name` â€“ a string, `terms` â€“ an array of Term objects.
        
    TaxonomyOperationRemove:
      type: object
      required:
      - op
      - reference
      properties:
        op:
          type: string
          description: |
            The operation you want to perform. Use `replace` to modify taxonomy groups or terms, `remove` to delete taxonomy terms, or `addInto` to add new taxonomy terms.
          enum:
            - addInto
            - replace
            - remove
        reference:
          description: |
            Reference to the existing taxonomy term that you want to delete.
          allOf:
            - $ref: '#/components/schemas/Reference'

    Reference:
      type: object
      description: |
        Reference to an object in the Kentico Cloud project. You can reference objects by their internal ID, codename, or external ID. See [Referencing objects](#tag/Referencing-objects) for more information.
      properties:
        id:
          type: string
          description: |
            System-generated internal ID of the referenced object
          example: <aaaaaaaa-bbbb-cccc-dddd-0123456789ab>
          format: uuid
        codename:
          type: string
          description: |
            Codename of the referenced object
          example: <object_codename>
          writeOnly: true
        external_id:
          type: string
          description: |
            User-defined external ID of the referenced object
          example: <object's_external_id>
          writeOnly: true

    FileReference:
      type: object
      description: |
        A reference to a specific binary file uploaded to your project.
      properties:
        id:
          description: |
            Internal identifier of the binary file.
          type: string
          format: uuid
        type:
          description: |
            Type of the reference.
          type: string
          example: internal
          enum:
            - internal
      required:
      - id
      - type

    Error:
      type: object
      description: Error object
      properties:
        request_id:
          type: string
          description: ID of the performed request
          format: uuid
        error_code:
          type: integer
          description: Code of the returned error
          maximum: 500
          minimum: 100
          format: int32
        message:
          type: string
          description: Instructions on how to resolve the error
        validation_errors:
          type: array
          description: Additional validation errors that occurred when processing the request
          items:
            $ref: '#/components/schemas/ValidationError'
      required:
      - request_id
      - error_code
      - message

    ValidationError:
      type: object
      properties:
        message:
          type: string
        path:
          type: string
        line:
          type: integer
        position:
          type: integer
      required:
      - message
      - path
      - line
      - position

  responses:
    rate_limit_error:
      description: |
        The API rate limit has been exceeded.
      headers:
        Retry-after:
          $ref: '#/components/parameters/retry_after'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            request_id: 80000004-0002-fd00-b63f-84710c7967bb
            error_code: 10000
            message: API rate limit exceeded. Please retry your request later.